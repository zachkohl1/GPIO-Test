/*
 * expander.c
 *
 *  Created on: Nov 29, 2024
 *      Author: kohlmanz
 *  Description: Implemntation of MCP23S17 GPIO Expander driver.
 *  This module provides interrupt-driven SPI communication for
 *  configuring and controlling MCP23S17 GPIO expander chips.
 */

#include "expander.h"
/**
 * @brief Initialize an MCP23S17 GPIO Expander
 *
 * @param expander Pointer to the Expander structure to initialize
 * @param num Expander number (used for chip select and identification)
 * @param hspi Pointer to the SPI handle for communication
 *
 * @return void
 */
void Expander_Init(Expander* expander, uint8_t num, SPI_HandleTypeDef* hspi)
{
    expander->hspi = hspi;
    expander->num = num;
    expander->state = DEFAULT_STATE;
}

/**
 * @brief Configure GPIO pin direction for each pin on a port on the expander
 *			Writes IO direction
 * @param expander Pointer to the Expander structure
 * @param port Port to configure (0 for GPIOA, 1 for GPIOB)
 * @param direction Bit configuration for EACH pin direction
 *        (0 = output, 1 = input). Expects direction FOR EACH PIN
 *        Ex:	IO7		IO6		IO5		IO4		IO3		IO2		IO1		IO0
 *       		0		0		0		0		0		1		0		1
 *			To set pins GPIO2 and GPIO0 as inputs.
 * @return HAL_StatusTypeDef Status of the configuration operation
 */
HAL_StatusTypeDef Expander_ConfigureGPIO(Expander* expander, uint8_t port, uint8_t direction)
{
    uint8_t reg = (port == 0) ? MCP23S17_IODIRA : MCP23S17_IODIRB;
    return Expander_WriteRegisterIT(expander, reg, direction);
}

/**
 * @brief Configure internal pull-up resistors for a specific port
 *
 * @param expander Pointer to the Expander structure
 * @param port Port to configure (0 for GPIOA, 1 for GPIOB)
 * @param pullup_config Bit configuration for pull-up resistors
 *        (1 = pull-up enabled, 0 = pull-up disabled)
 *
 * @return HAL_StatusTypeDef Status of the pull-up configuration operation
 */
HAL_StatusTypeDef Expander_ConfigurePullUps(Expander* expander, uint8_t port, uint8_t pullup_config)
{
    uint8_t reg = (port == 0) ? MCP23S17_GPPUA : MCP23S17_GPPUB;
    return Expander_WriteRegisterIT(expander, reg, pullup_config);
}

/**
 * @brief Write to a register using interrupt-driven SPI transmission
 *
 * @param expander Pointer to the Expander structure
 * @param reg Register address to write to
 * @param data Data to write to the register
 *
 * @return HAL_StatusTypeDef Status of the write operation
 * @note Prevents writing if expander is not in IDLE state
 */
HAL_StatusTypeDef Expander_WriteRegisterIT(Expander* expander, uint8_t reg, uint8_t data)
{
	// If we aren't in an idle state, then that means another transaction in progress. Return busy are waiting for an
    if(expander->state != IDLE)
        return HAL_BUSY;

    // Store write variables - NOTE: write_data is only set in this function and WILL NOT be set if trying to read which will first write to the expander and wait.
    expander->write_reg = reg;		// Register address to write to
    expander->write_data = data;	// Data to write - register pin states (on/off, 0/1)
    expander->state = WRITING;		// We are now writing data to the expander, switch the state

    // Data to send - Control byte, register to write to, data to write
    const uint8_t tx_buffer[3] = {WRITE_CONTROL_BYTE_1, expander->write_reg, expander->write_data};

    // Use appropriate expander CS pins
    if(expander->num == 1)
    {
        MCP23S17_CS_LOW_1();
    }
    else
    {
    	MCP23S17_CS_LOW_2();
    }

    // Transmit
    return HAL_SPI_Transmit_IT(expander->hspi, tx_buffer, sizeof(tx_buffer));
}

HAL_StatusTypeDef Expander_WriteRegister(Expander* expander, uint8_t reg, uint8_t data)
{
	// If we aren't in an idle state, then that means another transaction in progress. Return busy are waiting for an
    if(expander->state != IDLE)
        return HAL_BUSY;

    // Store write variables - NOTE: write_data is only set in this function and WILL NOT be set if trying to read which will first write to the expander and wait.
    expander->write_reg = reg;		// Register address to write to
    expander->write_data = data;	// Data to write - register pin states (on/off, 0/1)
    expander->state = WRITING;		// We are now writing data to the expander, switch the state

    // Data to send - Control byte, register to write to, data to write
    const uint8_t tx_buffer[3] = {WRITE_CONTROL_BYTE_1, expander->write_reg, expander->write_data};

    // Use appropriate expander CS pins
    if(expander->num == 1)
    {
        MCP23S17_CS_LOW_1();
    }
    else
    {
    	MCP23S17_CS_LOW_2();
    }

    // Transmit
    return HAL_SPI_Transmit(expander->hspi, tx_buffer, sizeof(tx_buffer), 100);
}

/**
 * @brief Read from a register using interrupt-driven SPI transmission
 *
 * @param expander Pointer to the Expander structure
 * @param reg Register address to read from
 *
 * @return HAL_StatusTypeDef Status of the read operation
 * @note Prevents reading if expander is not in IDLE state
 */
HAL_StatusTypeDef Expander_ReadRegisterIT(Expander* expander, uint8_t reg)
{
	// If we aren't in an idle state, then that means we are waiting for another transaction. Return busy
    if(expander->state != IDLE)
        return HAL_BUSY;

    // Set expander read and state variables
    expander->read_reg = reg;
    expander->state = READING;

    // To interface with the expander chip, must first send transaction asking to 1. Read and 2. From which register
    const uint8_t tx_buffer[2] = {READ_CONTROL_BYTE_1, reg};

    // Use appropriate expander CS pins
    if(expander->num == 1)
    {
        MCP23S17_CS_LOW_1();
    }
    else
    {
    	MCP23S17_CS_LOW_2();
    }

    // Send data in tx_buffer
    return HAL_SPI_Transmit(expander->hspi, tx_buffer, sizeof(tx_buffer), 100);
//    return HAL_SPI_Transmit_IT(expander->hspi, tx_buffer, sizeof(tx_buffer));
}

/**
 * @brief Read GPIO pin states for a specific port
 *
 * @param expander Pointer to the Expander structure
 * @param port Port to read (0 for GPIOA, 1 for GPIOB)
 * @param value Pointer to store the read GPIO pin states
 *
 * @return HAL_StatusTypeDef Status of the GPIO read operation
 */
HAL_StatusTypeDef Expander_ReadGPIO(Expander* expander, uint8_t port, uint8_t* value)
{
    uint8_t reg = (port == 0) ? MCP23S17_GPIOA : MCP23S17_GPIOB;
    return Expander_ReadRegisterIT(expander, reg);
}

/**
 * @brief Write to GPIO pins for a specific port
 *
 * @param expander Pointer to the Expander structure
 * @param port Port to write to (0 for GPIOA, 1 for GPIOB)
 * @param value Bit values to write to the GPIO pins
 *
 * @return HAL_StatusTypeDef Status of the GPIO write operation
 */
HAL_StatusTypeDef Expander_WriteGPIO(Expander* expander, uint8_t port, uint8_t value)
{
    uint8_t reg = (port == 0) ? MCP23S17_GPIOA : MCP23S17_GPIOB;
    return Expander_WriteRegisterIT(expander, reg, value);
}






