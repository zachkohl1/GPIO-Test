
test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b90  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004e28  08004e28  00005e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e38  08004e38  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004e38  08004e38  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e38  08004e38  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e3c  08004e3c  00005e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08004e40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  24000010  08004e50  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000cc  08004e50  000060cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d94e  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207d  00000000  00000000  0001398c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00015a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000819  00000000  00000000  000164e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000391a5  00000000  00000000  00016cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f905  00000000  00000000  0004fe9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176b00  00000000  00000000  0005f7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d62a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b60  00000000  00000000  001d62e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001d8e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004e10 	.word	0x08004e10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004e10 	.word	0x08004e10

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000408:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <ExitRun0Mode+0x2c>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <ExitRun0Mode+0x2c>)
 800040e:	f023 0302 	bic.w	r3, r3, #2
 8000412:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000414:	bf00      	nop
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <ExitRun0Mode+0x2c>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	58024800 	.word	0x58024800

08000434 <Expander_Init>:
 * @param hspi Pointer to the SPI handle for communication
 *
 * @return void
 */
HAL_StatusTypeDef Expander_Init(Expander* expander, uint8_t num, SPI_HandleTypeDef* hspi, uint8_t port)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	607a      	str	r2, [r7, #4]
 800043e:	461a      	mov	r2, r3
 8000440:	460b      	mov	r3, r1
 8000442:	72fb      	strb	r3, [r7, #11]
 8000444:	4613      	mov	r3, r2
 8000446:	72bb      	strb	r3, [r7, #10]
    expander->hspi = hspi;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]
    expander->num = num;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	7afa      	ldrb	r2, [r7, #11]
 8000452:	711a      	strb	r2, [r3, #4]
    expander->state = DEFAULT_STATE;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	2200      	movs	r2, #0
 8000458:	725a      	strb	r2, [r3, #9]

    // Set up addressing schemes - hardware and register
    if(port == 0)
 800045a:	7abb      	ldrb	r3, [r7, #10]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d109      	bne.n	8000474 <Expander_Init+0x40>
    {
    	// Set HAEN for hardware addressing (Bit 3 in IOCON register (4th bit including 0))
    	if(Expander_WriteRegister(expander,MCP23S17_IOCONA, (1 << IOCON_INTPOL_BIT) | (0 << IOCON_ODR_BIT) | (1 << IOCON_HAEN_BIT) | (1 << IOCON_DISSLW_BIT) | (0 << IOCON_SEQOP_BIT) | (0 << IOCON_INT_MIRROR_BIT) | (0 << IOCON_BANK_BIT)))
 8000460:	221a      	movs	r2, #26
 8000462:	210a      	movs	r1, #10
 8000464:	68f8      	ldr	r0, [r7, #12]
 8000466:	f000 f815 	bl	8000494 <Expander_WriteRegister>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d00b      	beq.n	8000488 <Expander_Init+0x54>
    		return HAL_ERROR;
 8000470:	2301      	movs	r3, #1
 8000472:	e00a      	b.n	800048a <Expander_Init+0x56>
    }
    else
    {
  	  if(Expander_WriteRegister(expander,MCP23S17_IOCONB,  IOCON_HAEN_BIT))
 8000474:	2203      	movs	r2, #3
 8000476:	210b      	movs	r1, #11
 8000478:	68f8      	ldr	r0, [r7, #12]
 800047a:	f000 f80b 	bl	8000494 <Expander_WriteRegister>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <Expander_Init+0x54>
  		  return HAL_ERROR;
 8000484:	2301      	movs	r3, #1
 8000486:	e000      	b.n	800048a <Expander_Init+0x56>
		Expander_WriteRegister(&expander1, MCP23S17_DEFVALB, (1 << 0));			// Set default value to 1, for interrupt on change
		Expander_WriteRegister(&expander1, MCP23S17_GPINTENB, 0xFF);			// Enable interrupts on all GPIOA pins
    }

	#endif
    return HAL_OK;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <Expander_WriteRegister>:
 *
 * @return HAL_StatusTypeDef Status of the write operation
 * @note Prevents writing if expander is not in IDLE state
 */
HAL_StatusTypeDef Expander_WriteRegister(Expander* expander, uint8_t reg, uint8_t data)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
 80004a0:	4613      	mov	r3, r2
 80004a2:	70bb      	strb	r3, [r7, #2]
	// Make sure no errors in parameters
	if(!expander || !expander->hspi)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d003      	beq.n	80004b2 <Expander_WriteRegister+0x1e>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d101      	bne.n	80004b6 <Expander_WriteRegister+0x22>
		return HAL_ERROR;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e026      	b.n	8000504 <Expander_WriteRegister+0x70>
	// Used for the interrupt version
//    if(expander->state != IDLE)
//        return HAL_BUSY;

    // Store write variables - NOTE: write_data is only set in this function and WILL NOT be set if trying to read which will first write to the expander and wait.
    expander->write_reg = reg;		// Register address to write to
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	78fa      	ldrb	r2, [r7, #3]
 80004ba:	715a      	strb	r2, [r3, #5]
    expander->write_data = data;	// Data to write - register pin states (on/off, 0/1)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	78ba      	ldrb	r2, [r7, #2]
 80004c0:	719a      	strb	r2, [r3, #6]
    expander->state = WRITING;		// We are now writing data to the expander, switch the state
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2201      	movs	r2, #1
 80004c6:	725a      	strb	r2, [r3, #9]

    // Data to send - Control byte, register to write to, data to write
    const uint8_t tx_buffer[2] = {WRITE_CONTROL_BYTE_1, expander->write_reg};
 80004c8:	2344      	movs	r3, #68	@ 0x44
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	737b      	strb	r3, [r7, #13]

    // Use appropriate expander CS pins
    if(expander->num == 1)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d105      	bne.n	80004e6 <Expander_WriteRegister+0x52>
    {
        MCP23S17_CS_LOW_1();
 80004da:	2201      	movs	r2, #1
 80004dc:	2110      	movs	r1, #16
 80004de:	480b      	ldr	r0, [pc, #44]	@ (800050c <Expander_WriteRegister+0x78>)
 80004e0:	f001 f9a2 	bl	8001828 <HAL_GPIO_WritePin>
 80004e4:	e005      	b.n	80004f2 <Expander_WriteRegister+0x5e>
    }
    else
    {
    	MCP23S17_CS_LOW_2();
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004ec:	4808      	ldr	r0, [pc, #32]	@ (8000510 <Expander_WriteRegister+0x7c>)
 80004ee:	f001 f99b 	bl	8001828 <HAL_GPIO_WritePin>
    // Use appropriate write
	#ifdef USING_SPI_INT
		return HAL_SPI_Transmit_IT(expander->hspi, tx_buffer, sizeof(tx_buffer));
	#endif

    return HAL_SPI_Transmit(expander->hspi, tx_buffer, sizeof(tx_buffer), 100);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6818      	ldr	r0, [r3, #0]
 80004f6:	f107 010c 	add.w	r1, r7, #12
 80004fa:	2364      	movs	r3, #100	@ 0x64
 80004fc:	2202      	movs	r2, #2
 80004fe:	f003 fe51 	bl	80041a4 <HAL_SPI_Transmit>
 8000502:	4603      	mov	r3, r0
}
 8000504:	4618      	mov	r0, r3
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	58020400 	.word	0x58020400
 8000510:	58021c00 	.word	0x58021c00

08000514 <Expander_WriteGPIO>:
 * @param value Bit values to write to the GPIO pins
 *
 * @return HAL_StatusTypeDef Status of the GPIO write operation
 */
HAL_StatusTypeDef Expander_WriteGPIO(Expander* expander, uint8_t port, uint8_t value)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
 8000520:	4613      	mov	r3, r2
 8000522:	70bb      	strb	r3, [r7, #2]
    uint8_t reg = (port == 0) ? MCP23S17_GPIOA : MCP23S17_GPIOB;
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d101      	bne.n	800052e <Expander_WriteGPIO+0x1a>
 800052a:	2312      	movs	r3, #18
 800052c:	e000      	b.n	8000530 <Expander_WriteGPIO+0x1c>
 800052e:	2313      	movs	r3, #19
 8000530:	73fb      	strb	r3, [r7, #15]
    return Expander_WriteRegister(expander, reg, value);
 8000532:	78ba      	ldrb	r2, [r7, #2]
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	4619      	mov	r1, r3
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f7ff ffab 	bl	8000494 <Expander_WriteRegister>
 800053e:	4603      	mov	r3, r0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
    if(current_expander->state == WRITING)
 8000550:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <HAL_SPI_TxCpltCallback+0x60>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	7a5b      	ldrb	r3, [r3, #9]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d104      	bne.n	8000564 <HAL_SPI_TxCpltCallback+0x1c>
    {

        current_expander->state = IDLE;
 800055a:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <HAL_SPI_TxCpltCallback+0x60>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2200      	movs	r2, #0
 8000560:	725a      	strb	r2, [r3, #9]
        else
        {
        	MCP23S17_CS_HIGH_2();
        }
    }
}
 8000562:	e01d      	b.n	80005a0 <HAL_SPI_TxCpltCallback+0x58>
    else if(current_expander->state == READING)
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <HAL_SPI_TxCpltCallback+0x60>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	7a5b      	ldrb	r3, [r3, #9]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d118      	bne.n	80005a0 <HAL_SPI_TxCpltCallback+0x58>
        HAL_SPI_Receive_IT(hspi, &(current_expander->read_data), sizeof(current_expander->read_data));
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <HAL_SPI_TxCpltCallback+0x60>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3308      	adds	r3, #8
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f004 f801 	bl	8004580 <HAL_SPI_Receive_IT>
        if(current_expander->num == 1)
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <HAL_SPI_TxCpltCallback+0x60>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d105      	bne.n	8000594 <HAL_SPI_TxCpltCallback+0x4c>
            MCP23S17_CS_HIGH_1();
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <HAL_SPI_TxCpltCallback+0x64>)
 800058e:	f001 f94b 	bl	8001828 <HAL_GPIO_WritePin>
}
 8000592:	e005      	b.n	80005a0 <HAL_SPI_TxCpltCallback+0x58>
        	MCP23S17_CS_HIGH_2();
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <HAL_SPI_TxCpltCallback+0x68>)
 800059c:	f001 f944 	bl	8001828 <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	240000c0 	.word	0x240000c0
 80005ac:	58020400 	.word	0x58020400
 80005b0:	58021c00 	.word	0x58021c00

080005b4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    if(current_expander->state == READING)
 80005bc:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <HAL_SPI_RxCpltCallback+0x44>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	7a5b      	ldrb	r3, [r3, #9]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d103      	bne.n	80005ce <HAL_SPI_RxCpltCallback+0x1a>
    {
        current_expander->state = IDLE;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <HAL_SPI_RxCpltCallback+0x44>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2200      	movs	r2, #0
 80005cc:	725a      	strb	r2, [r3, #9]
    }
    if(current_expander->num == 1)
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_SPI_RxCpltCallback+0x44>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d105      	bne.n	80005e4 <HAL_SPI_RxCpltCallback+0x30>
    {
        MCP23S17_CS_HIGH_1();
 80005d8:	2200      	movs	r2, #0
 80005da:	2110      	movs	r1, #16
 80005dc:	4807      	ldr	r0, [pc, #28]	@ (80005fc <HAL_SPI_RxCpltCallback+0x48>)
 80005de:	f001 f923 	bl	8001828 <HAL_GPIO_WritePin>
    }
    else
    {
    	MCP23S17_CS_HIGH_2();
    }
}
 80005e2:	e005      	b.n	80005f0 <HAL_SPI_RxCpltCallback+0x3c>
    	MCP23S17_CS_HIGH_2();
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <HAL_SPI_RxCpltCallback+0x4c>)
 80005ec:	f001 f91c 	bl	8001828 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	240000c0 	.word	0x240000c0
 80005fc:	58020400 	.word	0x58020400
 8000600:	58021c00 	.word	0x58021c00

08000604 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    current_expander->state = IDLE;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <HAL_SPI_ErrorCallback+0x3c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2200      	movs	r2, #0
 8000612:	725a      	strb	r2, [r3, #9]
    if(current_expander->num == 1)
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <HAL_SPI_ErrorCallback+0x3c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d105      	bne.n	800062a <HAL_SPI_ErrorCallback+0x26>
    {
        MCP23S17_CS_HIGH_1();
 800061e:	2200      	movs	r2, #0
 8000620:	2110      	movs	r1, #16
 8000622:	4808      	ldr	r0, [pc, #32]	@ (8000644 <HAL_SPI_ErrorCallback+0x40>)
 8000624:	f001 f900 	bl	8001828 <HAL_GPIO_WritePin>
    }
    else
    {
    	MCP23S17_CS_HIGH_2();
    }
}
 8000628:	e005      	b.n	8000636 <HAL_SPI_ErrorCallback+0x32>
    	MCP23S17_CS_HIGH_2();
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <HAL_SPI_ErrorCallback+0x44>)
 8000632:	f001 f8f9 	bl	8001828 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	240000c0 	.word	0x240000c0
 8000644:	58020400 	.word	0x58020400
 8000648:	58021c00 	.word	0x58021c00

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000656:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000658:	bf00      	nop
 800065a:	4b44      	ldr	r3, [pc, #272]	@ (800076c <main+0x120>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <main+0x24>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	dcf4      	bgt.n	800065a <main+0xe>
  if ( timeout < 0 )
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	da01      	bge.n	800067a <main+0x2e>
  {
  Error_Handler();
 8000676:	f000 f9cb 	bl	8000a10 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fb0d 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f87f 	bl	8000780 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000682:	4b3a      	ldr	r3, [pc, #232]	@ (800076c <main+0x120>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <main+0x120>)
 800068a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800068e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000692:	4b36      	ldr	r3, [pc, #216]	@ (800076c <main+0x120>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f001 f8db 	bl	800185c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80006a6:	2100      	movs	r1, #0
 80006a8:	2000      	movs	r0, #0
 80006aa:	f001 f8f1 	bl	8001890 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80006ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006b2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80006b4:	bf00      	nop
 80006b6:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <main+0x120>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d104      	bne.n	80006cc <main+0x80>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	1e5a      	subs	r2, r3, #1
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dcf4      	bgt.n	80006b6 <main+0x6a>
if ( timeout < 0 )
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da01      	bge.n	80006d6 <main+0x8a>
{
Error_Handler();
 80006d2:	f000 f99d 	bl	8000a10 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 f929 	bl	800092c <MX_GPIO_Init>
  MX_SPI2_Init();
 80006da:	f000 f8d1 	bl	8000880 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Init expanders - sets up interrupt on appropriate pins and sets up hardware & register addressing schemes according to data sheet
  if(Expander_Init(&expander1, EXPANDER1_NUM, &hspi2, 0) != HAL_OK)
 80006de:	2300      	movs	r3, #0
 80006e0:	4a23      	ldr	r2, [pc, #140]	@ (8000770 <main+0x124>)
 80006e2:	2101      	movs	r1, #1
 80006e4:	4823      	ldr	r0, [pc, #140]	@ (8000774 <main+0x128>)
 80006e6:	f7ff fea5 	bl	8000434 <Expander_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <main+0xa8>
	  Error_Handler();
 80006f0:	f000 f98e 	bl	8000a10 <Error_Handler>

  // Configure GPIOA as all outputs
  if(Expander_WriteRegister(&expander1, MCP23S17_IODIRA, 0x00) != HAL_OK)
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	481e      	ldr	r0, [pc, #120]	@ (8000774 <main+0x128>)
 80006fa:	f7ff fecb 	bl	8000494 <Expander_WriteRegister>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <main+0xbc>
	  Error_Handler();
 8000704:	f000 f984 	bl	8000a10 <Error_Handler>
  MCP23S17_CS_HIGH_1();		// End of SPI transmit
 8000708:	2200      	movs	r2, #0
 800070a:	2110      	movs	r1, #16
 800070c:	481a      	ldr	r0, [pc, #104]	@ (8000778 <main+0x12c>)
 800070e:	f001 f88b 	bl	8001828 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(Expander_WriteGPIO(&expander1, 0, 0x00) != HAL_OK) // Turn off all LEDs
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	4817      	ldr	r0, [pc, #92]	@ (8000774 <main+0x128>)
 8000718:	f7ff fefc 	bl	8000514 <Expander_WriteGPIO>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0xda>
	  Error_Handler();
 8000722:	f000 f975 	bl	8000a10 <Error_Handler>
  MCP23S17_CS_HIGH_1();		// End of SPI transmit
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4813      	ldr	r0, [pc, #76]	@ (8000778 <main+0x12c>)
 800072c:	f001 f87c 	bl	8001828 <HAL_GPIO_WritePin>

  static uint8_t led_state = 0;
  while (1)
  {
	  // Toggle LED state using XOR
	  led_state ^= 0x01;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <main+0x130>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f083 0301 	eor.w	r3, r3, #1
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <main+0x130>)
 800073c:	701a      	strb	r2, [r3, #0]

	  // Write new state to GPA0
	  if(Expander_WriteGPIO(&expander1, 0, led_state) != HAL_OK)
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <main+0x130>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <main+0x128>)
 8000748:	f7ff fee4 	bl	8000514 <Expander_WriteGPIO>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <main+0x10a>
		  Error_Handler();
 8000752:	f000 f95d 	bl	8000a10 <Error_Handler>
      MCP23S17_CS_HIGH_1();		// End of SPI transmit
 8000756:	2200      	movs	r2, #0
 8000758:	2110      	movs	r1, #16
 800075a:	4807      	ldr	r0, [pc, #28]	@ (8000778 <main+0x12c>)
 800075c:	f001 f864 	bl	8001828 <HAL_GPIO_WritePin>



//	 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	 HAL_Delay(500);
 8000760:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000764:	f000 fb2a 	bl	8000dbc <HAL_Delay>
	  led_state ^= 0x01;
 8000768:	e7e2      	b.n	8000730 <main+0xe4>
 800076a:	bf00      	nop
 800076c:	58024400 	.word	0x58024400
 8000770:	2400002c 	.word	0x2400002c
 8000774:	240000b4 	.word	0x240000b4
 8000778:	58020400 	.word	0x58020400
 800077c:	240000c4 	.word	0x240000c4

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	@ 0x70
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	224c      	movs	r2, #76	@ 0x4c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fb11 	bl	8004db6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2220      	movs	r2, #32
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f004 fb0b 	bl	8004db6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007a0:	2004      	movs	r0, #4
 80007a2:	f001 f889 	bl	80018b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <SystemClock_Config+0xf8>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ae:	4a32      	ldr	r2, [pc, #200]	@ (8000878 <SystemClock_Config+0xf8>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <SystemClock_Config+0xf8>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <SystemClock_Config+0xfc>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c8:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <SystemClock_Config+0xfc>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <SystemClock_Config+0xfc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007dc:	bf00      	nop
 80007de:	4b27      	ldr	r3, [pc, #156]	@ (800087c <SystemClock_Config+0xfc>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ea:	d1f8      	bne.n	80007de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007ec:	2303      	movs	r3, #3
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2340      	movs	r3, #64	@ 0x40
 80007fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	2302      	movs	r3, #2
 8000804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 23;
 8000806:	2317      	movs	r3, #23
 8000808:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 177;
 800080a:	23b1      	movs	r3, #177	@ 0xb1
 800080c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000816:	2304      	movs	r3, #4
 8000818:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800081a:	2300      	movs	r3, #0
 800081c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800081e:	2300      	movs	r3, #0
 8000820:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f89e 	bl	800196c <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000836:	f000 f8eb 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	233f      	movs	r3, #63	@ 0x3f
 800083c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fcde 	bl	8002220 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800086a:	f000 f8d1 	bl	8000a10 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3770      	adds	r7, #112	@ 0x70
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	58000400 	.word	0x58000400
 800087c:	58024800 	.word	0x58024800

08000880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000884:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <MX_SPI2_Init+0xa4>)
 8000886:	4a28      	ldr	r2, [pc, #160]	@ (8000928 <MX_SPI2_Init+0xa8>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_SPI2_Init+0xa4>)
 800088c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <MX_SPI2_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_SPI2_Init+0xa4>)
 800089a:	2207      	movs	r2, #7
 800089c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80008b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <MX_SPI2_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_SPI2_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <MX_SPI2_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_SPI2_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_SPI2_Init+0xa4>)
 8000912:	f003 fb23 	bl	8003f5c <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800091c:	f000 f878 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2400002c 	.word	0x2400002c
 8000928:	40003800 	.word	0x40003800

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	@ 0x28
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b31      	ldr	r3, [pc, #196]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a2f      	ldr	r2, [pc, #188]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000960:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a28      	ldr	r2, [pc, #160]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800097e:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a20      	ldr	r2, [pc, #128]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a19      	ldr	r2, [pc, #100]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	4a11      	ldr	r2, [pc, #68]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 80009c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_GPIO_Init+0xdc>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2110      	movs	r1, #16
 80009dc:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <MX_GPIO_Init+0xe0>)
 80009de:	f000 ff23 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009e2:	2310      	movs	r3, #16
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_GPIO_Init+0xe0>)
 80009fa:	f000 fd65 	bl	80014c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58024400 	.word	0x58024400
 8000a0c:	58020400 	.word	0x58020400

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <HAL_MspInit+0x30>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <HAL_MspInit+0x30>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_MspInit+0x30>)
 8000a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	58024400 	.word	0x58024400

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0bc      	sub	sp, #240	@ 0xf0
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	22c0      	movs	r2, #192	@ 0xc0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 f9a0 	bl	8004db6 <memset>
  if(hspi->Instance==SPI2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a4f      	ldr	r2, [pc, #316]	@ (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	f040 8096 	bne.w	8000bae <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000a82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	f107 0318 	add.w	r3, r7, #24
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fef2 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000aa2:	f7ff ffb5 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aa6:	4b45      	ldr	r3, [pc, #276]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000aac:	4a43      	ldr	r2, [pc, #268]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ab6:	4b41      	ldr	r3, [pc, #260]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	4a3c      	ldr	r2, [pc, #240]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad4:	4b39      	ldr	r3, [pc, #228]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ae2:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	4a34      	ldr	r2, [pc, #208]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af2:	4b32      	ldr	r3, [pc, #200]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	4a2d      	ldr	r2, [pc, #180]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b10:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b36:	2305      	movs	r3, #5
 8000b38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b40:	4619      	mov	r1, r3
 8000b42:	481f      	ldr	r0, [pc, #124]	@ (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b44:	f000 fcc0 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b60:	2305      	movs	r3, #5
 8000b62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b66:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4815      	ldr	r0, [pc, #84]	@ (8000bc4 <HAL_SPI_MspInit+0x174>)
 8000b6e:	f000 fcab 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b96:	4619      	mov	r1, r3
 8000b98:	480b      	ldr	r0, [pc, #44]	@ (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b9a:	f000 fc95 	bl	80014c8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2024      	movs	r0, #36	@ 0x24
 8000ba4:	f000 fa15 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ba8:	2024      	movs	r0, #36	@ 0x24
 8000baa:	f000 fa2c 	bl	8001006 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000bae:	bf00      	nop
 8000bb0:	37f0      	adds	r7, #240	@ 0xf0
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40003800 	.word	0x40003800
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	58020c00 	.word	0x58020c00
 8000bc4:	58022000 	.word	0x58022000
 8000bc8:	58020400 	.word	0x58020400

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f8ab 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <SPI2_IRQHandler+0x10>)
 8000c32:	f003 fd4f 	bl	80046d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2400002c 	.word	0x2400002c

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c7c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c44:	f7ff fbde 	bl	8000404 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c48:	f7ff fb46 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f004 f8a9 	bl	8004dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fce9 	bl	800064c <main>
  bx  lr
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c84:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c88:	08004e40 	.word	0x08004e40
  ldr r2, =_sbss
 8000c8c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c90:	240000cc 	.word	0x240000cc

08000c94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC3_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f000 f98c 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ca4:	f001 fc72 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_Init+0x68>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	f003 030f 	and.w	r3, r3, #15
 8000cb4:	4913      	ldr	r1, [pc, #76]	@ (8000d04 <HAL_Init+0x6c>)
 8000cb6:	5ccb      	ldrb	r3, [r1, r3]
 8000cb8:	f003 031f 	and.w	r3, r3, #31
 8000cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_Init+0x68>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_Init+0x6c>)
 8000ccc:	5cd3      	ldrb	r3, [r2, r3]
 8000cce:	f003 031f 	and.w	r3, r3, #31
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <HAL_Init+0x70>)
 8000cda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <HAL_Init+0x74>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f814 	bl	8000d10 <HAL_InitTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e002      	b.n	8000cf8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf2:	f7ff fe93 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58024400 	.word	0x58024400
 8000d04:	08004e28 	.word	0x08004e28
 8000d08:	24000004 	.word	0x24000004
 8000d0c:	24000000 	.word	0x24000000

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_InitTick+0x60>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e021      	b.n	8000d68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_InitTick+0x64>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_InitTick+0x60>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f971 	bl	8001022 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f93b 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_InitTick+0x68>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2400000c 	.word	0x2400000c
 8000d74:	24000000 	.word	0x24000000
 8000d78:	24000008 	.word	0x24000008

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	2400000c 	.word	0x2400000c
 8000da0:	240000c8 	.word	0x240000c8

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	240000c8 	.word	0x240000c8

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffde 	bl	8000da4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2400000c 	.word	0x2400000c

08000e04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetREVID+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0c1b      	lsrs	r3, r3, #16
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	5c001000 	.word	0x5c001000

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	05fa0000 	.word	0x05fa0000

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	@ (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	@ (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	@ (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	@ 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff40 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff90 	bl	8000f10 <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5f 	bl	8000ebc <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff33 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffa4 	bl	8000f78 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e237      	b.n	80014be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d004      	beq.n	8001064 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e22c      	b.n	80014be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a5c      	ldr	r2, [pc, #368]	@ (80011dc <HAL_DMA_Abort_IT+0x1a0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d04a      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a5b      	ldr	r2, [pc, #364]	@ (80011e0 <HAL_DMA_Abort_IT+0x1a4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d045      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a59      	ldr	r2, [pc, #356]	@ (80011e4 <HAL_DMA_Abort_IT+0x1a8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d040      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a58      	ldr	r2, [pc, #352]	@ (80011e8 <HAL_DMA_Abort_IT+0x1ac>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d03b      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a56      	ldr	r2, [pc, #344]	@ (80011ec <HAL_DMA_Abort_IT+0x1b0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d036      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a55      	ldr	r2, [pc, #340]	@ (80011f0 <HAL_DMA_Abort_IT+0x1b4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d031      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a53      	ldr	r2, [pc, #332]	@ (80011f4 <HAL_DMA_Abort_IT+0x1b8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d02c      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a52      	ldr	r2, [pc, #328]	@ (80011f8 <HAL_DMA_Abort_IT+0x1bc>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d027      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a50      	ldr	r2, [pc, #320]	@ (80011fc <HAL_DMA_Abort_IT+0x1c0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d022      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001200 <HAL_DMA_Abort_IT+0x1c4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d01d      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001204 <HAL_DMA_Abort_IT+0x1c8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d018      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001208 <HAL_DMA_Abort_IT+0x1cc>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d013      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a4a      	ldr	r2, [pc, #296]	@ (800120c <HAL_DMA_Abort_IT+0x1d0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00e      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a49      	ldr	r2, [pc, #292]	@ (8001210 <HAL_DMA_Abort_IT+0x1d4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d009      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a47      	ldr	r2, [pc, #284]	@ (8001214 <HAL_DMA_Abort_IT+0x1d8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d004      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a46      	ldr	r2, [pc, #280]	@ (8001218 <HAL_DMA_Abort_IT+0x1dc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d101      	bne.n	8001108 <HAL_DMA_Abort_IT+0xcc>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <HAL_DMA_Abort_IT+0xce>
 8001108:	2300      	movs	r3, #0
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 8086 	beq.w	800121c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2204      	movs	r2, #4
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2f      	ldr	r2, [pc, #188]	@ (80011dc <HAL_DMA_Abort_IT+0x1a0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d04a      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2e      	ldr	r2, [pc, #184]	@ (80011e0 <HAL_DMA_Abort_IT+0x1a4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d045      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2c      	ldr	r2, [pc, #176]	@ (80011e4 <HAL_DMA_Abort_IT+0x1a8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d040      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a2b      	ldr	r2, [pc, #172]	@ (80011e8 <HAL_DMA_Abort_IT+0x1ac>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d03b      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a29      	ldr	r2, [pc, #164]	@ (80011ec <HAL_DMA_Abort_IT+0x1b0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d036      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a28      	ldr	r2, [pc, #160]	@ (80011f0 <HAL_DMA_Abort_IT+0x1b4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d031      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a26      	ldr	r2, [pc, #152]	@ (80011f4 <HAL_DMA_Abort_IT+0x1b8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d02c      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a25      	ldr	r2, [pc, #148]	@ (80011f8 <HAL_DMA_Abort_IT+0x1bc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d027      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <HAL_DMA_Abort_IT+0x1c0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d022      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a22      	ldr	r2, [pc, #136]	@ (8001200 <HAL_DMA_Abort_IT+0x1c4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d01d      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a20      	ldr	r2, [pc, #128]	@ (8001204 <HAL_DMA_Abort_IT+0x1c8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d018      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <HAL_DMA_Abort_IT+0x1cc>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d013      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <HAL_DMA_Abort_IT+0x1d0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00e      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <HAL_DMA_Abort_IT+0x1d4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d009      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001214 <HAL_DMA_Abort_IT+0x1d8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d004      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x17c>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a19      	ldr	r2, [pc, #100]	@ (8001218 <HAL_DMA_Abort_IT+0x1dc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d108      	bne.n	80011ca <HAL_DMA_Abort_IT+0x18e>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e178      	b.n	80014bc <HAL_DMA_Abort_IT+0x480>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e16f      	b.n	80014bc <HAL_DMA_Abort_IT+0x480>
 80011dc:	40020010 	.word	0x40020010
 80011e0:	40020028 	.word	0x40020028
 80011e4:	40020040 	.word	0x40020040
 80011e8:	40020058 	.word	0x40020058
 80011ec:	40020070 	.word	0x40020070
 80011f0:	40020088 	.word	0x40020088
 80011f4:	400200a0 	.word	0x400200a0
 80011f8:	400200b8 	.word	0x400200b8
 80011fc:	40020410 	.word	0x40020410
 8001200:	40020428 	.word	0x40020428
 8001204:	40020440 	.word	0x40020440
 8001208:	40020458 	.word	0x40020458
 800120c:	40020470 	.word	0x40020470
 8001210:	40020488 	.word	0x40020488
 8001214:	400204a0 	.word	0x400204a0
 8001218:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 020e 	bic.w	r2, r2, #14
 800122a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a6c      	ldr	r2, [pc, #432]	@ (80013e4 <HAL_DMA_Abort_IT+0x3a8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d04a      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6b      	ldr	r2, [pc, #428]	@ (80013e8 <HAL_DMA_Abort_IT+0x3ac>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d045      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a69      	ldr	r2, [pc, #420]	@ (80013ec <HAL_DMA_Abort_IT+0x3b0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d040      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a68      	ldr	r2, [pc, #416]	@ (80013f0 <HAL_DMA_Abort_IT+0x3b4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d03b      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a66      	ldr	r2, [pc, #408]	@ (80013f4 <HAL_DMA_Abort_IT+0x3b8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d036      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a65      	ldr	r2, [pc, #404]	@ (80013f8 <HAL_DMA_Abort_IT+0x3bc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d031      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a63      	ldr	r2, [pc, #396]	@ (80013fc <HAL_DMA_Abort_IT+0x3c0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d02c      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a62      	ldr	r2, [pc, #392]	@ (8001400 <HAL_DMA_Abort_IT+0x3c4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d027      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a60      	ldr	r2, [pc, #384]	@ (8001404 <HAL_DMA_Abort_IT+0x3c8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d022      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a5f      	ldr	r2, [pc, #380]	@ (8001408 <HAL_DMA_Abort_IT+0x3cc>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d01d      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a5d      	ldr	r2, [pc, #372]	@ (800140c <HAL_DMA_Abort_IT+0x3d0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d018      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a5c      	ldr	r2, [pc, #368]	@ (8001410 <HAL_DMA_Abort_IT+0x3d4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d013      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001414 <HAL_DMA_Abort_IT+0x3d8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00e      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a59      	ldr	r2, [pc, #356]	@ (8001418 <HAL_DMA_Abort_IT+0x3dc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d009      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a57      	ldr	r2, [pc, #348]	@ (800141c <HAL_DMA_Abort_IT+0x3e0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d004      	beq.n	80012cc <HAL_DMA_Abort_IT+0x290>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a56      	ldr	r2, [pc, #344]	@ (8001420 <HAL_DMA_Abort_IT+0x3e4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d108      	bne.n	80012de <HAL_DMA_Abort_IT+0x2a2>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e007      	b.n	80012ee <HAL_DMA_Abort_IT+0x2b2>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a3c      	ldr	r2, [pc, #240]	@ (80013e4 <HAL_DMA_Abort_IT+0x3a8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d072      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a3a      	ldr	r2, [pc, #232]	@ (80013e8 <HAL_DMA_Abort_IT+0x3ac>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d06d      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a39      	ldr	r2, [pc, #228]	@ (80013ec <HAL_DMA_Abort_IT+0x3b0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d068      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a37      	ldr	r2, [pc, #220]	@ (80013f0 <HAL_DMA_Abort_IT+0x3b4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d063      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a36      	ldr	r2, [pc, #216]	@ (80013f4 <HAL_DMA_Abort_IT+0x3b8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d05e      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a34      	ldr	r2, [pc, #208]	@ (80013f8 <HAL_DMA_Abort_IT+0x3bc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d059      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a33      	ldr	r2, [pc, #204]	@ (80013fc <HAL_DMA_Abort_IT+0x3c0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d054      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a31      	ldr	r2, [pc, #196]	@ (8001400 <HAL_DMA_Abort_IT+0x3c4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d04f      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a30      	ldr	r2, [pc, #192]	@ (8001404 <HAL_DMA_Abort_IT+0x3c8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d04a      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2e      	ldr	r2, [pc, #184]	@ (8001408 <HAL_DMA_Abort_IT+0x3cc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d045      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a2d      	ldr	r2, [pc, #180]	@ (800140c <HAL_DMA_Abort_IT+0x3d0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d040      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2b      	ldr	r2, [pc, #172]	@ (8001410 <HAL_DMA_Abort_IT+0x3d4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d03b      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2a      	ldr	r2, [pc, #168]	@ (8001414 <HAL_DMA_Abort_IT+0x3d8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d036      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <HAL_DMA_Abort_IT+0x3dc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d031      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a27      	ldr	r2, [pc, #156]	@ (800141c <HAL_DMA_Abort_IT+0x3e0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d02c      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a25      	ldr	r2, [pc, #148]	@ (8001420 <HAL_DMA_Abort_IT+0x3e4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d027      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a24      	ldr	r2, [pc, #144]	@ (8001424 <HAL_DMA_Abort_IT+0x3e8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d022      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a22      	ldr	r2, [pc, #136]	@ (8001428 <HAL_DMA_Abort_IT+0x3ec>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d01d      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a21      	ldr	r2, [pc, #132]	@ (800142c <HAL_DMA_Abort_IT+0x3f0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d018      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001430 <HAL_DMA_Abort_IT+0x3f4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001434 <HAL_DMA_Abort_IT+0x3f8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00e      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001438 <HAL_DMA_Abort_IT+0x3fc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d009      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <HAL_DMA_Abort_IT+0x400>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d004      	beq.n	80013de <HAL_DMA_Abort_IT+0x3a2>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_DMA_Abort_IT+0x404>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d132      	bne.n	8001444 <HAL_DMA_Abort_IT+0x408>
 80013de:	2301      	movs	r3, #1
 80013e0:	e031      	b.n	8001446 <HAL_DMA_Abort_IT+0x40a>
 80013e2:	bf00      	nop
 80013e4:	40020010 	.word	0x40020010
 80013e8:	40020028 	.word	0x40020028
 80013ec:	40020040 	.word	0x40020040
 80013f0:	40020058 	.word	0x40020058
 80013f4:	40020070 	.word	0x40020070
 80013f8:	40020088 	.word	0x40020088
 80013fc:	400200a0 	.word	0x400200a0
 8001400:	400200b8 	.word	0x400200b8
 8001404:	40020410 	.word	0x40020410
 8001408:	40020428 	.word	0x40020428
 800140c:	40020440 	.word	0x40020440
 8001410:	40020458 	.word	0x40020458
 8001414:	40020470 	.word	0x40020470
 8001418:	40020488 	.word	0x40020488
 800141c:	400204a0 	.word	0x400204a0
 8001420:	400204b8 	.word	0x400204b8
 8001424:	58025408 	.word	0x58025408
 8001428:	5802541c 	.word	0x5802541c
 800142c:	58025430 	.word	0x58025430
 8001430:	58025444 	.word	0x58025444
 8001434:	58025458 	.word	0x58025458
 8001438:	5802546c 	.word	0x5802546c
 800143c:	58025480 	.word	0x58025480
 8001440:	58025494 	.word	0x58025494
 8001444:	2300      	movs	r3, #0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d028      	beq.n	800149c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001454:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001458:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	2201      	movs	r2, #1
 800146a:	409a      	lsls	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001478:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00c      	beq.n	800149c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800148c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001490:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800149a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	@ 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014d6:	4b89      	ldr	r3, [pc, #548]	@ (80016fc <HAL_GPIO_Init+0x234>)
 80014d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014da:	e194      	b.n	8001806 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8186 	beq.w	8001800 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d005      	beq.n	800150c <HAL_GPIO_Init+0x44>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d130      	bne.n	800156e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001542:	2201      	movs	r2, #1
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f003 0201 	and.w	r2, r3, #1
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b03      	cmp	r3, #3
 8001578:	d017      	beq.n	80015aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d123      	bne.n	80015fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	69b9      	ldr	r1, [r7, #24]
 80015fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0203 	and.w	r2, r3, #3
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80e0 	beq.w	8001800 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001640:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <HAL_GPIO_Init+0x238>)
 8001642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001646:	4a2e      	ldr	r2, [pc, #184]	@ (8001700 <HAL_GPIO_Init+0x238>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001650:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <HAL_GPIO_Init+0x238>)
 8001652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165e:	4a29      	ldr	r2, [pc, #164]	@ (8001704 <HAL_GPIO_Init+0x23c>)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a20      	ldr	r2, [pc, #128]	@ (8001708 <HAL_GPIO_Init+0x240>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d052      	beq.n	8001730 <HAL_GPIO_Init+0x268>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1f      	ldr	r2, [pc, #124]	@ (800170c <HAL_GPIO_Init+0x244>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d031      	beq.n	80016f6 <HAL_GPIO_Init+0x22e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a1e      	ldr	r2, [pc, #120]	@ (8001710 <HAL_GPIO_Init+0x248>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d02b      	beq.n	80016f2 <HAL_GPIO_Init+0x22a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a1d      	ldr	r2, [pc, #116]	@ (8001714 <HAL_GPIO_Init+0x24c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x226>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <HAL_GPIO_Init+0x250>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x222>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <HAL_GPIO_Init+0x254>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x21e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <HAL_GPIO_Init+0x258>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x21a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_GPIO_Init+0x25c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x216>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <HAL_GPIO_Init+0x260>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x212>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a17      	ldr	r2, [pc, #92]	@ (800172c <HAL_GPIO_Init+0x264>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x20e>
 80016d2:	2309      	movs	r3, #9
 80016d4:	e02d      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016d6:	230a      	movs	r3, #10
 80016d8:	e02b      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016da:	2308      	movs	r3, #8
 80016dc:	e029      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016de:	2307      	movs	r3, #7
 80016e0:	e027      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e025      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e023      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e021      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e01f      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e01d      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e01b      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016fa:	bf00      	nop
 80016fc:	58000080 	.word	0x58000080
 8001700:	58024400 	.word	0x58024400
 8001704:	58000400 	.word	0x58000400
 8001708:	58020000 	.word	0x58020000
 800170c:	58020400 	.word	0x58020400
 8001710:	58020800 	.word	0x58020800
 8001714:	58020c00 	.word	0x58020c00
 8001718:	58021000 	.word	0x58021000
 800171c:	58021400 	.word	0x58021400
 8001720:	58021800 	.word	0x58021800
 8001724:	58021c00 	.word	0x58021c00
 8001728:	58022000 	.word	0x58022000
 800172c:	58022400 	.word	0x58022400
 8001730:	2300      	movs	r3, #0
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	f002 0203 	and.w	r2, r2, #3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4093      	lsls	r3, r2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001742:	4938      	ldr	r1, [pc, #224]	@ (8001824 <HAL_GPIO_Init+0x35c>)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001776:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	f47f ae63 	bne.w	80014dc <HAL_GPIO_Init+0x14>
  }
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	3724      	adds	r7, #36	@ 0x24
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	58000400 	.word	0x58000400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001864:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <HAL_HSEM_FastTake+0x2c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3320      	adds	r3, #32
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	4a07      	ldr	r2, [pc, #28]	@ (800188c <HAL_HSEM_FastTake+0x30>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e000      	b.n	800187a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	58026400 	.word	0x58026400
 800188c:	80000300 	.word	0x80000300

08001890 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800189a:	4906      	ldr	r1, [pc, #24]	@ (80018b4 <HAL_HSEM_Release+0x24>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	58026400 	.word	0x58026400

080018b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018c0:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d00a      	beq.n	80018e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e040      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e03e      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018e2:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80018ea:	491f      	ldr	r1, [pc, #124]	@ (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018f2:	f7ff fa57 	bl	8000da4 <HAL_GetTick>
 80018f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018f8:	e009      	b.n	800190e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018fa:	f7ff fa53 	bl	8000da4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001908:	d901      	bls.n	800190e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e028      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800191a:	d1ee      	bne.n	80018fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b1e      	cmp	r3, #30
 8001920:	d008      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b2e      	cmp	r3, #46	@ 0x2e
 8001926:	d005      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b1d      	cmp	r3, #29
 800192c:	d002      	beq.n	8001934 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b2d      	cmp	r3, #45	@ 0x2d
 8001932:	d114      	bne.n	800195e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001934:	f7ff fa36 	bl	8000da4 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800193a:	e009      	b.n	8001950 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800193c:	f7ff fa32 	bl	8000da4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800194a:	d901      	bls.n	8001950 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e007      	b.n	8001960 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_PWREx_ConfigSupply+0xb0>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195c:	d1ee      	bne.n	800193c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	58024800 	.word	0x58024800

0800196c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	f000 bc48 	b.w	8002210 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8088 	beq.w	8001a9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198e:	4b99      	ldr	r3, [pc, #612]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001998:	4b96      	ldr	r3, [pc, #600]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 800199a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800199e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d007      	beq.n	80019b4 <HAL_RCC_OscConfig+0x48>
 80019a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a6:	2b18      	cmp	r3, #24
 80019a8:	d111      	bne.n	80019ce <HAL_RCC_OscConfig+0x62>
 80019aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d10c      	bne.n	80019ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d06d      	beq.n	8001a9c <HAL_RCC_OscConfig+0x130>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d169      	bne.n	8001a9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f000 bc21 	b.w	8002210 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x7a>
 80019d8:	4b86      	ldr	r3, [pc, #536]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a85      	ldr	r2, [pc, #532]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e02e      	b.n	8001a44 <HAL_RCC_OscConfig+0xd8>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x9c>
 80019ee:	4b81      	ldr	r3, [pc, #516]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a80      	ldr	r2, [pc, #512]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b7e      	ldr	r3, [pc, #504]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7d      	ldr	r2, [pc, #500]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xd8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0xc0>
 8001a12:	4b78      	ldr	r3, [pc, #480]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b75      	ldr	r3, [pc, #468]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a74      	ldr	r2, [pc, #464]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xd8>
 8001a2c:	4b71      	ldr	r3, [pc, #452]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a70      	ldr	r2, [pc, #448]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6d      	ldr	r2, [pc, #436]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f9aa 	bl	8000da4 <HAL_GetTick>
 8001a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff f9a6 	bl	8000da4 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e3d4      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a66:	4b63      	ldr	r3, [pc, #396]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xe8>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff f996 	bl	8000da4 <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f992 	bl	8000da4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e3c0      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a8e:	4b59      	ldr	r3, [pc, #356]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x110>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80ca 	beq.w	8001c40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aac:	4b51      	ldr	r3, [pc, #324]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ab4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x166>
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	2b18      	cmp	r3, #24
 8001ac6:	d156      	bne.n	8001b76 <HAL_RCC_OscConfig+0x20a>
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d151      	bne.n	8001b76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad2:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x17e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e392      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001aea:	4b42      	ldr	r3, [pc, #264]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0219 	bic.w	r2, r3, #25
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	493f      	ldr	r1, [pc, #252]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f952 	bl	8000da4 <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff f94e 	bl	8000da4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e37c      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b16:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	f7ff f96f 	bl	8000e04 <HAL_GetREVID>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d817      	bhi.n	8001b60 <HAL_RCC_OscConfig+0x1f4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b40      	cmp	r3, #64	@ 0x40
 8001b36:	d108      	bne.n	8001b4a <HAL_RCC_OscConfig+0x1de>
 8001b38:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b40:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b48:	e07a      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	031b      	lsls	r3, r3, #12
 8001b58:	4926      	ldr	r1, [pc, #152]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5e:	e06f      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	4921      	ldr	r1, [pc, #132]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	e064      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d047      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0219 	bic.w	r2, r3, #25
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	491a      	ldr	r1, [pc, #104]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff f908 	bl	8000da4 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff f904 	bl	8000da4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e332      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	f7ff f925 	bl	8000e04 <HAL_GetREVID>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d819      	bhi.n	8001bf8 <HAL_RCC_OscConfig+0x28c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b40      	cmp	r3, #64	@ 0x40
 8001bca:	d108      	bne.n	8001bde <HAL_RCC_OscConfig+0x272>
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001bd4:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bda:	6053      	str	r3, [r2, #4]
 8001bdc:	e030      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
 8001bde:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	4901      	ldr	r1, [pc, #4]	@ (8001bf4 <HAL_RCC_OscConfig+0x288>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
 8001bf2:	e025      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	4b9a      	ldr	r3, [pc, #616]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	4997      	ldr	r1, [pc, #604]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
 8001c0c:	e018      	b.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b95      	ldr	r3, [pc, #596]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a94      	ldr	r2, [pc, #592]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f8c3 	bl	8000da4 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff f8bf 	bl	8000da4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e2ed      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c34:	4b8b      	ldr	r3, [pc, #556]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a9 	beq.w	8001da0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4e:	4b85      	ldr	r3, [pc, #532]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c58:	4b82      	ldr	r3, [pc, #520]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d007      	beq.n	8001c74 <HAL_RCC_OscConfig+0x308>
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b18      	cmp	r3, #24
 8001c68:	d13a      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x374>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d135      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c74:	4b7b      	ldr	r3, [pc, #492]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_OscConfig+0x320>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b80      	cmp	r3, #128	@ 0x80
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e2c1      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c8c:	f7ff f8ba 	bl	8000e04 <HAL_GetREVID>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d817      	bhi.n	8001cca <HAL_RCC_OscConfig+0x35e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x348>
 8001ca2:	4b70      	ldr	r3, [pc, #448]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001caa:	4a6e      	ldr	r2, [pc, #440]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cb0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cb2:	e075      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cb4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	069b      	lsls	r3, r3, #26
 8001cc2:	4968      	ldr	r1, [pc, #416]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cc8:	e06a      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cca:	4b66      	ldr	r3, [pc, #408]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	061b      	lsls	r3, r3, #24
 8001cd8:	4962      	ldr	r1, [pc, #392]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cde:	e05f      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d042      	beq.n	8001d6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ce8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5d      	ldr	r2, [pc, #372]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f856 	bl	8000da4 <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f852 	bl	8000da4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e280      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d0e:	4b55      	ldr	r3, [pc, #340]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d1a:	f7ff f873 	bl	8000e04 <HAL_GetREVID>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d817      	bhi.n	8001d58 <HAL_RCC_OscConfig+0x3ec>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d108      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3d6>
 8001d30:	4b4c      	ldr	r3, [pc, #304]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d38:	4a4a      	ldr	r2, [pc, #296]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d3e:	6053      	str	r3, [r2, #4]
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
 8001d42:	4b48      	ldr	r3, [pc, #288]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	069b      	lsls	r3, r3, #26
 8001d50:	4944      	ldr	r1, [pc, #272]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
 8001d56:	e023      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
 8001d58:	4b42      	ldr	r3, [pc, #264]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	493f      	ldr	r1, [pc, #252]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
 8001d6c:	e018      	b.n	8001da0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a3c      	ldr	r2, [pc, #240]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f813 	bl	8000da4 <HAL_GetTick>
 8001d7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d82:	f7ff f80f 	bl	8000da4 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e23d      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d94:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d036      	beq.n	8001e1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d019      	beq.n	8001de8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7fe fff0 	bl	8000da4 <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7fe ffec 	bl	8000da4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e21a      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dda:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x45c>
 8001de6:	e018      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dec:	4a1d      	ldr	r2, [pc, #116]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe ffd6 	bl	8000da4 <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7fe ffd2 	bl	8000da4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e200      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d039      	beq.n	8001e9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a0c      	ldr	r2, [pc, #48]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe ffb3 	bl	8000da4 <HAL_GetTick>
 8001e3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e42:	f7fe ffaf 	bl	8000da4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1dd      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <HAL_RCC_OscConfig+0x4f8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4d6>
 8001e60:	e01b      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
 8001e62:	bf00      	nop
 8001e64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e68:	4b9b      	ldr	r3, [pc, #620]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a9a      	ldr	r2, [pc, #616]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e74:	f7fe ff96 	bl	8000da4 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e7c:	f7fe ff92 	bl	8000da4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1c0      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e8e:	4b92      	ldr	r3, [pc, #584]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8081 	beq.w	8001faa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80020dc <HAL_RCC_OscConfig+0x770>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a8b      	ldr	r2, [pc, #556]	@ (80020dc <HAL_RCC_OscConfig+0x770>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb4:	f7fe ff76 	bl	8000da4 <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7fe ff72 	bl	8000da4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1a0      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ece:	4b83      	ldr	r3, [pc, #524]	@ (80020dc <HAL_RCC_OscConfig+0x770>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x584>
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eee:	e02d      	b.n	8001f4c <HAL_RCC_OscConfig+0x5e0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x5a6>
 8001ef8:	4b77      	ldr	r3, [pc, #476]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efc:	4a76      	ldr	r2, [pc, #472]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f04:	4b74      	ldr	r3, [pc, #464]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f08:	4a73      	ldr	r2, [pc, #460]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f10:	e01c      	b.n	8001f4c <HAL_RCC_OscConfig+0x5e0>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x5c8>
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f26:	4b6c      	ldr	r3, [pc, #432]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2a:	4a6b      	ldr	r2, [pc, #428]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0x5e0>
 8001f34:	4b68      	ldr	r3, [pc, #416]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	4a67      	ldr	r2, [pc, #412]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f40:	4b65      	ldr	r3, [pc, #404]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f44:	4a64      	ldr	r2, [pc, #400]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f46:	f023 0304 	bic.w	r3, r3, #4
 8001f4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7fe ff26 	bl	8000da4 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ff22 	bl	8000da4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e14e      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f72:	4b59      	ldr	r3, [pc, #356]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ee      	beq.n	8001f5c <HAL_RCC_OscConfig+0x5f0>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7fe ff10 	bl	8000da4 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe ff0c 	bl	8000da4 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e138      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ee      	bne.n	8001f88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 812d 	beq.w	800220e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fb4:	4b48      	ldr	r3, [pc, #288]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fbc:	2b18      	cmp	r3, #24
 8001fbe:	f000 80bd 	beq.w	800213c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f040 809e 	bne.w	8002108 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b42      	ldr	r3, [pc, #264]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a41      	ldr	r2, [pc, #260]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fee4 	bl	8000da4 <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7fe fee0 	bl	8000da4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e10e      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ff2:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffe:	4b36      	ldr	r3, [pc, #216]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002002:	4b37      	ldr	r3, [pc, #220]	@ (80020e0 <HAL_RCC_OscConfig+0x774>)
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	430a      	orrs	r2, r1
 8002012:	4931      	ldr	r1, [pc, #196]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002014:	4313      	orrs	r3, r2
 8002016:	628b      	str	r3, [r1, #40]	@ 0x28
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	3b01      	subs	r3, #1
 800201e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002026:	3b01      	subs	r3, #1
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	b29b      	uxth	r3, r3
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002032:	3b01      	subs	r3, #1
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002040:	3b01      	subs	r3, #1
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002048:	4923      	ldr	r1, [pc, #140]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800204a:	4313      	orrs	r3, r2
 800204c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800204e:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	4a21      	ldr	r2, [pc, #132]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800205a:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800205c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800205e:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <HAL_RCC_OscConfig+0x778>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002066:	00d2      	lsls	r2, r2, #3
 8002068:	491b      	ldr	r1, [pc, #108]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	f023 020c 	bic.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4917      	ldr	r1, [pc, #92]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800207c:	4313      	orrs	r3, r2
 800207e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002080:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	f023 0202 	bic.w	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208c:	4912      	ldr	r1, [pc, #72]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 800208e:	4313      	orrs	r3, r2
 8002090:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002096:	4a10      	ldr	r2, [pc, #64]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ba:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c2:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <HAL_RCC_OscConfig+0x76c>)
 80020c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7fe fe69 	bl	8000da4 <HAL_GetTick>
 80020d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d4:	e011      	b.n	80020fa <HAL_RCC_OscConfig+0x78e>
 80020d6:	bf00      	nop
 80020d8:	58024400 	.word	0x58024400
 80020dc:	58024800 	.word	0x58024800
 80020e0:	fffffc0c 	.word	0xfffffc0c
 80020e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fe5c 	bl	8000da4 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e08a      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020fa:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x77c>
 8002106:	e082      	b.n	800220e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b43      	ldr	r3, [pc, #268]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a42      	ldr	r2, [pc, #264]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 800210e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe fe46 	bl	8000da4 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe fe42 	bl	8000da4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e070      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800212e:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x7b0>
 800213a:	e068      	b.n	800220e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800213c:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 800213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002140:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002142:	4b35      	ldr	r3, [pc, #212]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	2b01      	cmp	r3, #1
 800214e:	d031      	beq.n	80021b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f003 0203 	and.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d12a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d122      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d11a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	0a5b      	lsrs	r3, r3, #9
 8002182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d111      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	0c1b      	lsrs	r3, r3, #16
 8002194:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	0e1b      	lsrs	r3, r3, #24
 80021a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e02b      	b.n	8002210 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021b8:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 80021ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d01f      	beq.n	800220e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021da:	f7fe fde3 	bl	8000da4 <HAL_GetTick>
 80021de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021e0:	bf00      	nop
 80021e2:	f7fe fddf 	bl	8000da4 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d0f9      	beq.n	80021e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 80021f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_RCC_OscConfig+0x8b0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021fa:	00d2      	lsls	r2, r2, #3
 80021fc:	4906      	ldr	r1, [pc, #24]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <HAL_RCC_OscConfig+0x8ac>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3730      	adds	r7, #48	@ 0x30
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	58024400 	.word	0x58024400
 800221c:	ffff0007 	.word	0xffff0007

08002220 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e19c      	b.n	800256e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b8a      	ldr	r3, [pc, #552]	@ (8002460 <HAL_RCC_ClockConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d910      	bls.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b87      	ldr	r3, [pc, #540]	@ (8002460 <HAL_RCC_ClockConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 020f 	bic.w	r2, r3, #15
 800224a:	4985      	ldr	r1, [pc, #532]	@ (8002460 <HAL_RCC_ClockConfig+0x240>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b83      	ldr	r3, [pc, #524]	@ (8002460 <HAL_RCC_ClockConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e184      	b.n	800256e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d010      	beq.n	8002292 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	4b7b      	ldr	r3, [pc, #492]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800227c:	429a      	cmp	r2, r3
 800227e:	d908      	bls.n	8002292 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002280:	4b78      	ldr	r3, [pc, #480]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	4975      	ldr	r1, [pc, #468]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 800228e:	4313      	orrs	r3, r2
 8002290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	4b70      	ldr	r3, [pc, #448]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d908      	bls.n	80022c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	496a      	ldr	r1, [pc, #424]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d010      	beq.n	80022ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	4b64      	ldr	r3, [pc, #400]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022d8:	429a      	cmp	r2, r3
 80022da:	d908      	bls.n	80022ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022dc:	4b61      	ldr	r3, [pc, #388]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	495e      	ldr	r1, [pc, #376]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d010      	beq.n	800231c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	4b59      	ldr	r3, [pc, #356]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002306:	429a      	cmp	r2, r3
 8002308:	d908      	bls.n	800231c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800230a:	4b56      	ldr	r3, [pc, #344]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4953      	ldr	r1, [pc, #332]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002318:	4313      	orrs	r3, r2
 800231a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d010      	beq.n	800234a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b4d      	ldr	r3, [pc, #308]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	429a      	cmp	r2, r3
 8002336:	d908      	bls.n	800234a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002338:	4b4a      	ldr	r3, [pc, #296]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f023 020f 	bic.w	r2, r3, #15
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4947      	ldr	r1, [pc, #284]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002346:	4313      	orrs	r3, r2
 8002348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d055      	beq.n	8002402 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002356:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4940      	ldr	r1, [pc, #256]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002364:	4313      	orrs	r3, r2
 8002366:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d107      	bne.n	8002380 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002370:	4b3c      	ldr	r3, [pc, #240]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d121      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0f6      	b.n	800256e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d107      	bne.n	8002398 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002388:	4b36      	ldr	r3, [pc, #216]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d115      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0ea      	b.n	800256e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023a0:	4b30      	ldr	r3, [pc, #192]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0de      	b.n	800256e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0d6      	b.n	800256e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023c0:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f023 0207 	bic.w	r2, r3, #7
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4925      	ldr	r1, [pc, #148]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d2:	f7fe fce7 	bl	8000da4 <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023da:	f7fe fce3 	bl	8000da4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0be      	b.n	800256e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	429a      	cmp	r2, r3
 8002400:	d1eb      	bne.n	80023da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	429a      	cmp	r2, r3
 800241c:	d208      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f023 020f 	bic.w	r2, r3, #15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	490e      	ldr	r1, [pc, #56]	@ (8002464 <HAL_RCC_ClockConfig+0x244>)
 800242c:	4313      	orrs	r3, r2
 800242e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_RCC_ClockConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d214      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <HAL_RCC_ClockConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 020f 	bic.w	r2, r3, #15
 8002446:	4906      	ldr	r1, [pc, #24]	@ (8002460 <HAL_RCC_ClockConfig+0x240>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <HAL_RCC_ClockConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e086      	b.n	800256e <HAL_RCC_ClockConfig+0x34e>
 8002460:	52002000 	.word	0x52002000
 8002464:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	4b3f      	ldr	r3, [pc, #252]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002480:	429a      	cmp	r2, r3
 8002482:	d208      	bcs.n	8002496 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002484:	4b3c      	ldr	r3, [pc, #240]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	4939      	ldr	r1, [pc, #228]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 8002492:	4313      	orrs	r3, r2
 8002494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	4b34      	ldr	r3, [pc, #208]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d208      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024b2:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	492e      	ldr	r1, [pc, #184]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024dc:	429a      	cmp	r2, r3
 80024de:	d208      	bcs.n	80024f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4922      	ldr	r1, [pc, #136]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800250a:	429a      	cmp	r2, r3
 800250c:	d208      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800250e:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4917      	ldr	r1, [pc, #92]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 800251c:	4313      	orrs	r3, r2
 800251e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002520:	f000 f834 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	4912      	ldr	r1, [pc, #72]	@ (800257c <HAL_RCC_ClockConfig+0x35c>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <HAL_RCC_ClockConfig+0x358>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4a0d      	ldr	r2, [pc, #52]	@ (800257c <HAL_RCC_ClockConfig+0x35c>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <HAL_RCC_ClockConfig+0x360>)
 8002556:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002558:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <HAL_RCC_ClockConfig+0x364>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_RCC_ClockConfig+0x368>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fbd4 	bl	8000d10 <HAL_InitTick>
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	58024400 	.word	0x58024400
 800257c:	08004e28 	.word	0x08004e28
 8002580:	24000004 	.word	0x24000004
 8002584:	24000000 	.word	0x24000000
 8002588:	24000008 	.word	0x24000008

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	@ 0x24
 8002590:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002592:	4bb3      	ldr	r3, [pc, #716]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800259a:	2b18      	cmp	r3, #24
 800259c:	f200 8155 	bhi.w	800284a <HAL_RCC_GetSysClockFreq+0x2be>
 80025a0:	a201      	add	r2, pc, #4	@ (adr r2, 80025a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a6:	bf00      	nop
 80025a8:	0800260d 	.word	0x0800260d
 80025ac:	0800284b 	.word	0x0800284b
 80025b0:	0800284b 	.word	0x0800284b
 80025b4:	0800284b 	.word	0x0800284b
 80025b8:	0800284b 	.word	0x0800284b
 80025bc:	0800284b 	.word	0x0800284b
 80025c0:	0800284b 	.word	0x0800284b
 80025c4:	0800284b 	.word	0x0800284b
 80025c8:	08002633 	.word	0x08002633
 80025cc:	0800284b 	.word	0x0800284b
 80025d0:	0800284b 	.word	0x0800284b
 80025d4:	0800284b 	.word	0x0800284b
 80025d8:	0800284b 	.word	0x0800284b
 80025dc:	0800284b 	.word	0x0800284b
 80025e0:	0800284b 	.word	0x0800284b
 80025e4:	0800284b 	.word	0x0800284b
 80025e8:	08002639 	.word	0x08002639
 80025ec:	0800284b 	.word	0x0800284b
 80025f0:	0800284b 	.word	0x0800284b
 80025f4:	0800284b 	.word	0x0800284b
 80025f8:	0800284b 	.word	0x0800284b
 80025fc:	0800284b 	.word	0x0800284b
 8002600:	0800284b 	.word	0x0800284b
 8002604:	0800284b 	.word	0x0800284b
 8002608:	0800263f 	.word	0x0800263f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800260c:	4b94      	ldr	r3, [pc, #592]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002618:	4b91      	ldr	r3, [pc, #580]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	4a90      	ldr	r2, [pc, #576]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
 8002628:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800262a:	e111      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800262c:	4b8d      	ldr	r3, [pc, #564]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800262e:	61bb      	str	r3, [r7, #24]
      break;
 8002630:	e10e      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002632:	4b8d      	ldr	r3, [pc, #564]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002634:	61bb      	str	r3, [r7, #24]
      break;
 8002636:	e10b      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002638:	4b8c      	ldr	r3, [pc, #560]	@ (800286c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800263a:	61bb      	str	r3, [r7, #24]
      break;
 800263c:	e108      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800263e:	4b88      	ldr	r3, [pc, #544]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002648:	4b85      	ldr	r3, [pc, #532]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002652:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002654:	4b82      	ldr	r3, [pc, #520]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800265e:	4b80      	ldr	r3, [pc, #512]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002662:	08db      	lsrs	r3, r3, #3
 8002664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002676:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80e1 	beq.w	8002844 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b02      	cmp	r3, #2
 8002686:	f000 8083 	beq.w	8002790 <HAL_RCC_GetSysClockFreq+0x204>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b02      	cmp	r3, #2
 800268e:	f200 80a1 	bhi.w	80027d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x114>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d056      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x1c0>
 800269e:	e099      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d02d      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
 80026bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d6:	4b62      	ldr	r3, [pc, #392]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002706:	e087      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002712:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002874 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271a:	4b51      	ldr	r3, [pc, #324]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272a:	ed97 6a02 	vldr	s12, [r7, #8]
 800272e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800273a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800273e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800274a:	e065      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002878 <HAL_RCC_GetSysClockFreq+0x2ec>
 800275a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275e:	4b40      	ldr	r3, [pc, #256]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002772:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800278e:	e043      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800287c <HAL_RCC_GetSysClockFreq+0x2f0>
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027d2:	e021      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002878 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800280a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002816:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	0a5b      	lsrs	r3, r3, #9
 800281e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002822:	3301      	adds	r3, #1
 8002824:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002830:	edd7 6a07 	vldr	s13, [r7, #28]
 8002834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283c:	ee17 3a90 	vmov	r3, s15
 8002840:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002842:	e005      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
      break;
 8002848:	e002      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800284a:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800284c:	61bb      	str	r3, [r7, #24]
      break;
 800284e:	bf00      	nop
  }

  return sysclockfreq;
 8002850:	69bb      	ldr	r3, [r7, #24]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	@ 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	58024400 	.word	0x58024400
 8002864:	03d09000 	.word	0x03d09000
 8002868:	003d0900 	.word	0x003d0900
 800286c:	017d7840 	.word	0x017d7840
 8002870:	46000000 	.word	0x46000000
 8002874:	4c742400 	.word	0x4c742400
 8002878:	4a742400 	.word	0x4a742400
 800287c:	4bbebc20 	.word	0x4bbebc20

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002884:	b0ca      	sub	sp, #296	@ 0x128
 8002886:	af00      	add	r7, sp, #0
 8002888:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80028a4:	2500      	movs	r5, #0
 80028a6:	ea54 0305 	orrs.w	r3, r4, r5
 80028aa:	d049      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80028ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80028b6:	d02f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80028b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80028bc:	d828      	bhi.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80028be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028c2:	d01a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80028c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028c8:	d822      	bhi.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028d2:	d007      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028d4:	e01c      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d6:	4bb8      	ldr	r3, [pc, #736]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	4ab7      	ldr	r2, [pc, #732]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028e2:	e01a      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e8:	3308      	adds	r3, #8
 80028ea:	2102      	movs	r1, #2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 f9d1 	bl	8003c94 <RCCEx_PLL2_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028f8:	e00f      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80028fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fe:	3328      	adds	r3, #40	@ 0x28
 8002900:	2102      	movs	r1, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fa78 	bl	8003df8 <RCCEx_PLL3_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800290e:	e004      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002916:	e000      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800291a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002922:	4ba5      	ldr	r3, [pc, #660]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002926:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800292a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002930:	4aa1      	ldr	r2, [pc, #644]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002932:	430b      	orrs	r3, r1
 8002934:	6513      	str	r3, [r2, #80]	@ 0x50
 8002936:	e003      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800293c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800294c:	f04f 0900 	mov.w	r9, #0
 8002950:	ea58 0309 	orrs.w	r3, r8, r9
 8002954:	d047      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	2b04      	cmp	r3, #4
 800295e:	d82a      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002960:	a201      	add	r2, pc, #4	@ (adr r2, 8002968 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	0800297d 	.word	0x0800297d
 800296c:	0800298b 	.word	0x0800298b
 8002970:	080029a1 	.word	0x080029a1
 8002974:	080029bf 	.word	0x080029bf
 8002978:	080029bf 	.word	0x080029bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800297c:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	4a8d      	ldr	r2, [pc, #564]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002988:	e01a      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800298e:	3308      	adds	r3, #8
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f001 f97e 	bl	8003c94 <RCCEx_PLL2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800299e:	e00f      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a4:	3328      	adds	r3, #40	@ 0x28
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 fa25 	bl	8003df8 <RCCEx_PLL3_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029b4:	e004      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029bc:	e000      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80029be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c8:	4b7b      	ldr	r3, [pc, #492]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029cc:	f023 0107 	bic.w	r1, r3, #7
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	4a78      	ldr	r2, [pc, #480]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029d8:	430b      	orrs	r3, r1
 80029da:	6513      	str	r3, [r2, #80]	@ 0x50
 80029dc:	e003      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80029f2:	f04f 0b00 	mov.w	fp, #0
 80029f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80029fa:	d04c      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80029fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a06:	d030      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002a08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0c:	d829      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a10:	d02d      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a12:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a14:	d825      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a16:	2b80      	cmp	r3, #128	@ 0x80
 8002a18:	d018      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a1a:	2b80      	cmp	r3, #128	@ 0x80
 8002a1c:	d821      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002a22:	2b40      	cmp	r3, #64	@ 0x40
 8002a24:	d007      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002a26:	e01c      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a28:	4b63      	ldr	r3, [pc, #396]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	4a62      	ldr	r2, [pc, #392]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a34:	e01c      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 f928 	bl	8003c94 <RCCEx_PLL2_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a4a:	e011      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a50:	3328      	adds	r3, #40	@ 0x28
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 f9cf 	bl	8003df8 <RCCEx_PLL3_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a60:	e006      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a68:	e002      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a78:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a86:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a8c:	e003      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002aa2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002aac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	d053      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002abe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ac2:	d035      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ac4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ac8:	d82e      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ace:	d031      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ad0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ad4:	d828      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ad6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ada:	d01a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ae0:	d822      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002ae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aea:	d007      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002aec:	e01c      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aee:	4b32      	ldr	r3, [pc, #200]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	4a31      	ldr	r2, [pc, #196]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002afa:	e01c      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b00:	3308      	adds	r3, #8
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 f8c5 	bl	8003c94 <RCCEx_PLL2_Config>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b10:	e011      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b16:	3328      	adds	r3, #40	@ 0x28
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 f96c 	bl	8003df8 <RCCEx_PLL3_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b26:	e006      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b30:	bf00      	nop
 8002b32:	e000      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b54:	e003      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b74:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	d056      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b8a:	d038      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b90:	d831      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b96:	d034      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b9c:	d82b      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ba2:	d01d      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ba8:	d825      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002bb4:	e01f      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bb6:	bf00      	nop
 8002bb8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bbc:	4ba2      	ldr	r3, [pc, #648]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	4aa1      	ldr	r2, [pc, #644]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bce:	3308      	adds	r3, #8
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 f85e 	bl	8003c94 <RCCEx_PLL2_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002bde:	e011      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be4:	3328      	adds	r3, #40	@ 0x28
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 f905 	bl	8003df8 <RCCEx_PLL3_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bf4:	e006      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bfc:	e002      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c1c:	4a8a      	ldr	r2, [pc, #552]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c22:	e003      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002c38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002c42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002c46:	460b      	mov	r3, r1
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	d03a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	2b30      	cmp	r3, #48	@ 0x30
 8002c54:	d01f      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c56:	2b30      	cmp	r3, #48	@ 0x30
 8002c58:	d819      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d00c      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d815      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d019      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d111      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6a:	4b77      	ldr	r3, [pc, #476]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	4a76      	ldr	r2, [pc, #472]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c76:	e011      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	2102      	movs	r1, #2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 f807 	bl	8003c94 <RCCEx_PLL2_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c8c:	e006      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c94:	e002      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ca4:	4b68      	ldr	r3, [pc, #416]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb2:	4a65      	ldr	r2, [pc, #404]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cb8:	e003      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002cce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002cd8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	d051      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cec:	d035      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002cee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cf2:	d82e      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cf8:	d031      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002cfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cfe:	d828      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d04:	d01a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d0a:	d822      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d14:	d007      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002d16:	e01c      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d18:	4b4b      	ldr	r3, [pc, #300]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d24:	e01c      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 ffb0 	bl	8003c94 <RCCEx_PLL2_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d3a:	e011      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d40:	3328      	adds	r3, #40	@ 0x28
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 f857 	bl	8003df8 <RCCEx_PLL3_Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d50:	e006      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d58:	e002      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d68:	4b37      	ldr	r3, [pc, #220]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d6c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	4a34      	ldr	r2, [pc, #208]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d7c:	e003      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002d9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002da0:	460b      	mov	r3, r1
 8002da2:	4313      	orrs	r3, r2
 8002da4:	d056      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db0:	d033      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002db2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db6:	d82c      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002db8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dbc:	d02f      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002dbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dc2:	d826      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002dc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dc8:	d02b      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002dca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dce:	d820      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dd4:	d012      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002dd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dda:	d81a      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d022      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de4:	d115      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dea:	3308      	adds	r3, #8
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 ff50 	bl	8003c94 <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dfa:	e015      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e00:	3328      	adds	r3, #40	@ 0x28
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fff7 	bl	8003df8 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e10:	e00a      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e18:	e006      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e1a:	bf00      	nop
 8002e1c:	e004      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e3e:	4a02      	ldr	r2, [pc, #8]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e44:	e006      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e46:	bf00      	nop
 8002e48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4313      	orrs	r3, r2
 8002e72:	d055      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e80:	d033      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e86:	d82c      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8c:	d02f      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e92:	d826      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e98:	d02b      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e9e:	d820      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ea4:	d012      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eaa:	d81a      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d022      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002eb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eb4:	d115      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eba:	3308      	adds	r3, #8
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fee8 	bl	8003c94 <RCCEx_PLL2_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002eca:	e015      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed0:	3328      	adds	r3, #40	@ 0x28
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 ff8f 	bl	8003df8 <RCCEx_PLL3_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ee8:	e006      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eea:	bf00      	nop
 8002eec:	e004      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f00:	4ba3      	ldr	r3, [pc, #652]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f10:	4a9f      	ldr	r2, [pc, #636]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f12:	430b      	orrs	r3, r1
 8002f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f16:	e003      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	d037      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f4a:	d00e      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f50:	d816      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d018      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f5a:	d111      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	4a8b      	ldr	r2, [pc, #556]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f68:	e00f      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6e:	3308      	adds	r3, #8
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fe8e 	bl	8003c94 <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f7e:	e004      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f86:	e000      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f92:	4b7f      	ldr	r3, [pc, #508]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f96:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	4a7b      	ldr	r2, [pc, #492]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002fc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	d039      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d81c      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002fda:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	0800301d 	.word	0x0800301d
 8002fe4:	08002ff1 	.word	0x08002ff1
 8002fe8:	08002fff 	.word	0x08002fff
 8002fec:	0800301d 	.word	0x0800301d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff0:	4b67      	ldr	r3, [pc, #412]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	4a66      	ldr	r2, [pc, #408]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ffc:	e00f      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003002:	3308      	adds	r3, #8
 8003004:	2102      	movs	r1, #2
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fe44 	bl	8003c94 <RCCEx_PLL2_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003012:	e004      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800301a:	e000      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800301c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003026:	4b5a      	ldr	r3, [pc, #360]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	f023 0103 	bic.w	r1, r3, #3
 800302e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003034:	4a56      	ldr	r2, [pc, #344]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003036:	430b      	orrs	r3, r1
 8003038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800303a:	e003      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003050:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800305a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800305e:	460b      	mov	r3, r1
 8003060:	4313      	orrs	r3, r2
 8003062:	f000 809f 	beq.w	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003066:	4b4b      	ldr	r3, [pc, #300]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a4a      	ldr	r2, [pc, #296]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800306c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003070:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003072:	f7fd fe97 	bl	8000da4 <HAL_GetTick>
 8003076:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307a:	e00b      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307c:	f7fd fe92 	bl	8000da4 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	@ 0x64
 800308a:	d903      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003092:	e005      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003094:	4b3f      	ldr	r3, [pc, #252]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ed      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80030a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d179      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030a8:	4b39      	ldr	r3, [pc, #228]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030b4:	4053      	eors	r3, r2
 80030b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d015      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030be:	4b34      	ldr	r3, [pc, #208]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ca:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	4a30      	ldr	r2, [pc, #192]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	4a2d      	ldr	r2, [pc, #180]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80030e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f6:	d118      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fd fe54 	bl	8000da4 <HAL_GetTick>
 80030fc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003100:	e00d      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fd fe4f 	bl	8000da4 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800310c:	1ad2      	subs	r2, r2, r3
 800310e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003112:	429a      	cmp	r2, r3
 8003114:	d903      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800311c:	e005      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800311e:	4b1c      	ldr	r3, [pc, #112]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0eb      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800312a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312e:	2b00      	cmp	r3, #0
 8003130:	d129      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003136:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800313a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003142:	d10e      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003144:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003154:	091a      	lsrs	r2, r3, #4
 8003156:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003158:	4013      	ands	r3, r2
 800315a:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800315c:	430b      	orrs	r3, r1
 800315e:	6113      	str	r3, [r2, #16]
 8003160:	e005      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003162:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003168:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800316c:	6113      	str	r3, [r2, #16]
 800316e:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003170:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003176:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800317a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317e:	4a04      	ldr	r2, [pc, #16]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003180:	430b      	orrs	r3, r1
 8003182:	6713      	str	r3, [r2, #112]	@ 0x70
 8003184:	e00e      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800318a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800318e:	e009      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003190:	58024400 	.word	0x58024400
 8003194:	58024800 	.word	0x58024800
 8003198:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f002 0301 	and.w	r3, r2, #1
 80031b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031be:	460b      	mov	r3, r1
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f000 8089 	beq.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80031c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031cc:	2b28      	cmp	r3, #40	@ 0x28
 80031ce:	d86b      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80031d0:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080032b1 	.word	0x080032b1
 80031dc:	080032a9 	.word	0x080032a9
 80031e0:	080032a9 	.word	0x080032a9
 80031e4:	080032a9 	.word	0x080032a9
 80031e8:	080032a9 	.word	0x080032a9
 80031ec:	080032a9 	.word	0x080032a9
 80031f0:	080032a9 	.word	0x080032a9
 80031f4:	080032a9 	.word	0x080032a9
 80031f8:	0800327d 	.word	0x0800327d
 80031fc:	080032a9 	.word	0x080032a9
 8003200:	080032a9 	.word	0x080032a9
 8003204:	080032a9 	.word	0x080032a9
 8003208:	080032a9 	.word	0x080032a9
 800320c:	080032a9 	.word	0x080032a9
 8003210:	080032a9 	.word	0x080032a9
 8003214:	080032a9 	.word	0x080032a9
 8003218:	08003293 	.word	0x08003293
 800321c:	080032a9 	.word	0x080032a9
 8003220:	080032a9 	.word	0x080032a9
 8003224:	080032a9 	.word	0x080032a9
 8003228:	080032a9 	.word	0x080032a9
 800322c:	080032a9 	.word	0x080032a9
 8003230:	080032a9 	.word	0x080032a9
 8003234:	080032a9 	.word	0x080032a9
 8003238:	080032b1 	.word	0x080032b1
 800323c:	080032a9 	.word	0x080032a9
 8003240:	080032a9 	.word	0x080032a9
 8003244:	080032a9 	.word	0x080032a9
 8003248:	080032a9 	.word	0x080032a9
 800324c:	080032a9 	.word	0x080032a9
 8003250:	080032a9 	.word	0x080032a9
 8003254:	080032a9 	.word	0x080032a9
 8003258:	080032b1 	.word	0x080032b1
 800325c:	080032a9 	.word	0x080032a9
 8003260:	080032a9 	.word	0x080032a9
 8003264:	080032a9 	.word	0x080032a9
 8003268:	080032a9 	.word	0x080032a9
 800326c:	080032a9 	.word	0x080032a9
 8003270:	080032a9 	.word	0x080032a9
 8003274:	080032a9 	.word	0x080032a9
 8003278:	080032b1 	.word	0x080032b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800327c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003280:	3308      	adds	r3, #8
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fd05 	bl	8003c94 <RCCEx_PLL2_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003290:	e00f      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003296:	3328      	adds	r3, #40	@ 0x28
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fdac 	bl	8003df8 <RCCEx_PLL3_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032a6:	e004      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80032b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032ba:	4bbf      	ldr	r3, [pc, #764]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032c8:	4abb      	ldr	r2, [pc, #748]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032ca:	430b      	orrs	r3, r1
 80032cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80032ce:	e003      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f002 0302 	and.w	r3, r2, #2
 80032e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80032ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80032f2:	460b      	mov	r3, r1
 80032f4:	4313      	orrs	r3, r2
 80032f6:	d041      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d824      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003302:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003355 	.word	0x08003355
 800330c:	08003321 	.word	0x08003321
 8003310:	08003337 	.word	0x08003337
 8003314:	08003355 	.word	0x08003355
 8003318:	08003355 	.word	0x08003355
 800331c:	08003355 	.word	0x08003355
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003324:	3308      	adds	r3, #8
 8003326:	2101      	movs	r1, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fcb3 	bl	8003c94 <RCCEx_PLL2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003334:	e00f      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	3328      	adds	r3, #40	@ 0x28
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fd5a 	bl	8003df8 <RCCEx_PLL3_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800334a:	e004      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800335e:	4b96      	ldr	r3, [pc, #600]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003362:	f023 0107 	bic.w	r1, r3, #7
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800336c:	4a92      	ldr	r2, [pc, #584]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6553      	str	r3, [r2, #84]	@ 0x54
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f002 0304 	and.w	r3, r2, #4
 8003388:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003392:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d044      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d825      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80033a8:	a201      	add	r2, pc, #4	@ (adr r2, 80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ae:	bf00      	nop
 80033b0:	080033fd 	.word	0x080033fd
 80033b4:	080033c9 	.word	0x080033c9
 80033b8:	080033df 	.word	0x080033df
 80033bc:	080033fd 	.word	0x080033fd
 80033c0:	080033fd 	.word	0x080033fd
 80033c4:	080033fd 	.word	0x080033fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	3308      	adds	r3, #8
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fc5f 	bl	8003c94 <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033dc:	e00f      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	3328      	adds	r3, #40	@ 0x28
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fd06 	bl	8003df8 <RCCEx_PLL3_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033f2:	e004      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80033fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003406:	4b6c      	ldr	r3, [pc, #432]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	f023 0107 	bic.w	r1, r3, #7
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003416:	4a68      	ldr	r2, [pc, #416]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003418:	430b      	orrs	r3, r1
 800341a:	6593      	str	r3, [r2, #88]	@ 0x58
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f002 0320 	and.w	r3, r2, #32
 8003432:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800343c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d055      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003452:	d033      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003458:	d82c      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800345e:	d02f      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003464:	d826      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003466:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800346a:	d02b      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800346c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003470:	d820      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003476:	d012      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800347c:	d81a      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d022      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003486:	d115      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	3308      	adds	r3, #8
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fbff 	bl	8003c94 <RCCEx_PLL2_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800349c:	e015      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	3328      	adds	r3, #40	@ 0x28
 80034a4:	2102      	movs	r1, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fca6 	bl	8003df8 <RCCEx_PLL3_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034b2:	e00a      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ba:	e006      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034bc:	bf00      	nop
 80034be:	e004      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034c0:	bf00      	nop
 80034c2:	e002      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80034c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d2:	4b39      	ldr	r3, [pc, #228]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e2:	4a35      	ldr	r2, [pc, #212]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80034fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003508:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800350c:	460b      	mov	r3, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	d058      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003516:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800351a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800351e:	d033      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003520:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003524:	d82c      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352a:	d02f      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003530:	d826      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003532:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003536:	d02b      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800353c:	d820      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800353e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003542:	d012      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003548:	d81a      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d022      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800354e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003552:	d115      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003558:	3308      	adds	r3, #8
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fb99 	bl	8003c94 <RCCEx_PLL2_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003568:	e015      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	3328      	adds	r3, #40	@ 0x28
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fc40 	bl	8003df8 <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800357e:	e00a      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003586:	e006      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003588:	bf00      	nop
 800358a:	e004      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800358c:	bf00      	nop
 800358e:	e002      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003590:	bf00      	nop
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10e      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035ae:	4a02      	ldr	r2, [pc, #8]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b4:	e006      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80035b6:	bf00      	nop
 80035b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80035d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80035de:	460b      	mov	r3, r1
 80035e0:	4313      	orrs	r3, r2
 80035e2:	d055      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035f0:	d033      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80035f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035f6:	d82c      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035fc:	d02f      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003602:	d826      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003604:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003608:	d02b      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800360a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800360e:	d820      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003614:	d012      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003616:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800361a:	d81a      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d022      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003624:	d115      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	3308      	adds	r3, #8
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fb30 	bl	8003c94 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800363a:	e015      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003640:	3328      	adds	r3, #40	@ 0x28
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fbd7 	bl	8003df8 <RCCEx_PLL3_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003650:	e00a      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800365a:	bf00      	nop
 800365c:	e004      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003670:	4ba1      	ldr	r3, [pc, #644]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003674:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003680:	4a9d      	ldr	r2, [pc, #628]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003682:	430b      	orrs	r3, r1
 8003684:	6593      	str	r3, [r2, #88]	@ 0x58
 8003686:	e003      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800368c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	f002 0308 	and.w	r3, r2, #8
 800369c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80036aa:	460b      	mov	r3, r1
 80036ac:	4313      	orrs	r3, r2
 80036ae:	d01e      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c2:	3328      	adds	r3, #40	@ 0x28
 80036c4:	2102      	movs	r1, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fb96 	bl	8003df8 <RCCEx_PLL3_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80036d8:	4b87      	ldr	r3, [pc, #540]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e8:	4a83      	ldr	r2, [pc, #524]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ea:	430b      	orrs	r3, r1
 80036ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	f002 0310 	and.w	r3, r2, #16
 80036fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003704:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d01e      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800371a:	d10c      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800371c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003720:	3328      	adds	r3, #40	@ 0x28
 8003722:	2102      	movs	r1, #2
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fb67 	bl	8003df8 <RCCEx_PLL3_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003736:	4b70      	ldr	r3, [pc, #448]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003746:	4a6c      	ldr	r2, [pc, #432]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003748:	430b      	orrs	r3, r1
 800374a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003762:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d03e      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003770:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003778:	d022      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800377a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800377e:	d81b      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003788:	d00b      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800378a:	e015      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003790:	3308      	adds	r3, #8
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fa7d 	bl	8003c94 <RCCEx_PLL2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037a0:	e00f      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	3328      	adds	r3, #40	@ 0x28
 80037a8:	2102      	movs	r1, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fb24 	bl	8003df8 <RCCEx_PLL3_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037b6:	e004      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037be:	e000      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80037c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ca:	4b4b      	ldr	r3, [pc, #300]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037da:	4a47      	ldr	r2, [pc, #284]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037dc:	430b      	orrs	r3, r1
 80037de:	6593      	str	r3, [r2, #88]	@ 0x58
 80037e0:	e003      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80037f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037f8:	2300      	movs	r3, #0
 80037fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003800:	460b      	mov	r3, r1
 8003802:	4313      	orrs	r3, r2
 8003804:	d03b      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003812:	d01f      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003814:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003818:	d818      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800381a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800381e:	d003      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003820:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003824:	d007      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003826:	e011      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003828:	4b33      	ldr	r3, [pc, #204]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	4a32      	ldr	r2, [pc, #200]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003834:	e00f      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383a:	3328      	adds	r3, #40	@ 0x28
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fada 	bl	8003df8 <RCCEx_PLL3_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800384a:	e004      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800385e:	4b26      	ldr	r3, [pc, #152]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	4a22      	ldr	r2, [pc, #136]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003870:	430b      	orrs	r3, r1
 8003872:	6553      	str	r3, [r2, #84]	@ 0x54
 8003874:	e003      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800388a:	673b      	str	r3, [r7, #112]	@ 0x70
 800388c:	2300      	movs	r3, #0
 800388e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003890:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003894:	460b      	mov	r3, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	d034      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a8:	d007      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80038aa:	e011      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ac:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	4a11      	ldr	r2, [pc, #68]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038b8:	e00e      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038be:	3308      	adds	r3, #8
 80038c0:	2102      	movs	r1, #2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f9e6 	bl	8003c94 <RCCEx_PLL2_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038ce:	e003      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10d      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ee:	4a02      	ldr	r2, [pc, #8]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80038f6:	bf00      	nop
 80038f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003912:	2300      	movs	r3, #0
 8003914:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003916:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800391a:	460b      	mov	r3, r1
 800391c:	4313      	orrs	r3, r2
 800391e:	d00c      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	3328      	adds	r3, #40	@ 0x28
 8003926:	2102      	movs	r1, #2
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fa65 	bl	8003df8 <RCCEx_PLL3_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003946:	663b      	str	r3, [r7, #96]	@ 0x60
 8003948:	2300      	movs	r3, #0
 800394a:	667b      	str	r3, [r7, #100]	@ 0x64
 800394c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003950:	460b      	mov	r3, r1
 8003952:	4313      	orrs	r3, r2
 8003954:	d038      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800395e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003962:	d018      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003968:	d811      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800396a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800396e:	d014      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003974:	d80b      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d011      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800397a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800397e:	d106      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003980:	4bc3      	ldr	r3, [pc, #780]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	4ac2      	ldr	r2, [pc, #776]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800398c:	e008      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003994:	e004      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800399e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039a8:	4bb9      	ldr	r3, [pc, #740]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039b8:	4ab5      	ldr	r2, [pc, #724]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ba:	430b      	orrs	r3, r1
 80039bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80039be:	e003      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80039d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039d6:	2300      	movs	r3, #0
 80039d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80039de:	460b      	mov	r3, r1
 80039e0:	4313      	orrs	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039e4:	4baa      	ldr	r3, [pc, #680]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f2:	4aa7      	ldr	r2, [pc, #668]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a06:	2300      	movs	r3, #0
 8003a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a14:	4b9e      	ldr	r3, [pc, #632]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a24:	4a9a      	ldr	r2, [pc, #616]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a26:	430b      	orrs	r3, r1
 8003a28:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a38:	2300      	movs	r3, #0
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a3c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003a40:	460b      	mov	r3, r1
 8003a42:	4313      	orrs	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a46:	4b92      	ldr	r3, [pc, #584]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a54:	4a8e      	ldr	r2, [pc, #568]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a66:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a68:	2300      	movs	r3, #0
 8003a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a6c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a70:	460b      	mov	r3, r1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a76:	4b86      	ldr	r3, [pc, #536]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	4a85      	ldr	r2, [pc, #532]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a80:	6113      	str	r3, [r2, #16]
 8003a82:	4b83      	ldr	r3, [pc, #524]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a84:	6919      	ldr	r1, [r3, #16]
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a8e:	4a80      	ldr	r2, [pc, #512]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ab0:	4b77      	ldr	r3, [pc, #476]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abe:	4a74      	ldr	r2, [pc, #464]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003af0:	4a67      	ldr	r2, [pc, #412]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	2100      	movs	r1, #0
 8003b00:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b08:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d011      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	3308      	adds	r3, #8
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f8ba 	bl	8003c94 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	6239      	str	r1, [r7, #32]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b48:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d011      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b56:	3308      	adds	r3, #8
 8003b58:	2101      	movs	r1, #1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f89a 	bl	8003c94 <RCCEx_PLL2_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	61b9      	str	r1, [r7, #24]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d011      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	3308      	adds	r3, #8
 8003b98:	2102      	movs	r1, #2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f87a 	bl	8003c94 <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	6139      	str	r1, [r7, #16]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d011      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd6:	3328      	adds	r3, #40	@ 0x28
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f90c 	bl	8003df8 <RCCEx_PLL3_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	d011      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	3328      	adds	r3, #40	@ 0x28
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f8ec 	bl	8003df8 <RCCEx_PLL3_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d011      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	3328      	adds	r3, #40	@ 0x28
 8003c58:	2102      	movs	r1, #2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f8cc 	bl	8003df8 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003c76:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c90:	58024400 	.word	0x58024400

08003c94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ca2:	4b53      	ldr	r3, [pc, #332]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d101      	bne.n	8003cb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e099      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a4e      	ldr	r2, [pc, #312]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cb8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbe:	f7fd f871 	bl	8000da4 <HAL_GetTick>
 8003cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cc6:	f7fd f86d 	bl	8000da4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e086      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cd8:	4b45      	ldr	r3, [pc, #276]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ce4:	4b42      	ldr	r3, [pc, #264]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	031b      	lsls	r3, r3, #12
 8003cf2:	493f      	ldr	r1, [pc, #252]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	025b      	lsls	r3, r3, #9
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d28:	4931      	ldr	r1, [pc, #196]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d2e:	4b30      	ldr	r3, [pc, #192]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	492d      	ldr	r1, [pc, #180]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d40:	4b2b      	ldr	r3, [pc, #172]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	f023 0220 	bic.w	r2, r3, #32
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4928      	ldr	r1, [pc, #160]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d52:	4b27      	ldr	r3, [pc, #156]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d56:	4a26      	ldr	r2, [pc, #152]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d58:	f023 0310 	bic.w	r3, r3, #16
 8003d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d5e:	4b24      	ldr	r3, [pc, #144]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d62:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <RCCEx_PLL2_Config+0x160>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	69d2      	ldr	r2, [r2, #28]
 8003d6a:	00d2      	lsls	r2, r2, #3
 8003d6c:	4920      	ldr	r1, [pc, #128]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d72:	4b1f      	ldr	r3, [pc, #124]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d76:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d78:	f043 0310 	orr.w	r3, r3, #16
 8003d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d84:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	4a19      	ldr	r2, [pc, #100]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003d90:	e00f      	b.n	8003db2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d98:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	4a14      	ldr	r2, [pc, #80]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003da2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003da4:	e005      	b.n	8003db2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003da6:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	4a11      	ldr	r2, [pc, #68]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003db0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003db2:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a0e      	ldr	r2, [pc, #56]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fc fff1 	bl	8000da4 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dc4:	e008      	b.n	8003dd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dc6:	f7fc ffed 	bl	8000da4 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e006      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	58024400 	.word	0x58024400
 8003df4:	ffff0007 	.word	0xffff0007

08003df8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e06:	4b53      	ldr	r3, [pc, #332]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d101      	bne.n	8003e16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e099      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e16:	4b4f      	ldr	r3, [pc, #316]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e22:	f7fc ffbf 	bl	8000da4 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e2a:	f7fc ffbb 	bl	8000da4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e086      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e3c:	4b45      	ldr	r3, [pc, #276]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e48:	4b42      	ldr	r3, [pc, #264]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	051b      	lsls	r3, r3, #20
 8003e56:	493f      	ldr	r1, [pc, #252]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	025b      	lsls	r3, r3, #9
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e8c:	4931      	ldr	r1, [pc, #196]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e92:	4b30      	ldr	r3, [pc, #192]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	492d      	ldr	r1, [pc, #180]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	4928      	ldr	r1, [pc, #160]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003eb6:	4b27      	ldr	r3, [pc, #156]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	4a26      	ldr	r2, [pc, #152]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ec2:	4b24      	ldr	r3, [pc, #144]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ec6:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <RCCEx_PLL3_Config+0x160>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	69d2      	ldr	r2, [r2, #28]
 8003ece:	00d2      	lsls	r2, r2, #3
 8003ed0:	4920      	ldr	r1, [pc, #128]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	4a1e      	ldr	r2, [pc, #120]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ef4:	e00f      	b.n	8003f16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d106      	bne.n	8003f0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003efc:	4b15      	ldr	r3, [pc, #84]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	4a14      	ldr	r2, [pc, #80]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f08:	e005      	b.n	8003f16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	4a11      	ldr	r2, [pc, #68]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f16:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f22:	f7fc ff3f 	bl	8000da4 <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f28:	e008      	b.n	8003f3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f2a:	f7fc ff3b 	bl	8000da4 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e006      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	58024400 	.word	0x58024400
 8003f58:	ffff0007 	.word	0xffff0007

08003f5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e10f      	b.n	800418e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a87      	ldr	r2, [pc, #540]	@ (8004198 <HAL_SPI_Init+0x23c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00f      	beq.n	8003f9e <HAL_SPI_Init+0x42>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a86      	ldr	r2, [pc, #536]	@ (800419c <HAL_SPI_Init+0x240>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00a      	beq.n	8003f9e <HAL_SPI_Init+0x42>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a84      	ldr	r2, [pc, #528]	@ (80041a0 <HAL_SPI_Init+0x244>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d005      	beq.n	8003f9e <HAL_SPI_Init+0x42>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	d901      	bls.n	8003f9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0f7      	b.n	800418e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 feee 	bl	8004d80 <SPI_GetPacketSize>
 8003fa4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7b      	ldr	r2, [pc, #492]	@ (8004198 <HAL_SPI_Init+0x23c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00c      	beq.n	8003fca <HAL_SPI_Init+0x6e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a79      	ldr	r2, [pc, #484]	@ (800419c <HAL_SPI_Init+0x240>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <HAL_SPI_Init+0x6e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a78      	ldr	r2, [pc, #480]	@ (80041a0 <HAL_SPI_Init+0x244>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Init+0x6e>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d811      	bhi.n	8003fee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003fce:	4a72      	ldr	r2, [pc, #456]	@ (8004198 <HAL_SPI_Init+0x23c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a70      	ldr	r2, [pc, #448]	@ (800419c <HAL_SPI_Init+0x240>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_SPI_Init+0x8c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6f      	ldr	r2, [pc, #444]	@ (80041a0 <HAL_SPI_Init+0x244>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d104      	bne.n	8003ff2 <HAL_SPI_Init+0x96>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d901      	bls.n	8003ff2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0cd      	b.n	800418e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fc fd22 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800402e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004038:	d119      	bne.n	800406e <HAL_SPI_Init+0x112>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004042:	d103      	bne.n	800404c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10c      	bne.n	800406e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800405c:	d107      	bne.n	800406e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00f      	beq.n	800409a <HAL_SPI_Init+0x13e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b06      	cmp	r3, #6
 8004080:	d90b      	bls.n	800409a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e007      	b.n	80040aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040bc:	ea42 0103 	orr.w	r1, r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800410a:	ea42 0103 	orr.w	r1, r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d113      	bne.n	800414a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004134:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004148:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40013000 	.word	0x40013000
 800419c:	40003800 	.word	0x40003800
 80041a0:	40003c00 	.word	0x40003c00

080041a4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3320      	adds	r3, #32
 80041ba:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041bc:	f7fc fdf2 	bl	8000da4 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	e1d1      	b.n	8004576 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_SPI_Transmit+0x3a>
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e1c9      	b.n	8004576 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_SPI_Transmit+0x4c>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e1c2      	b.n	8004576 <HAL_SPI_Transmit+0x3d2>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2203      	movs	r2, #3
 80041fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	88fa      	ldrh	r2, [r7, #6]
 8004212:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004248:	d108      	bne.n	800425c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e009      	b.n	8004270 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800426e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4b96      	ldr	r3, [pc, #600]	@ (80044d0 <HAL_SPI_Transmit+0x32c>)
 8004278:	4013      	ands	r3, r2
 800427a:	88f9      	ldrh	r1, [r7, #6]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800429c:	d107      	bne.n	80042ae <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b0f      	cmp	r3, #15
 80042b4:	d947      	bls.n	8004346 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80042b6:	e03f      	b.n	8004338 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d114      	bne.n	80042f0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	1d1a      	adds	r2, r3, #4
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80042ee:	e023      	b.n	8004338 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f0:	f7fc fd58 	bl	8000da4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d803      	bhi.n	8004308 <HAL_SPI_Transmit+0x164>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d102      	bne.n	800430e <HAL_SPI_Transmit+0x16a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d114      	bne.n	8004338 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fc68 	bl	8004be4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800431a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e11e      	b.n	8004576 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1b9      	bne.n	80042b8 <HAL_SPI_Transmit+0x114>
 8004344:	e0f1      	b.n	800452a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b07      	cmp	r3, #7
 800434c:	f240 80e6 	bls.w	800451c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004350:	e05d      	b.n	800440e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b02      	cmp	r3, #2
 800435e:	d132      	bne.n	80043c6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d918      	bls.n	800439e <HAL_SPI_Transmit+0x1fa>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d014      	beq.n	800439e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004384:	1d1a      	adds	r2, r3, #4
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b02      	subs	r3, #2
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800439c:	e037      	b.n	800440e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	1c9a      	adds	r2, r3, #2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80043c4:	e023      	b.n	800440e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c6:	f7fc fced 	bl	8000da4 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d803      	bhi.n	80043de <HAL_SPI_Transmit+0x23a>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d102      	bne.n	80043e4 <HAL_SPI_Transmit+0x240>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d114      	bne.n	800440e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fbfd 	bl	8004be4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e0b3      	b.n	8004576 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d19b      	bne.n	8004352 <HAL_SPI_Transmit+0x1ae>
 800441a:	e086      	b.n	800452a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d154      	bne.n	80044d4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b03      	cmp	r3, #3
 8004434:	d918      	bls.n	8004468 <HAL_SPI_Transmit+0x2c4>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d914      	bls.n	8004468 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	1d1a      	adds	r2, r3, #4
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b04      	subs	r3, #4
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004466:	e059      	b.n	800451c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d917      	bls.n	80044a4 <HAL_SPI_Transmit+0x300>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	1c9a      	adds	r2, r3, #2
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b02      	subs	r3, #2
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80044a2:	e03b      	b.n	800451c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3320      	adds	r3, #32
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80044ce:	e025      	b.n	800451c <HAL_SPI_Transmit+0x378>
 80044d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d4:	f7fc fc66 	bl	8000da4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d803      	bhi.n	80044ec <HAL_SPI_Transmit+0x348>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d102      	bne.n	80044f2 <HAL_SPI_Transmit+0x34e>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d114      	bne.n	800451c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fb76 	bl	8004be4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e02c      	b.n	8004576 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f af79 	bne.w	800441c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	2108      	movs	r1, #8
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fbf5 	bl	8004d24 <SPI_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fb47 	bl	8004be4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004574:	2300      	movs	r3, #0
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop

08004580 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d001      	beq.n	800459e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
 800459c:	e08b      	b.n	80046b6 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_SPI_Receive_IT+0x2a>
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e083      	b.n	80046b6 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_SPI_Receive_IT+0x3c>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e07c      	b.n	80046b6 <HAL_SPI_Receive_IT+0x136>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2204      	movs	r2, #4
 80045c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b0f      	cmp	r3, #15
 800460c:	d903      	bls.n	8004616 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4a2c      	ldr	r2, [pc, #176]	@ (80046c4 <HAL_SPI_Receive_IT+0x144>)
 8004612:	671a      	str	r2, [r3, #112]	@ 0x70
 8004614:	e00a      	b.n	800462c <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b07      	cmp	r3, #7
 800461c:	d903      	bls.n	8004626 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a29      	ldr	r2, [pc, #164]	@ (80046c8 <HAL_SPI_Receive_IT+0x148>)
 8004622:	671a      	str	r2, [r3, #112]	@ 0x70
 8004624:	e002      	b.n	800462c <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a28      	ldr	r2, [pc, #160]	@ (80046cc <HAL_SPI_Receive_IT+0x14c>)
 800462a:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004634:	d108      	bne.n	8004648 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e009      	b.n	800465c <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800465a:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <HAL_SPI_Receive_IT+0x150>)
 8004664:	4013      	ands	r3, r2
 8004666:	88f9      	ldrh	r1, [r7, #6]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	430b      	orrs	r3, r1
 800466e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6919      	ldr	r1, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	f240 7349 	movw	r3, #1865	@ 0x749
 8004696:	430b      	orrs	r3, r1
 8004698:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046a2:	d107      	bne.n	80046b4 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	08004b8b 	.word	0x08004b8b
 80046c8:	08004b2b 	.word	0x08004b2b
 80046cc:	08004acd 	.word	0x08004acd
 80046d0:	ffff0000 	.word	0xffff0000

080046d4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	@ 0x28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80046ec:	6a3a      	ldr	r2, [r7, #32]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004706:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3330      	adds	r3, #48	@ 0x30
 800470e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004716:	2b00      	cmp	r3, #0
 8004718:	d010      	beq.n	800473c <HAL_SPI_IRQHandler+0x68>
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004732:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f9a5 	bl	8004a84 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800473a:	e192      	b.n	8004a62 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d113      	bne.n	800476e <HAL_SPI_IRQHandler+0x9a>
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10e      	bne.n	800476e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
    hspi->RxISR(hspi);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
    handled = 1UL;
 800476a:	2301      	movs	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10f      	bne.n	8004798 <HAL_SPI_IRQHandler+0xc4>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4798      	blx	r3
    handled = 1UL;
 8004794:	2301      	movs	r3, #1
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_SPI_IRQHandler+0xee>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
    handled = 1UL;
 80047be:	2301      	movs	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 8147 	bne.w	8004a58 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 808b 	beq.w	80048ec <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0208 	orr.w	r2, r2, #8
 80047e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0210 	orr.w	r2, r2, #16
 80047f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004804:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0208 	bic.w	r2, r2, #8
 8004814:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d13d      	bne.n	80048a0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8004824:	e036      	b.n	8004894 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b0f      	cmp	r3, #15
 800482c:	d90b      	bls.n	8004846 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004836:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004838:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800483e:	1d1a      	adds	r2, r3, #4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	665a      	str	r2, [r3, #100]	@ 0x64
 8004844:	e01d      	b.n	8004882 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b07      	cmp	r3, #7
 800484c:	d90b      	bls.n	8004866 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	8812      	ldrh	r2, [r2, #0]
 8004856:	b292      	uxth	r2, r2
 8004858:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	665a      	str	r2, [r3, #100]	@ 0x64
 8004864:	e00d      	b.n	8004882 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1c2      	bne.n	8004826 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f99f 	bl	8004be4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fb fea3 	bl	8000604 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80048be:	e0d0      	b.n	8004a62 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	2b05      	cmp	r3, #5
 80048c4:	d103      	bne.n	80048ce <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f8d2 	bl	8004a70 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80048cc:	e0c6      	b.n	8004a5c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d103      	bne.n	80048dc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fb fe6d 	bl	80005b4 <HAL_SPI_RxCpltCallback>
    return;
 80048da:	e0bf      	b.n	8004a5c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	f040 80bc 	bne.w	8004a5c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7fb fe2f 	bl	8000548 <HAL_SPI_TxCpltCallback>
    return;
 80048ea:	e0b7      	b.n	8004a5c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 80b5 	beq.w	8004a62 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00f      	beq.n	8004922 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004908:	f043 0204 	orr.w	r2, r3, #4
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004920:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00f      	beq.n	800494c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800495c:	f043 0208 	orr.w	r2, r3, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004974:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00f      	beq.n	80049a0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004986:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0220 	orr.w	r2, r2, #32
 800499e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d05a      	beq.n	8004a60 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6919      	ldr	r1, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b28      	ldr	r3, [pc, #160]	@ (8004a68 <HAL_SPI_IRQHandler+0x394>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049d4:	d138      	bne.n	8004a48 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80049e4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d013      	beq.n	8004a16 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049f2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a6c <HAL_SPI_IRQHandler+0x398>)
 80049f4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fc fb1e 	bl	800103c <HAL_DMA_Abort_IT>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d020      	beq.n	8004a60 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a22:	4a12      	ldr	r2, [pc, #72]	@ (8004a6c <HAL_SPI_IRQHandler+0x398>)
 8004a24:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fc fb06 	bl	800103c <HAL_DMA_Abort_IT>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d014      	beq.n	8004a60 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a46:	e00b      	b.n	8004a60 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fb fdd7 	bl	8000604 <HAL_SPI_ErrorCallback>
    return;
 8004a56:	e003      	b.n	8004a60 <HAL_SPI_IRQHandler+0x38c>
    return;
 8004a58:	bf00      	nop
 8004a5a:	e002      	b.n	8004a62 <HAL_SPI_IRQHandler+0x38e>
    return;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HAL_SPI_IRQHandler+0x38e>
    return;
 8004a60:	bf00      	nop
  }
}
 8004a62:	3728      	adds	r7, #40	@ 0x28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	fffffc94 	.word	0xfffffc94
 8004a6c:	08004a99 	.word	0x08004a99

08004a70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7fb fda0 	bl	8000604 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d107      	bne.n	8004b1e <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3330      	adds	r3, #48	@ 0x30
 8004b38:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	8812      	ldrh	r2, [r2, #0]
 8004b42:	b292      	uxth	r2, r2
 8004b44:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b4a:	1c9a      	adds	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d107      	bne.n	8004b7e <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b9c:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d107      	bne.n	8004bd6 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0210 	orr.w	r2, r2, #16
 8004c12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6919      	ldr	r1, [r3, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d20 <SPI_CloseTransfer+0x13c>)
 8004c30:	400b      	ands	r3, r1
 8004c32:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004c42:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d014      	beq.n	8004c7a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00f      	beq.n	8004c7a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0220 	orr.w	r2, r2, #32
 8004c78:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d014      	beq.n	8004cb0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00f      	beq.n	8004cb0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c96:	f043 0204 	orr.w	r2, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00f      	beq.n	8004cda <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cc0:	f043 0201 	orr.w	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cd8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00f      	beq.n	8004d04 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cea:	f043 0208 	orr.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d02:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	fffffc90 	.word	0xfffffc90

08004d24 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004d34:	e010      	b.n	8004d58 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d36:	f7fc f835 	bl	8000da4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d803      	bhi.n	8004d4e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d102      	bne.n	8004d54 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e00f      	b.n	8004d78 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695a      	ldr	r2, [r3, #20]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4013      	ands	r3, r2
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d0df      	beq.n	8004d36 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3307      	adds	r3, #7
 8004d9e:	08db      	lsrs	r3, r3, #3
 8004da0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <memset>:
 8004db6:	4402      	add	r2, r0
 8004db8:	4603      	mov	r3, r0
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d100      	bne.n	8004dc0 <memset+0xa>
 8004dbe:	4770      	bx	lr
 8004dc0:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc4:	e7f9      	b.n	8004dba <memset+0x4>
	...

08004dc8 <__libc_init_array>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	4d0d      	ldr	r5, [pc, #52]	@ (8004e00 <__libc_init_array+0x38>)
 8004dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8004e04 <__libc_init_array+0x3c>)
 8004dce:	1b64      	subs	r4, r4, r5
 8004dd0:	10a4      	asrs	r4, r4, #2
 8004dd2:	2600      	movs	r6, #0
 8004dd4:	42a6      	cmp	r6, r4
 8004dd6:	d109      	bne.n	8004dec <__libc_init_array+0x24>
 8004dd8:	4d0b      	ldr	r5, [pc, #44]	@ (8004e08 <__libc_init_array+0x40>)
 8004dda:	4c0c      	ldr	r4, [pc, #48]	@ (8004e0c <__libc_init_array+0x44>)
 8004ddc:	f000 f818 	bl	8004e10 <_init>
 8004de0:	1b64      	subs	r4, r4, r5
 8004de2:	10a4      	asrs	r4, r4, #2
 8004de4:	2600      	movs	r6, #0
 8004de6:	42a6      	cmp	r6, r4
 8004de8:	d105      	bne.n	8004df6 <__libc_init_array+0x2e>
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df0:	4798      	blx	r3
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7ee      	b.n	8004dd4 <__libc_init_array+0xc>
 8004df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfa:	4798      	blx	r3
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	e7f2      	b.n	8004de6 <__libc_init_array+0x1e>
 8004e00:	08004e38 	.word	0x08004e38
 8004e04:	08004e38 	.word	0x08004e38
 8004e08:	08004e38 	.word	0x08004e38
 8004e0c:	08004e3c 	.word	0x08004e3c

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
