
test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f70  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0810a208  0810a208  0000b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810a28c  0810a28c  0000b28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810a294  0810a294  0000b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810a298  0810a298  0000b298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  10000000  0810a29c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  10000010  0810a2ac  0000c010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  10000070  0810a30c  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca4  100000d0  0810a36c  0000c0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  10000d74  0810a36c  0000cd74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d1e  00000000  00000000  0000c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce0  00000000  00000000  00032e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  00036b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016fc  00000000  00000000  00038888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f7bf  00000000  00000000  00039f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b91  00000000  00000000  00079743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019bf9e  00000000  00000000  0009f2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023b272  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000821c  00000000  00000000  0023b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  002434d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810a1f0 	.word	0x0810a1f0

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	0810a1f0 	.word	0x0810a1f0

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96a 	b.w	81005c4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	460c      	mov	r4, r1
 8100310:	2b00      	cmp	r3, #0
 8100312:	d14e      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100314:	4694      	mov	ip, r2
 8100316:	458c      	cmp	ip, r1
 8100318:	4686      	mov	lr, r0
 810031a:	fab2 f282 	clz	r2, r2
 810031e:	d962      	bls.n	81003e6 <__udivmoddi4+0xde>
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0320 	rsb	r3, r2, #32
 8100326:	4091      	lsls	r1, r2
 8100328:	fa20 f303 	lsr.w	r3, r0, r3
 810032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100330:	4319      	orrs	r1, r3
 8100332:	fa00 fe02 	lsl.w	lr, r0, r2
 8100336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810033a:	fa1f f68c 	uxth.w	r6, ip
 810033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8100342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100346:	fb07 1114 	mls	r1, r7, r4, r1
 810034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034e:	fb04 f106 	mul.w	r1, r4, r6
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f104 30ff 	add.w	r0, r4, #4294967295
 810035e:	f080 8112 	bcs.w	8100586 <__udivmoddi4+0x27e>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 810f 	bls.w	8100586 <__udivmoddi4+0x27e>
 8100368:	3c02      	subs	r4, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a59      	subs	r1, r3, r1
 810036e:	fa1f f38e 	uxth.w	r3, lr
 8100372:	fbb1 f0f7 	udiv	r0, r1, r7
 8100376:	fb07 1110 	mls	r1, r7, r0, r1
 810037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810037e:	fb00 f606 	mul.w	r6, r0, r6
 8100382:	429e      	cmp	r6, r3
 8100384:	d90a      	bls.n	810039c <__udivmoddi4+0x94>
 8100386:	eb1c 0303 	adds.w	r3, ip, r3
 810038a:	f100 31ff 	add.w	r1, r0, #4294967295
 810038e:	f080 80fc 	bcs.w	810058a <__udivmoddi4+0x282>
 8100392:	429e      	cmp	r6, r3
 8100394:	f240 80f9 	bls.w	810058a <__udivmoddi4+0x282>
 8100398:	4463      	add	r3, ip
 810039a:	3802      	subs	r0, #2
 810039c:	1b9b      	subs	r3, r3, r6
 810039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 81003a2:	2100      	movs	r1, #0
 81003a4:	b11d      	cbz	r5, 81003ae <__udivmoddi4+0xa6>
 81003a6:	40d3      	lsrs	r3, r2
 81003a8:	2200      	movs	r2, #0
 81003aa:	e9c5 3200 	strd	r3, r2, [r5]
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d905      	bls.n	81003c2 <__udivmoddi4+0xba>
 81003b6:	b10d      	cbz	r5, 81003bc <__udivmoddi4+0xb4>
 81003b8:	e9c5 0100 	strd	r0, r1, [r5]
 81003bc:	2100      	movs	r1, #0
 81003be:	4608      	mov	r0, r1
 81003c0:	e7f5      	b.n	81003ae <__udivmoddi4+0xa6>
 81003c2:	fab3 f183 	clz	r1, r3
 81003c6:	2900      	cmp	r1, #0
 81003c8:	d146      	bne.n	8100458 <__udivmoddi4+0x150>
 81003ca:	42a3      	cmp	r3, r4
 81003cc:	d302      	bcc.n	81003d4 <__udivmoddi4+0xcc>
 81003ce:	4290      	cmp	r0, r2
 81003d0:	f0c0 80f0 	bcc.w	81005b4 <__udivmoddi4+0x2ac>
 81003d4:	1a86      	subs	r6, r0, r2
 81003d6:	eb64 0303 	sbc.w	r3, r4, r3
 81003da:	2001      	movs	r0, #1
 81003dc:	2d00      	cmp	r5, #0
 81003de:	d0e6      	beq.n	81003ae <__udivmoddi4+0xa6>
 81003e0:	e9c5 6300 	strd	r6, r3, [r5]
 81003e4:	e7e3      	b.n	81003ae <__udivmoddi4+0xa6>
 81003e6:	2a00      	cmp	r2, #0
 81003e8:	f040 8090 	bne.w	810050c <__udivmoddi4+0x204>
 81003ec:	eba1 040c 	sub.w	r4, r1, ip
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	fa1f f78c 	uxth.w	r7, ip
 81003f8:	2101      	movs	r1, #1
 81003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 81003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100402:	fb08 4416 	mls	r4, r8, r6, r4
 8100406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810040a:	fb07 f006 	mul.w	r0, r7, r6
 810040e:	4298      	cmp	r0, r3
 8100410:	d908      	bls.n	8100424 <__udivmoddi4+0x11c>
 8100412:	eb1c 0303 	adds.w	r3, ip, r3
 8100416:	f106 34ff 	add.w	r4, r6, #4294967295
 810041a:	d202      	bcs.n	8100422 <__udivmoddi4+0x11a>
 810041c:	4298      	cmp	r0, r3
 810041e:	f200 80cd 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 8100422:	4626      	mov	r6, r4
 8100424:	1a1c      	subs	r4, r3, r0
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb4 f0f8 	udiv	r0, r4, r8
 810042e:	fb08 4410 	mls	r4, r8, r0, r4
 8100432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100436:	fb00 f707 	mul.w	r7, r0, r7
 810043a:	429f      	cmp	r7, r3
 810043c:	d908      	bls.n	8100450 <__udivmoddi4+0x148>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 34ff 	add.w	r4, r0, #4294967295
 8100446:	d202      	bcs.n	810044e <__udivmoddi4+0x146>
 8100448:	429f      	cmp	r7, r3
 810044a:	f200 80b0 	bhi.w	81005ae <__udivmoddi4+0x2a6>
 810044e:	4620      	mov	r0, r4
 8100450:	1bdb      	subs	r3, r3, r7
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	e7a5      	b.n	81003a4 <__udivmoddi4+0x9c>
 8100458:	f1c1 0620 	rsb	r6, r1, #32
 810045c:	408b      	lsls	r3, r1
 810045e:	fa22 f706 	lsr.w	r7, r2, r6
 8100462:	431f      	orrs	r7, r3
 8100464:	fa20 fc06 	lsr.w	ip, r0, r6
 8100468:	fa04 f301 	lsl.w	r3, r4, r1
 810046c:	ea43 030c 	orr.w	r3, r3, ip
 8100470:	40f4      	lsrs	r4, r6
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	0c38      	lsrs	r0, r7, #16
 8100478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810047c:	fbb4 fef0 	udiv	lr, r4, r0
 8100480:	fa1f fc87 	uxth.w	ip, r7
 8100484:	fb00 441e 	mls	r4, r0, lr, r4
 8100488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810048c:	fb0e f90c 	mul.w	r9, lr, ip
 8100490:	45a1      	cmp	r9, r4
 8100492:	fa02 f201 	lsl.w	r2, r2, r1
 8100496:	d90a      	bls.n	81004ae <__udivmoddi4+0x1a6>
 8100498:	193c      	adds	r4, r7, r4
 810049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 810049e:	f080 8084 	bcs.w	81005aa <__udivmoddi4+0x2a2>
 81004a2:	45a1      	cmp	r9, r4
 81004a4:	f240 8081 	bls.w	81005aa <__udivmoddi4+0x2a2>
 81004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 81004ac:	443c      	add	r4, r7
 81004ae:	eba4 0409 	sub.w	r4, r4, r9
 81004b2:	fa1f f983 	uxth.w	r9, r3
 81004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 81004ba:	fb00 4413 	mls	r4, r0, r3, r4
 81004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 81004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c6:	45a4      	cmp	ip, r4
 81004c8:	d907      	bls.n	81004da <__udivmoddi4+0x1d2>
 81004ca:	193c      	adds	r4, r7, r4
 81004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 81004d0:	d267      	bcs.n	81005a2 <__udivmoddi4+0x29a>
 81004d2:	45a4      	cmp	ip, r4
 81004d4:	d965      	bls.n	81005a2 <__udivmoddi4+0x29a>
 81004d6:	3b02      	subs	r3, #2
 81004d8:	443c      	add	r4, r7
 81004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81004de:	fba0 9302 	umull	r9, r3, r0, r2
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	429c      	cmp	r4, r3
 81004e8:	46ce      	mov	lr, r9
 81004ea:	469c      	mov	ip, r3
 81004ec:	d351      	bcc.n	8100592 <__udivmoddi4+0x28a>
 81004ee:	d04e      	beq.n	810058e <__udivmoddi4+0x286>
 81004f0:	b155      	cbz	r5, 8100508 <__udivmoddi4+0x200>
 81004f2:	ebb8 030e 	subs.w	r3, r8, lr
 81004f6:	eb64 040c 	sbc.w	r4, r4, ip
 81004fa:	fa04 f606 	lsl.w	r6, r4, r6
 81004fe:	40cb      	lsrs	r3, r1
 8100500:	431e      	orrs	r6, r3
 8100502:	40cc      	lsrs	r4, r1
 8100504:	e9c5 6400 	strd	r6, r4, [r5]
 8100508:	2100      	movs	r1, #0
 810050a:	e750      	b.n	81003ae <__udivmoddi4+0xa6>
 810050c:	f1c2 0320 	rsb	r3, r2, #32
 8100510:	fa20 f103 	lsr.w	r1, r0, r3
 8100514:	fa0c fc02 	lsl.w	ip, ip, r2
 8100518:	fa24 f303 	lsr.w	r3, r4, r3
 810051c:	4094      	lsls	r4, r2
 810051e:	430c      	orrs	r4, r1
 8100520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100524:	fa00 fe02 	lsl.w	lr, r0, r2
 8100528:	fa1f f78c 	uxth.w	r7, ip
 810052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100530:	fb08 3110 	mls	r1, r8, r0, r3
 8100534:	0c23      	lsrs	r3, r4, #16
 8100536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810053a:	fb00 f107 	mul.w	r1, r0, r7
 810053e:	4299      	cmp	r1, r3
 8100540:	d908      	bls.n	8100554 <__udivmoddi4+0x24c>
 8100542:	eb1c 0303 	adds.w	r3, ip, r3
 8100546:	f100 36ff 	add.w	r6, r0, #4294967295
 810054a:	d22c      	bcs.n	81005a6 <__udivmoddi4+0x29e>
 810054c:	4299      	cmp	r1, r3
 810054e:	d92a      	bls.n	81005a6 <__udivmoddi4+0x29e>
 8100550:	3802      	subs	r0, #2
 8100552:	4463      	add	r3, ip
 8100554:	1a5b      	subs	r3, r3, r1
 8100556:	b2a4      	uxth	r4, r4
 8100558:	fbb3 f1f8 	udiv	r1, r3, r8
 810055c:	fb08 3311 	mls	r3, r8, r1, r3
 8100560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100564:	fb01 f307 	mul.w	r3, r1, r7
 8100568:	42a3      	cmp	r3, r4
 810056a:	d908      	bls.n	810057e <__udivmoddi4+0x276>
 810056c:	eb1c 0404 	adds.w	r4, ip, r4
 8100570:	f101 36ff 	add.w	r6, r1, #4294967295
 8100574:	d213      	bcs.n	810059e <__udivmoddi4+0x296>
 8100576:	42a3      	cmp	r3, r4
 8100578:	d911      	bls.n	810059e <__udivmoddi4+0x296>
 810057a:	3902      	subs	r1, #2
 810057c:	4464      	add	r4, ip
 810057e:	1ae4      	subs	r4, r4, r3
 8100580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100584:	e739      	b.n	81003fa <__udivmoddi4+0xf2>
 8100586:	4604      	mov	r4, r0
 8100588:	e6f0      	b.n	810036c <__udivmoddi4+0x64>
 810058a:	4608      	mov	r0, r1
 810058c:	e706      	b.n	810039c <__udivmoddi4+0x94>
 810058e:	45c8      	cmp	r8, r9
 8100590:	d2ae      	bcs.n	81004f0 <__udivmoddi4+0x1e8>
 8100592:	ebb9 0e02 	subs.w	lr, r9, r2
 8100596:	eb63 0c07 	sbc.w	ip, r3, r7
 810059a:	3801      	subs	r0, #1
 810059c:	e7a8      	b.n	81004f0 <__udivmoddi4+0x1e8>
 810059e:	4631      	mov	r1, r6
 81005a0:	e7ed      	b.n	810057e <__udivmoddi4+0x276>
 81005a2:	4603      	mov	r3, r0
 81005a4:	e799      	b.n	81004da <__udivmoddi4+0x1d2>
 81005a6:	4630      	mov	r0, r6
 81005a8:	e7d4      	b.n	8100554 <__udivmoddi4+0x24c>
 81005aa:	46d6      	mov	lr, sl
 81005ac:	e77f      	b.n	81004ae <__udivmoddi4+0x1a6>
 81005ae:	4463      	add	r3, ip
 81005b0:	3802      	subs	r0, #2
 81005b2:	e74d      	b.n	8100450 <__udivmoddi4+0x148>
 81005b4:	4606      	mov	r6, r0
 81005b6:	4623      	mov	r3, r4
 81005b8:	4608      	mov	r0, r1
 81005ba:	e70f      	b.n	81003dc <__udivmoddi4+0xd4>
 81005bc:	3e02      	subs	r6, #2
 81005be:	4463      	add	r3, ip
 81005c0:	e730      	b.n	8100424 <__udivmoddi4+0x11c>
 81005c2:	bf00      	nop

081005c4 <__aeabi_idiv0>:
 81005c4:	4770      	bx	lr
 81005c6:	bf00      	nop

081005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005c8:	b480      	push	{r7}
 81005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005cc:	4b09      	ldr	r3, [pc, #36]	@ (81005f4 <SystemInit+0x2c>)
 81005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81005d2:	4a08      	ldr	r2, [pc, #32]	@ (81005f4 <SystemInit+0x2c>)
 81005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005dc:	4b05      	ldr	r3, [pc, #20]	@ (81005f4 <SystemInit+0x2c>)
 81005de:	691b      	ldr	r3, [r3, #16]
 81005e0:	4a04      	ldr	r2, [pc, #16]	@ (81005f4 <SystemInit+0x2c>)
 81005e2:	f043 0310 	orr.w	r3, r3, #16
 81005e6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr
 81005f2:	bf00      	nop
 81005f4:	e000ed00 	.word	0xe000ed00

081005f8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 81005f8:	b480      	push	{r7}
 81005fa:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 81005fc:	4b09      	ldr	r3, [pc, #36]	@ (8100624 <ExitRun0Mode+0x2c>)
 81005fe:	68db      	ldr	r3, [r3, #12]
 8100600:	4a08      	ldr	r2, [pc, #32]	@ (8100624 <ExitRun0Mode+0x2c>)
 8100602:	f023 0302 	bic.w	r3, r3, #2
 8100606:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100608:	bf00      	nop
 810060a:	4b06      	ldr	r3, [pc, #24]	@ (8100624 <ExitRun0Mode+0x2c>)
 810060c:	685b      	ldr	r3, [r3, #4]
 810060e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100612:	2b00      	cmp	r3, #0
 8100614:	d0f9      	beq.n	810060a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100616:	bf00      	nop
 8100618:	bf00      	nop
 810061a:	46bd      	mov	sp, r7
 810061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100620:	4770      	bx	lr
 8100622:	bf00      	nop
 8100624:	58024800 	.word	0x58024800

08100628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100628:	b580      	push	{r7, lr}
 810062a:	b082      	sub	sp, #8
 810062c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810062e:	4b25      	ldr	r3, [pc, #148]	@ (81006c4 <main+0x9c>)
 8100630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100634:	4a23      	ldr	r2, [pc, #140]	@ (81006c4 <main+0x9c>)
 8100636:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810063a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810063e:	4b21      	ldr	r3, [pc, #132]	@ (81006c4 <main+0x9c>)
 8100640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100648:	607b      	str	r3, [r7, #4]
 810064a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810064c:	2001      	movs	r0, #1
 810064e:	f002 ff25 	bl	810349c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100652:	f004 fa57 	bl	8104b04 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100656:	2201      	movs	r2, #1
 8100658:	2102      	movs	r1, #2
 810065a:	2000      	movs	r0, #0
 810065c:	f004 f9d8 	bl	8104a10 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100660:	4b19      	ldr	r3, [pc, #100]	@ (81006c8 <main+0xa0>)
 8100662:	681b      	ldr	r3, [r3, #0]
 8100664:	091b      	lsrs	r3, r3, #4
 8100666:	f003 030f 	and.w	r3, r3, #15
 810066a:	2b07      	cmp	r3, #7
 810066c:	d108      	bne.n	8100680 <main+0x58>
 810066e:	4b17      	ldr	r3, [pc, #92]	@ (81006cc <main+0xa4>)
 8100670:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100674:	4a15      	ldr	r2, [pc, #84]	@ (81006cc <main+0xa4>)
 8100676:	f043 0301 	orr.w	r3, r3, #1
 810067a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810067e:	e007      	b.n	8100690 <main+0x68>
 8100680:	4b12      	ldr	r3, [pc, #72]	@ (81006cc <main+0xa4>)
 8100682:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100686:	4a11      	ldr	r2, [pc, #68]	@ (81006cc <main+0xa4>)
 8100688:	f043 0301 	orr.w	r3, r3, #1
 810068c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100690:	f001 fbc2 	bl	8101e18 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100694:	f000 fbbc 	bl	8100e10 <MX_GPIO_Init>
  MX_ETH_Init();
 8100698:	f000 f81a 	bl	81006d0 <MX_ETH_Init>
  MX_FDCAN1_Init();
 810069c:	f000 f864 	bl	8100768 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 81006a0:	f000 f8c6 	bl	8100830 <MX_FDCAN2_Init>
  MX_FMC_Init();
 81006a4:	f000 fb66 	bl	8100d74 <MX_FMC_Init>
  MX_LTDC_Init();
 81006a8:	f000 f926 	bl	81008f8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 81006ac:	f000 f9d6 	bl	8100a5c <MX_QUADSPI_Init>
  MX_SAI2_Init();
 81006b0:	f000 fa00 	bl	8100ab4 <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 81006b4:	f000 fabc 	bl	8100c30 <MX_SDMMC1_MMC_Init>
  MX_USART3_UART_Init();
 81006b8:	f000 fade 	bl	8100c78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 81006bc:	f000 fb28 	bl	8100d10 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006c0:	bf00      	nop
 81006c2:	e7fd      	b.n	81006c0 <main+0x98>
 81006c4:	58024400 	.word	0x58024400
 81006c8:	e000ed00 	.word	0xe000ed00
 81006cc:	58026400 	.word	0x58026400

081006d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 81006d0:	b580      	push	{r7, lr}
 81006d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 81006d4:	4b1e      	ldr	r3, [pc, #120]	@ (8100750 <MX_ETH_Init+0x80>)
 81006d6:	4a1f      	ldr	r2, [pc, #124]	@ (8100754 <MX_ETH_Init+0x84>)
 81006d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81006da:	4b1f      	ldr	r3, [pc, #124]	@ (8100758 <MX_ETH_Init+0x88>)
 81006dc:	2200      	movs	r2, #0
 81006de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 81006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8100758 <MX_ETH_Init+0x88>)
 81006e2:	2280      	movs	r2, #128	@ 0x80
 81006e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 81006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8100758 <MX_ETH_Init+0x88>)
 81006e8:	22e1      	movs	r2, #225	@ 0xe1
 81006ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 81006ec:	4b1a      	ldr	r3, [pc, #104]	@ (8100758 <MX_ETH_Init+0x88>)
 81006ee:	2200      	movs	r2, #0
 81006f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 81006f2:	4b19      	ldr	r3, [pc, #100]	@ (8100758 <MX_ETH_Init+0x88>)
 81006f4:	2200      	movs	r2, #0
 81006f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 81006f8:	4b17      	ldr	r3, [pc, #92]	@ (8100758 <MX_ETH_Init+0x88>)
 81006fa:	2200      	movs	r2, #0
 81006fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 81006fe:	4b14      	ldr	r3, [pc, #80]	@ (8100750 <MX_ETH_Init+0x80>)
 8100700:	4a15      	ldr	r2, [pc, #84]	@ (8100758 <MX_ETH_Init+0x88>)
 8100702:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8100704:	4b12      	ldr	r3, [pc, #72]	@ (8100750 <MX_ETH_Init+0x80>)
 8100706:	2200      	movs	r2, #0
 8100708:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 810070a:	4b11      	ldr	r3, [pc, #68]	@ (8100750 <MX_ETH_Init+0x80>)
 810070c:	4a13      	ldr	r2, [pc, #76]	@ (810075c <MX_ETH_Init+0x8c>)
 810070e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100710:	4b0f      	ldr	r3, [pc, #60]	@ (8100750 <MX_ETH_Init+0x80>)
 8100712:	4a13      	ldr	r2, [pc, #76]	@ (8100760 <MX_ETH_Init+0x90>)
 8100714:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8100716:	4b0e      	ldr	r3, [pc, #56]	@ (8100750 <MX_ETH_Init+0x80>)
 8100718:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 810071c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 810071e:	480c      	ldr	r0, [pc, #48]	@ (8100750 <MX_ETH_Init+0x80>)
 8100720:	f001 fd6a 	bl	81021f8 <HAL_ETH_Init>
 8100724:	4603      	mov	r3, r0
 8100726:	2b00      	cmp	r3, #0
 8100728:	d001      	beq.n	810072e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 810072a:	f000 fc39 	bl	8100fa0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810072e:	2238      	movs	r2, #56	@ 0x38
 8100730:	2100      	movs	r1, #0
 8100732:	480c      	ldr	r0, [pc, #48]	@ (8100764 <MX_ETH_Init+0x94>)
 8100734:	f009 fd21 	bl	810a17a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100738:	4b0a      	ldr	r3, [pc, #40]	@ (8100764 <MX_ETH_Init+0x94>)
 810073a:	2221      	movs	r2, #33	@ 0x21
 810073c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810073e:	4b09      	ldr	r3, [pc, #36]	@ (8100764 <MX_ETH_Init+0x94>)
 8100740:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8100744:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100746:	4b07      	ldr	r3, [pc, #28]	@ (8100764 <MX_ETH_Init+0x94>)
 8100748:	2200      	movs	r2, #0
 810074a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 810074c:	bf00      	nop
 810074e:	bd80      	pop	{r7, pc}
 8100750:	10000124 	.word	0x10000124
 8100754:	40028000 	.word	0x40028000
 8100758:	10000d5c 	.word	0x10000d5c
 810075c:	10000070 	.word	0x10000070
 8100760:	10000010 	.word	0x10000010
 8100764:	100000ec 	.word	0x100000ec

08100768 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8100768:	b580      	push	{r7, lr}
 810076a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 810076c:	4b2e      	ldr	r3, [pc, #184]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 810076e:	4a2f      	ldr	r2, [pc, #188]	@ (810082c <MX_FDCAN1_Init+0xc4>)
 8100770:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100772:	4b2d      	ldr	r3, [pc, #180]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 8100774:	2200      	movs	r2, #0
 8100776:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8100778:	4b2b      	ldr	r3, [pc, #172]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 810077a:	2200      	movs	r2, #0
 810077c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 810077e:	4b2a      	ldr	r3, [pc, #168]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 8100780:	2200      	movs	r2, #0
 8100782:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100784:	4b28      	ldr	r3, [pc, #160]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 8100786:	2200      	movs	r2, #0
 8100788:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 810078a:	4b27      	ldr	r3, [pc, #156]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 810078c:	2200      	movs	r2, #0
 810078e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8100790:	4b25      	ldr	r3, [pc, #148]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 8100792:	2210      	movs	r2, #16
 8100794:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8100796:	4b24      	ldr	r3, [pc, #144]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 8100798:	2201      	movs	r2, #1
 810079a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 810079c:	4b22      	ldr	r3, [pc, #136]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 810079e:	2201      	movs	r2, #1
 81007a0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 81007a2:	4b21      	ldr	r3, [pc, #132]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007a4:	2201      	movs	r2, #1
 81007a6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 81007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007aa:	2201      	movs	r2, #1
 81007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 81007ae:	4b1e      	ldr	r3, [pc, #120]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007b0:	2201      	movs	r2, #1
 81007b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 81007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007b6:	2201      	movs	r2, #1
 81007b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 81007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007bc:	2201      	movs	r2, #1
 81007be:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 81007c0:	4b19      	ldr	r3, [pc, #100]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007c2:	2200      	movs	r2, #0
 81007c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 81007c6:	4b18      	ldr	r3, [pc, #96]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007c8:	2200      	movs	r2, #0
 81007ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 81007cc:	4b16      	ldr	r3, [pc, #88]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007ce:	2200      	movs	r2, #0
 81007d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 81007d2:	4b15      	ldr	r3, [pc, #84]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007d4:	2200      	movs	r2, #0
 81007d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 81007d8:	4b13      	ldr	r3, [pc, #76]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007da:	2204      	movs	r2, #4
 81007dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 81007de:	4b12      	ldr	r3, [pc, #72]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007e0:	2200      	movs	r2, #0
 81007e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 81007e4:	4b10      	ldr	r3, [pc, #64]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007e6:	2204      	movs	r2, #4
 81007e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 81007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007ec:	2200      	movs	r2, #0
 81007ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007f2:	2204      	movs	r2, #4
 81007f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 81007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007f8:	2200      	movs	r2, #0
 81007fa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 81007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 81007fe:	2200      	movs	r2, #0
 8100800:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8100802:	4b09      	ldr	r3, [pc, #36]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 8100804:	2200      	movs	r2, #0
 8100806:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100808:	4b07      	ldr	r3, [pc, #28]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 810080a:	2200      	movs	r2, #0
 810080c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 810080e:	4b06      	ldr	r3, [pc, #24]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 8100810:	2204      	movs	r2, #4
 8100812:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8100814:	4804      	ldr	r0, [pc, #16]	@ (8100828 <MX_FDCAN1_Init+0xc0>)
 8100816:	f002 f923 	bl	8102a60 <HAL_FDCAN_Init>
 810081a:	4603      	mov	r3, r0
 810081c:	2b00      	cmp	r3, #0
 810081e:	d001      	beq.n	8100824 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8100820:	f000 fbbe 	bl	8100fa0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8100824:	bf00      	nop
 8100826:	bd80      	pop	{r7, pc}
 8100828:	100001d4 	.word	0x100001d4
 810082c:	4000a000 	.word	0x4000a000

08100830 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8100830:	b580      	push	{r7, lr}
 8100832:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8100834:	4b2e      	ldr	r3, [pc, #184]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100836:	4a2f      	ldr	r2, [pc, #188]	@ (81008f4 <MX_FDCAN2_Init+0xc4>)
 8100838:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 810083a:	4b2d      	ldr	r3, [pc, #180]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 810083c:	2200      	movs	r2, #0
 810083e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8100840:	4b2b      	ldr	r3, [pc, #172]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100842:	2200      	movs	r2, #0
 8100844:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8100846:	4b2a      	ldr	r3, [pc, #168]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100848:	2200      	movs	r2, #0
 810084a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 810084c:	4b28      	ldr	r3, [pc, #160]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 810084e:	2200      	movs	r2, #0
 8100850:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8100852:	4b27      	ldr	r3, [pc, #156]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100854:	2200      	movs	r2, #0
 8100856:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8100858:	4b25      	ldr	r3, [pc, #148]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 810085a:	2210      	movs	r2, #16
 810085c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 810085e:	4b24      	ldr	r3, [pc, #144]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100860:	2201      	movs	r2, #1
 8100862:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8100864:	4b22      	ldr	r3, [pc, #136]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100866:	2201      	movs	r2, #1
 8100868:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 810086a:	4b21      	ldr	r3, [pc, #132]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 810086c:	2201      	movs	r2, #1
 810086e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8100870:	4b1f      	ldr	r3, [pc, #124]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100872:	2201      	movs	r2, #1
 8100874:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8100876:	4b1e      	ldr	r3, [pc, #120]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100878:	2201      	movs	r2, #1
 810087a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 810087c:	4b1c      	ldr	r3, [pc, #112]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 810087e:	2201      	movs	r2, #1
 8100880:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8100882:	4b1b      	ldr	r3, [pc, #108]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100884:	2201      	movs	r2, #1
 8100886:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8100888:	4b19      	ldr	r3, [pc, #100]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 810088a:	2200      	movs	r2, #0
 810088c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 810088e:	4b18      	ldr	r3, [pc, #96]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100890:	2200      	movs	r2, #0
 8100892:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8100894:	4b16      	ldr	r3, [pc, #88]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 8100896:	2200      	movs	r2, #0
 8100898:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 810089a:	4b15      	ldr	r3, [pc, #84]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 810089c:	2200      	movs	r2, #0
 810089e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 81008a0:	4b13      	ldr	r3, [pc, #76]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008a2:	2204      	movs	r2, #4
 81008a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 81008a6:	4b12      	ldr	r3, [pc, #72]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008a8:	2200      	movs	r2, #0
 81008aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 81008ac:	4b10      	ldr	r3, [pc, #64]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008ae:	2204      	movs	r2, #4
 81008b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 81008b2:	4b0f      	ldr	r3, [pc, #60]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008b4:	2200      	movs	r2, #0
 81008b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81008b8:	4b0d      	ldr	r3, [pc, #52]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008ba:	2204      	movs	r2, #4
 81008bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 81008be:	4b0c      	ldr	r3, [pc, #48]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008c0:	2200      	movs	r2, #0
 81008c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 81008c4:	4b0a      	ldr	r3, [pc, #40]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008c6:	2200      	movs	r2, #0
 81008c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 81008ca:	4b09      	ldr	r3, [pc, #36]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008cc:	2200      	movs	r2, #0
 81008ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 81008d0:	4b07      	ldr	r3, [pc, #28]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008d2:	2200      	movs	r2, #0
 81008d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 81008d6:	4b06      	ldr	r3, [pc, #24]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008d8:	2204      	movs	r2, #4
 81008da:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 81008dc:	4804      	ldr	r0, [pc, #16]	@ (81008f0 <MX_FDCAN2_Init+0xc0>)
 81008de:	f002 f8bf 	bl	8102a60 <HAL_FDCAN_Init>
 81008e2:	4603      	mov	r3, r0
 81008e4:	2b00      	cmp	r3, #0
 81008e6:	d001      	beq.n	81008ec <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 81008e8:	f000 fb5a 	bl	8100fa0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 81008ec:	bf00      	nop
 81008ee:	bd80      	pop	{r7, pc}
 81008f0:	10000274 	.word	0x10000274
 81008f4:	4000a400 	.word	0x4000a400

081008f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 81008f8:	b580      	push	{r7, lr}
 81008fa:	b09a      	sub	sp, #104	@ 0x68
 81008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 81008fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8100902:	2234      	movs	r2, #52	@ 0x34
 8100904:	2100      	movs	r1, #0
 8100906:	4618      	mov	r0, r3
 8100908:	f009 fc37 	bl	810a17a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 810090c:	463b      	mov	r3, r7
 810090e:	2234      	movs	r2, #52	@ 0x34
 8100910:	2100      	movs	r1, #0
 8100912:	4618      	mov	r0, r3
 8100914:	f009 fc31 	bl	810a17a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8100918:	4b4e      	ldr	r3, [pc, #312]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 810091a:	4a4f      	ldr	r2, [pc, #316]	@ (8100a58 <MX_LTDC_Init+0x160>)
 810091c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 810091e:	4b4d      	ldr	r3, [pc, #308]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100920:	2200      	movs	r2, #0
 8100922:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8100924:	4b4b      	ldr	r3, [pc, #300]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100926:	2200      	movs	r2, #0
 8100928:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 810092a:	4b4a      	ldr	r3, [pc, #296]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 810092c:	2200      	movs	r2, #0
 810092e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8100930:	4b48      	ldr	r3, [pc, #288]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100932:	2200      	movs	r2, #0
 8100934:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8100936:	4b47      	ldr	r3, [pc, #284]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100938:	2207      	movs	r2, #7
 810093a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 810093c:	4b45      	ldr	r3, [pc, #276]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 810093e:	2203      	movs	r2, #3
 8100940:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8100942:	4b44      	ldr	r3, [pc, #272]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100944:	220e      	movs	r2, #14
 8100946:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8100948:	4b42      	ldr	r3, [pc, #264]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 810094a:	2205      	movs	r2, #5
 810094c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 810094e:	4b41      	ldr	r3, [pc, #260]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100950:	f240 228e 	movw	r2, #654	@ 0x28e
 8100954:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8100956:	4b3f      	ldr	r3, [pc, #252]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100958:	f240 12e5 	movw	r2, #485	@ 0x1e5
 810095c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 810095e:	4b3d      	ldr	r3, [pc, #244]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100960:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8100964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8100966:	4b3b      	ldr	r3, [pc, #236]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100968:	f240 12e7 	movw	r2, #487	@ 0x1e7
 810096c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 810096e:	4b39      	ldr	r3, [pc, #228]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100970:	2200      	movs	r2, #0
 8100972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8100976:	4b37      	ldr	r3, [pc, #220]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100978:	2200      	movs	r2, #0
 810097a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 810097e:	4b35      	ldr	r3, [pc, #212]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100980:	2200      	movs	r2, #0
 8100982:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8100986:	4833      	ldr	r0, [pc, #204]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100988:	f002 fd9a 	bl	81034c0 <HAL_LTDC_Init>
 810098c:	4603      	mov	r3, r0
 810098e:	2b00      	cmp	r3, #0
 8100990:	d001      	beq.n	8100996 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8100992:	f000 fb05 	bl	8100fa0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8100996:	2300      	movs	r3, #0
 8100998:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 810099a:	2300      	movs	r3, #0
 810099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 810099e:	2300      	movs	r3, #0
 81009a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 81009a2:	2300      	movs	r3, #0
 81009a4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 81009a6:	2300      	movs	r3, #0
 81009a8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 81009aa:	2300      	movs	r3, #0
 81009ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 81009ae:	2300      	movs	r3, #0
 81009b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 81009b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81009b6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 81009b8:	2305      	movs	r3, #5
 81009ba:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 81009bc:	2300      	movs	r3, #0
 81009be:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 81009c0:	2300      	movs	r3, #0
 81009c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 81009c4:	2300      	movs	r3, #0
 81009c6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 81009c8:	2300      	movs	r3, #0
 81009ca:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 81009ce:	2300      	movs	r3, #0
 81009d0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 81009d4:	2300      	movs	r3, #0
 81009d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 81009da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81009de:	2200      	movs	r2, #0
 81009e0:	4619      	mov	r1, r3
 81009e2:	481c      	ldr	r0, [pc, #112]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 81009e4:	f002 fe09 	bl	81035fa <HAL_LTDC_ConfigLayer>
 81009e8:	4603      	mov	r3, r0
 81009ea:	2b00      	cmp	r3, #0
 81009ec:	d001      	beq.n	81009f2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 81009ee:	f000 fad7 	bl	8100fa0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 81009f2:	2300      	movs	r3, #0
 81009f4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 81009f6:	2300      	movs	r3, #0
 81009f8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 81009fa:	2300      	movs	r3, #0
 81009fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 81009fe:	2300      	movs	r3, #0
 8100a00:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8100a02:	2300      	movs	r3, #0
 8100a04:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8100a06:	2300      	movs	r3, #0
 8100a08:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8100a0a:	2300      	movs	r3, #0
 8100a0c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8100a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8100a12:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8100a14:	2305      	movs	r3, #5
 8100a16:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8100a18:	2300      	movs	r3, #0
 8100a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8100a1c:	2300      	movs	r3, #0
 8100a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8100a20:	2300      	movs	r3, #0
 8100a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8100a24:	2300      	movs	r3, #0
 8100a26:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8100a2a:	2300      	movs	r3, #0
 8100a2c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8100a30:	2300      	movs	r3, #0
 8100a32:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8100a36:	463b      	mov	r3, r7
 8100a38:	2201      	movs	r2, #1
 8100a3a:	4619      	mov	r1, r3
 8100a3c:	4805      	ldr	r0, [pc, #20]	@ (8100a54 <MX_LTDC_Init+0x15c>)
 8100a3e:	f002 fddc 	bl	81035fa <HAL_LTDC_ConfigLayer>
 8100a42:	4603      	mov	r3, r0
 8100a44:	2b00      	cmp	r3, #0
 8100a46:	d001      	beq.n	8100a4c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8100a48:	f000 faaa 	bl	8100fa0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8100a4c:	bf00      	nop
 8100a4e:	3768      	adds	r7, #104	@ 0x68
 8100a50:	46bd      	mov	sp, r7
 8100a52:	bd80      	pop	{r7, pc}
 8100a54:	10000314 	.word	0x10000314
 8100a58:	50001000 	.word	0x50001000

08100a5c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100a5c:	b580      	push	{r7, lr}
 8100a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100a60:	4b12      	ldr	r3, [pc, #72]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a62:	4a13      	ldr	r2, [pc, #76]	@ (8100ab0 <MX_QUADSPI_Init+0x54>)
 8100a64:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8100a66:	4b11      	ldr	r3, [pc, #68]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a68:	22ff      	movs	r2, #255	@ 0xff
 8100a6a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a6e:	2201      	movs	r2, #1
 8100a70:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8100a72:	4b0e      	ldr	r3, [pc, #56]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a74:	2200      	movs	r2, #0
 8100a76:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100a78:	4b0c      	ldr	r3, [pc, #48]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a7a:	2201      	movs	r2, #1
 8100a7c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a80:	2200      	movs	r2, #0
 8100a82:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8100a84:	4b09      	ldr	r3, [pc, #36]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a86:	2200      	movs	r2, #0
 8100a88:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8100a8a:	4b08      	ldr	r3, [pc, #32]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a8c:	2200      	movs	r2, #0
 8100a8e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8100a90:	4b06      	ldr	r3, [pc, #24]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a92:	2200      	movs	r2, #0
 8100a94:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8100a96:	4805      	ldr	r0, [pc, #20]	@ (8100aac <MX_QUADSPI_Init+0x50>)
 8100a98:	f004 f852 	bl	8104b40 <HAL_QSPI_Init>
 8100a9c:	4603      	mov	r3, r0
 8100a9e:	2b00      	cmp	r3, #0
 8100aa0:	d001      	beq.n	8100aa6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8100aa2:	f000 fa7d 	bl	8100fa0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100aa6:	bf00      	nop
 8100aa8:	bd80      	pop	{r7, pc}
 8100aaa:	bf00      	nop
 8100aac:	100003bc 	.word	0x100003bc
 8100ab0:	52005000 	.word	0x52005000

08100ab4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8100ab4:	b580      	push	{r7, lr}
 8100ab6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8100ab8:	4b58      	ldr	r3, [pc, #352]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100aba:	4a59      	ldr	r2, [pc, #356]	@ (8100c20 <MX_SAI2_Init+0x16c>)
 8100abc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100abe:	4b57      	ldr	r3, [pc, #348]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100ac0:	2200      	movs	r2, #0
 8100ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8100ac4:	4b55      	ldr	r3, [pc, #340]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100ac6:	2200      	movs	r2, #0
 8100ac8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8100aca:	4b54      	ldr	r3, [pc, #336]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100acc:	2240      	movs	r2, #64	@ 0x40
 8100ace:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100ad0:	4b52      	ldr	r3, [pc, #328]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100ad2:	2200      	movs	r2, #0
 8100ad4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100ad6:	4b51      	ldr	r3, [pc, #324]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100ad8:	2200      	movs	r2, #0
 8100ada:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8100adc:	4b4f      	ldr	r3, [pc, #316]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100ade:	2200      	movs	r2, #0
 8100ae0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100ae4:	2200      	movs	r2, #0
 8100ae6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100aea:	2200      	movs	r2, #0
 8100aec:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100aee:	4b4b      	ldr	r3, [pc, #300]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100af0:	2200      	movs	r2, #0
 8100af2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100af4:	4b49      	ldr	r3, [pc, #292]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100af6:	4a4b      	ldr	r2, [pc, #300]	@ (8100c24 <MX_SAI2_Init+0x170>)
 8100af8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100afa:	4b48      	ldr	r3, [pc, #288]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100afc:	2200      	movs	r2, #0
 8100afe:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8100b00:	4b46      	ldr	r3, [pc, #280]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b02:	2200      	movs	r2, #0
 8100b04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8100b06:	4b45      	ldr	r3, [pc, #276]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b08:	2200      	movs	r2, #0
 8100b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100b0c:	4b43      	ldr	r3, [pc, #268]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b0e:	2200      	movs	r2, #0
 8100b10:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8100b12:	4b42      	ldr	r3, [pc, #264]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b14:	2200      	movs	r2, #0
 8100b16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8100b1a:	4b40      	ldr	r3, [pc, #256]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b1c:	2201      	movs	r2, #1
 8100b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100b20:	4b3e      	ldr	r3, [pc, #248]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100b26:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8100b28:	4b3c      	ldr	r3, [pc, #240]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b2a:	2208      	movs	r2, #8
 8100b2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8100b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b30:	2201      	movs	r2, #1
 8100b32:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100b34:	4b39      	ldr	r3, [pc, #228]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b36:	2200      	movs	r2, #0
 8100b38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100b3a:	4b38      	ldr	r3, [pc, #224]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b3c:	2200      	movs	r2, #0
 8100b3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100b40:	4b36      	ldr	r3, [pc, #216]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b42:	2200      	movs	r2, #0
 8100b44:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8100b46:	4b35      	ldr	r3, [pc, #212]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b48:	2200      	movs	r2, #0
 8100b4a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100b4c:	4b33      	ldr	r3, [pc, #204]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b4e:	2200      	movs	r2, #0
 8100b50:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8100b52:	4b32      	ldr	r3, [pc, #200]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b54:	2201      	movs	r2, #1
 8100b56:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8100b58:	4b30      	ldr	r3, [pc, #192]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b5a:	2200      	movs	r2, #0
 8100b5c:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8100b5e:	482f      	ldr	r0, [pc, #188]	@ (8100c1c <MX_SAI2_Init+0x168>)
 8100b60:	f006 ff7e 	bl	8107a60 <HAL_SAI_Init>
 8100b64:	4603      	mov	r3, r0
 8100b66:	2b00      	cmp	r3, #0
 8100b68:	d001      	beq.n	8100b6e <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8100b6a:	f000 fa19 	bl	8100fa0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8100b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100b70:	4a2e      	ldr	r2, [pc, #184]	@ (8100c2c <MX_SAI2_Init+0x178>)
 8100b72:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100b74:	4b2c      	ldr	r3, [pc, #176]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100b76:	2200      	movs	r2, #0
 8100b78:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8100b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100b7c:	2203      	movs	r2, #3
 8100b7e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8100b80:	4b29      	ldr	r3, [pc, #164]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100b82:	2240      	movs	r2, #64	@ 0x40
 8100b84:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100b86:	4b28      	ldr	r3, [pc, #160]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100b88:	2200      	movs	r2, #0
 8100b8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100b8c:	4b26      	ldr	r3, [pc, #152]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100b8e:	2200      	movs	r2, #0
 8100b90:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8100b92:	4b25      	ldr	r3, [pc, #148]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100b94:	2201      	movs	r2, #1
 8100b96:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100b98:	4b23      	ldr	r3, [pc, #140]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100b9a:	2200      	movs	r2, #0
 8100b9c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100b9e:	4b22      	ldr	r3, [pc, #136]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100ba0:	2200      	movs	r2, #0
 8100ba2:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100ba4:	4b20      	ldr	r3, [pc, #128]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100ba6:	2200      	movs	r2, #0
 8100ba8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8100baa:	4b1f      	ldr	r3, [pc, #124]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bac:	2200      	movs	r2, #0
 8100bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8100bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bb2:	2200      	movs	r2, #0
 8100bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bb8:	2200      	movs	r2, #0
 8100bba:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8100bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bbe:	2200      	movs	r2, #0
 8100bc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8100bc4:	4b18      	ldr	r3, [pc, #96]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bc6:	2201      	movs	r2, #1
 8100bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100bca:	4b17      	ldr	r3, [pc, #92]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8100bd2:	4b15      	ldr	r3, [pc, #84]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bd4:	2208      	movs	r2, #8
 8100bd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8100bd8:	4b13      	ldr	r3, [pc, #76]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bda:	2201      	movs	r2, #1
 8100bdc:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100bde:	4b12      	ldr	r3, [pc, #72]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100be0:	2200      	movs	r2, #0
 8100be2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100be4:	4b10      	ldr	r3, [pc, #64]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100be6:	2200      	movs	r2, #0
 8100be8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100bea:	4b0f      	ldr	r3, [pc, #60]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bec:	2200      	movs	r2, #0
 8100bee:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8100bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bf2:	2200      	movs	r2, #0
 8100bf4:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bf8:	2200      	movs	r2, #0
 8100bfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8100bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100bfe:	2201      	movs	r2, #1
 8100c00:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8100c02:	4b09      	ldr	r3, [pc, #36]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100c04:	2200      	movs	r2, #0
 8100c06:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8100c08:	4807      	ldr	r0, [pc, #28]	@ (8100c28 <MX_SAI2_Init+0x174>)
 8100c0a:	f006 ff29 	bl	8107a60 <HAL_SAI_Init>
 8100c0e:	4603      	mov	r3, r0
 8100c10:	2b00      	cmp	r3, #0
 8100c12:	d001      	beq.n	8100c18 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8100c14:	f000 f9c4 	bl	8100fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8100c18:	bf00      	nop
 8100c1a:	bd80      	pop	{r7, pc}
 8100c1c:	10000408 	.word	0x10000408
 8100c20:	40015c04 	.word	0x40015c04
 8100c24:	0002ee00 	.word	0x0002ee00
 8100c28:	100004a0 	.word	0x100004a0
 8100c2c:	40015c24 	.word	0x40015c24

08100c30 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8100c30:	b580      	push	{r7, lr}
 8100c32:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8100c34:	4b0e      	ldr	r3, [pc, #56]	@ (8100c70 <MX_SDMMC1_MMC_Init+0x40>)
 8100c36:	4a0f      	ldr	r2, [pc, #60]	@ (8100c74 <MX_SDMMC1_MMC_Init+0x44>)
 8100c38:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8100c70 <MX_SDMMC1_MMC_Init+0x40>)
 8100c3c:	2200      	movs	r2, #0
 8100c3e:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100c40:	4b0b      	ldr	r3, [pc, #44]	@ (8100c70 <MX_SDMMC1_MMC_Init+0x40>)
 8100c42:	2200      	movs	r2, #0
 8100c44:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8100c46:	4b0a      	ldr	r3, [pc, #40]	@ (8100c70 <MX_SDMMC1_MMC_Init+0x40>)
 8100c48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8100c4c:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100c4e:	4b08      	ldr	r3, [pc, #32]	@ (8100c70 <MX_SDMMC1_MMC_Init+0x40>)
 8100c50:	2200      	movs	r2, #0
 8100c52:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8100c54:	4b06      	ldr	r3, [pc, #24]	@ (8100c70 <MX_SDMMC1_MMC_Init+0x40>)
 8100c56:	2200      	movs	r2, #0
 8100c58:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8100c5a:	4805      	ldr	r0, [pc, #20]	@ (8100c70 <MX_SDMMC1_MMC_Init+0x40>)
 8100c5c:	f002 fe7e 	bl	810395c <HAL_MMC_Init>
 8100c60:	4603      	mov	r3, r0
 8100c62:	2b00      	cmp	r3, #0
 8100c64:	d001      	beq.n	8100c6a <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8100c66:	f000 f99b 	bl	8100fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100c6a:	bf00      	nop
 8100c6c:	bd80      	pop	{r7, pc}
 8100c6e:	bf00      	nop
 8100c70:	10000538 	.word	0x10000538
 8100c74:	52007000 	.word	0x52007000

08100c78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100c78:	b580      	push	{r7, lr}
 8100c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100c7c:	4b22      	ldr	r3, [pc, #136]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100c7e:	4a23      	ldr	r2, [pc, #140]	@ (8100d0c <MX_USART3_UART_Init+0x94>)
 8100c80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100c82:	4b21      	ldr	r3, [pc, #132]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100c88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100c8c:	2200      	movs	r2, #0
 8100c8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100c90:	4b1d      	ldr	r3, [pc, #116]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100c92:	2200      	movs	r2, #0
 8100c94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100c96:	4b1c      	ldr	r3, [pc, #112]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100c98:	2200      	movs	r2, #0
 8100c9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100c9e:	220c      	movs	r2, #12
 8100ca0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100ca2:	4b19      	ldr	r3, [pc, #100]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100ca4:	2200      	movs	r2, #0
 8100ca6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100ca8:	4b17      	ldr	r3, [pc, #92]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100caa:	2200      	movs	r2, #0
 8100cac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100cae:	4b16      	ldr	r3, [pc, #88]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100cb0:	2200      	movs	r2, #0
 8100cb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100cb4:	4b14      	ldr	r3, [pc, #80]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100cb6:	2200      	movs	r2, #0
 8100cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100cba:	4b13      	ldr	r3, [pc, #76]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100cbc:	2200      	movs	r2, #0
 8100cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100cc0:	4811      	ldr	r0, [pc, #68]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100cc2:	f007 f9ed 	bl	81080a0 <HAL_UART_Init>
 8100cc6:	4603      	mov	r3, r0
 8100cc8:	2b00      	cmp	r3, #0
 8100cca:	d001      	beq.n	8100cd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100ccc:	f000 f968 	bl	8100fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100cd0:	2100      	movs	r1, #0
 8100cd2:	480d      	ldr	r0, [pc, #52]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100cd4:	f008 f9f4 	bl	81090c0 <HAL_UARTEx_SetTxFifoThreshold>
 8100cd8:	4603      	mov	r3, r0
 8100cda:	2b00      	cmp	r3, #0
 8100cdc:	d001      	beq.n	8100ce2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100cde:	f000 f95f 	bl	8100fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100ce2:	2100      	movs	r1, #0
 8100ce4:	4808      	ldr	r0, [pc, #32]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100ce6:	f008 fa29 	bl	810913c <HAL_UARTEx_SetRxFifoThreshold>
 8100cea:	4603      	mov	r3, r0
 8100cec:	2b00      	cmp	r3, #0
 8100cee:	d001      	beq.n	8100cf4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100cf0:	f000 f956 	bl	8100fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100cf4:	4804      	ldr	r0, [pc, #16]	@ (8100d08 <MX_USART3_UART_Init+0x90>)
 8100cf6:	f008 f9aa 	bl	810904e <HAL_UARTEx_DisableFifoMode>
 8100cfa:	4603      	mov	r3, r0
 8100cfc:	2b00      	cmp	r3, #0
 8100cfe:	d001      	beq.n	8100d04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100d00:	f000 f94e 	bl	8100fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100d04:	bf00      	nop
 8100d06:	bd80      	pop	{r7, pc}
 8100d08:	100007b0 	.word	0x100007b0
 8100d0c:	40004800 	.word	0x40004800

08100d10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8100d10:	b580      	push	{r7, lr}
 8100d12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8100d14:	4b15      	ldr	r3, [pc, #84]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d16:	4a16      	ldr	r2, [pc, #88]	@ (8100d70 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8100d18:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8100d1a:	4b14      	ldr	r3, [pc, #80]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d1c:	2209      	movs	r2, #9
 8100d1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8100d20:	4b12      	ldr	r3, [pc, #72]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d22:	2202      	movs	r2, #2
 8100d24:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8100d26:	4b11      	ldr	r3, [pc, #68]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d28:	2200      	movs	r2, #0
 8100d2a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8100d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d2e:	2202      	movs	r2, #2
 8100d30:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8100d32:	4b0e      	ldr	r3, [pc, #56]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d34:	2200      	movs	r2, #0
 8100d36:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8100d38:	4b0c      	ldr	r3, [pc, #48]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d3a:	2200      	movs	r2, #0
 8100d3c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8100d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d40:	2200      	movs	r2, #0
 8100d42:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8100d44:	4b09      	ldr	r3, [pc, #36]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d46:	2201      	movs	r2, #1
 8100d48:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8100d4a:	4b08      	ldr	r3, [pc, #32]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d4c:	2201      	movs	r2, #1
 8100d4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8100d50:	4b06      	ldr	r3, [pc, #24]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d52:	2200      	movs	r2, #0
 8100d54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8100d56:	4805      	ldr	r0, [pc, #20]	@ (8100d6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100d58:	f003 fd2a 	bl	81047b0 <HAL_PCD_Init>
 8100d5c:	4603      	mov	r3, r0
 8100d5e:	2b00      	cmp	r3, #0
 8100d60:	d001      	beq.n	8100d66 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8100d62:	f000 f91d 	bl	8100fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8100d66:	bf00      	nop
 8100d68:	bd80      	pop	{r7, pc}
 8100d6a:	bf00      	nop
 8100d6c:	10000844 	.word	0x10000844
 8100d70:	40080000 	.word	0x40080000

08100d74 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8100d74:	b580      	push	{r7, lr}
 8100d76:	b088      	sub	sp, #32
 8100d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8100d7a:	1d3b      	adds	r3, r7, #4
 8100d7c:	2200      	movs	r2, #0
 8100d7e:	601a      	str	r2, [r3, #0]
 8100d80:	605a      	str	r2, [r3, #4]
 8100d82:	609a      	str	r2, [r3, #8]
 8100d84:	60da      	str	r2, [r3, #12]
 8100d86:	611a      	str	r2, [r3, #16]
 8100d88:	615a      	str	r2, [r3, #20]
 8100d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8100e0c <MX_FMC_Init+0x98>)
 8100d90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100d92:	4b1d      	ldr	r3, [pc, #116]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100d94:	2201      	movs	r2, #1
 8100d96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8100d98:	4b1b      	ldr	r3, [pc, #108]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8100d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100da0:	2204      	movs	r2, #4
 8100da2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8100da4:	4b18      	ldr	r3, [pc, #96]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100da6:	2210      	movs	r2, #16
 8100da8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8100daa:	4b17      	ldr	r3, [pc, #92]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100dac:	2240      	movs	r2, #64	@ 0x40
 8100dae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100db0:	4b15      	ldr	r3, [pc, #84]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100db2:	2280      	movs	r2, #128	@ 0x80
 8100db4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8100db6:	4b14      	ldr	r3, [pc, #80]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100db8:	2200      	movs	r2, #0
 8100dba:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8100dbc:	4b12      	ldr	r3, [pc, #72]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100dbe:	2200      	movs	r2, #0
 8100dc0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8100dc2:	4b11      	ldr	r3, [pc, #68]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100dc4:	2200      	movs	r2, #0
 8100dc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8100dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100dca:	2200      	movs	r2, #0
 8100dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8100dce:	2310      	movs	r3, #16
 8100dd0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8100dd2:	2310      	movs	r3, #16
 8100dd4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8100dd6:	2310      	movs	r3, #16
 8100dd8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8100dda:	2310      	movs	r3, #16
 8100ddc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8100dde:	2310      	movs	r3, #16
 8100de0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8100de2:	2310      	movs	r3, #16
 8100de4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8100de6:	2310      	movs	r3, #16
 8100de8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8100dea:	1d3b      	adds	r3, r7, #4
 8100dec:	4619      	mov	r1, r3
 8100dee:	4806      	ldr	r0, [pc, #24]	@ (8100e08 <MX_FMC_Init+0x94>)
 8100df0:	f007 f91a 	bl	8108028 <HAL_SDRAM_Init>
 8100df4:	4603      	mov	r3, r0
 8100df6:	2b00      	cmp	r3, #0
 8100df8:	d001      	beq.n	8100dfe <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8100dfa:	f000 f8d1 	bl	8100fa0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100dfe:	bf00      	nop
 8100e00:	3720      	adds	r7, #32
 8100e02:	46bd      	mov	sp, r7
 8100e04:	bd80      	pop	{r7, pc}
 8100e06:	bf00      	nop
 8100e08:	10000d28 	.word	0x10000d28
 8100e0c:	52004140 	.word	0x52004140

08100e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100e10:	b580      	push	{r7, lr}
 8100e12:	b090      	sub	sp, #64	@ 0x40
 8100e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100e1a:	2200      	movs	r2, #0
 8100e1c:	601a      	str	r2, [r3, #0]
 8100e1e:	605a      	str	r2, [r3, #4]
 8100e20:	609a      	str	r2, [r3, #8]
 8100e22:	60da      	str	r2, [r3, #12]
 8100e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100e26:	4b5c      	ldr	r3, [pc, #368]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e2c:	4a5a      	ldr	r2, [pc, #360]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100e32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e36:	4b58      	ldr	r3, [pc, #352]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8100e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100e44:	4b54      	ldr	r3, [pc, #336]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e4a:	4a53      	ldr	r2, [pc, #332]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e4c:	f043 0302 	orr.w	r3, r3, #2
 8100e50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e54:	4b50      	ldr	r3, [pc, #320]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e5a:	f003 0302 	and.w	r3, r3, #2
 8100e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8100e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8100e62:	4b4d      	ldr	r3, [pc, #308]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e68:	4a4b      	ldr	r2, [pc, #300]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8100e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e72:	4b49      	ldr	r3, [pc, #292]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8100e7c:	623b      	str	r3, [r7, #32]
 8100e7e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100e80:	4b45      	ldr	r3, [pc, #276]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e86:	4a44      	ldr	r2, [pc, #272]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e90:	4b41      	ldr	r3, [pc, #260]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100e9a:	61fb      	str	r3, [r7, #28]
 8100e9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100ea6:	f043 0304 	orr.w	r3, r3, #4
 8100eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100eae:	4b3a      	ldr	r3, [pc, #232]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100eb4:	f003 0304 	and.w	r3, r3, #4
 8100eb8:	61bb      	str	r3, [r7, #24]
 8100eba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100ebc:	4b36      	ldr	r3, [pc, #216]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ec2:	4a35      	ldr	r2, [pc, #212]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100ec4:	f043 0310 	orr.w	r3, r3, #16
 8100ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ecc:	4b32      	ldr	r3, [pc, #200]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ed2:	f003 0310 	and.w	r3, r3, #16
 8100ed6:	617b      	str	r3, [r7, #20]
 8100ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100eda:	4b2f      	ldr	r3, [pc, #188]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8100ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100eea:	4b2b      	ldr	r3, [pc, #172]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8100ef4:	613b      	str	r3, [r7, #16]
 8100ef6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100ef8:	4b27      	ldr	r3, [pc, #156]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100efe:	4a26      	ldr	r2, [pc, #152]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100f08:	4b23      	ldr	r3, [pc, #140]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100f12:	60fb      	str	r3, [r7, #12]
 8100f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100f16:	4b20      	ldr	r3, [pc, #128]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f1e:	f043 0308 	orr.w	r3, r3, #8
 8100f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100f26:	4b1c      	ldr	r3, [pc, #112]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f2c:	f003 0308 	and.w	r3, r3, #8
 8100f30:	60bb      	str	r3, [r7, #8]
 8100f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100f34:	4b18      	ldr	r3, [pc, #96]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f3a:	4a17      	ldr	r2, [pc, #92]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f3c:	f043 0301 	orr.w	r3, r3, #1
 8100f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100f44:	4b14      	ldr	r3, [pc, #80]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f4a:	f003 0301 	and.w	r3, r3, #1
 8100f4e:	607b      	str	r3, [r7, #4]
 8100f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100f52:	4b11      	ldr	r3, [pc, #68]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f58:	4a0f      	ldr	r2, [pc, #60]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f5a:	f043 0320 	orr.w	r3, r3, #32
 8100f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100f62:	4b0d      	ldr	r3, [pc, #52]	@ (8100f98 <MX_GPIO_Init+0x188>)
 8100f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100f68:	f003 0320 	and.w	r3, r3, #32
 8100f6c:	603b      	str	r3, [r7, #0]
 8100f6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8100f70:	2330      	movs	r3, #48	@ 0x30
 8100f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f74:	2302      	movs	r3, #2
 8100f76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f78:	2300      	movs	r3, #0
 8100f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f7c:	2300      	movs	r3, #0
 8100f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8100f80:	230a      	movs	r3, #10
 8100f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100f88:	4619      	mov	r1, r3
 8100f8a:	4804      	ldr	r0, [pc, #16]	@ (8100f9c <MX_GPIO_Init+0x18c>)
 8100f8c:	f002 f8d6 	bl	810313c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100f90:	bf00      	nop
 8100f92:	3740      	adds	r7, #64	@ 0x40
 8100f94:	46bd      	mov	sp, r7
 8100f96:	bd80      	pop	{r7, pc}
 8100f98:	58024400 	.word	0x58024400
 8100f9c:	58021000 	.word	0x58021000

08100fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100fa0:	b480      	push	{r7}
 8100fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100fa4:	b672      	cpsid	i
}
 8100fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100fa8:	bf00      	nop
 8100faa:	e7fd      	b.n	8100fa8 <Error_Handler+0x8>

08100fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100fac:	b480      	push	{r7}
 8100fae:	b083      	sub	sp, #12
 8100fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8100fdc <HAL_MspInit+0x30>)
 8100fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100fb8:	4a08      	ldr	r2, [pc, #32]	@ (8100fdc <HAL_MspInit+0x30>)
 8100fba:	f043 0302 	orr.w	r3, r3, #2
 8100fbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100fc2:	4b06      	ldr	r3, [pc, #24]	@ (8100fdc <HAL_MspInit+0x30>)
 8100fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100fc8:	f003 0302 	and.w	r3, r3, #2
 8100fcc:	607b      	str	r3, [r7, #4]
 8100fce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100fd0:	bf00      	nop
 8100fd2:	370c      	adds	r7, #12
 8100fd4:	46bd      	mov	sp, r7
 8100fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fda:	4770      	bx	lr
 8100fdc:	58024400 	.word	0x58024400

08100fe0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8100fe0:	b580      	push	{r7, lr}
 8100fe2:	b092      	sub	sp, #72	@ 0x48
 8100fe4:	af00      	add	r7, sp, #0
 8100fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fe8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8100fec:	2200      	movs	r2, #0
 8100fee:	601a      	str	r2, [r3, #0]
 8100ff0:	605a      	str	r2, [r3, #4]
 8100ff2:	609a      	str	r2, [r3, #8]
 8100ff4:	60da      	str	r2, [r3, #12]
 8100ff6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8100ff8:	687b      	ldr	r3, [r7, #4]
 8100ffa:	681b      	ldr	r3, [r3, #0]
 8100ffc:	4a87      	ldr	r2, [pc, #540]	@ (810121c <HAL_ETH_MspInit+0x23c>)
 8100ffe:	4293      	cmp	r3, r2
 8101000:	f040 8108 	bne.w	8101214 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8101004:	4b86      	ldr	r3, [pc, #536]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101006:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810100a:	4a85      	ldr	r2, [pc, #532]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 810100c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101010:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101014:	4b82      	ldr	r3, [pc, #520]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101016:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810101a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810101e:	633b      	str	r3, [r7, #48]	@ 0x30
 8101020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8101022:	4b7f      	ldr	r3, [pc, #508]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101028:	4a7d      	ldr	r2, [pc, #500]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 810102a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810102e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101032:	4b7b      	ldr	r3, [pc, #492]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810103e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8101040:	4b77      	ldr	r3, [pc, #476]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101042:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101046:	4a76      	ldr	r2, [pc, #472]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810104c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101050:	4b73      	ldr	r3, [pc, #460]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101052:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810105a:	62bb      	str	r3, [r7, #40]	@ 0x28
 810105c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810105e:	4b70      	ldr	r3, [pc, #448]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101064:	4a6e      	ldr	r2, [pc, #440]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810106a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810106e:	4b6c      	ldr	r3, [pc, #432]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101078:	627b      	str	r3, [r7, #36]	@ 0x24
 810107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 810107c:	4b68      	ldr	r3, [pc, #416]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 810107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101082:	4a67      	ldr	r2, [pc, #412]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101084:	f043 0310 	orr.w	r3, r3, #16
 8101088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810108c:	4b64      	ldr	r3, [pc, #400]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 810108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101092:	f003 0310 	and.w	r3, r3, #16
 8101096:	623b      	str	r3, [r7, #32]
 8101098:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 810109a:	4b61      	ldr	r3, [pc, #388]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 810109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010a0:	4a5f      	ldr	r2, [pc, #380]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010aa:	4b5d      	ldr	r3, [pc, #372]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81010b4:	61fb      	str	r3, [r7, #28]
 81010b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81010b8:	4b59      	ldr	r3, [pc, #356]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010be:	4a58      	ldr	r2, [pc, #352]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010c0:	f043 0304 	orr.w	r3, r3, #4
 81010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010c8:	4b55      	ldr	r3, [pc, #340]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010ce:	f003 0304 	and.w	r3, r3, #4
 81010d2:	61bb      	str	r3, [r7, #24]
 81010d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81010d6:	4b52      	ldr	r3, [pc, #328]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010dc:	4a50      	ldr	r2, [pc, #320]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010e6:	4b4e      	ldr	r3, [pc, #312]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81010f0:	617b      	str	r3, [r7, #20]
 81010f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81010f4:	4b4a      	ldr	r3, [pc, #296]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010fa:	4a49      	ldr	r2, [pc, #292]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 81010fc:	f043 0301 	orr.w	r3, r3, #1
 8101100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101104:	4b46      	ldr	r3, [pc, #280]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810110a:	f003 0301 	and.w	r3, r3, #1
 810110e:	613b      	str	r3, [r7, #16]
 8101110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101112:	4b43      	ldr	r3, [pc, #268]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101118:	4a41      	ldr	r2, [pc, #260]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 810111a:	f043 0302 	orr.w	r3, r3, #2
 810111e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101122:	4b3f      	ldr	r3, [pc, #252]	@ (8101220 <HAL_ETH_MspInit+0x240>)
 8101124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101128:	f003 0302 	and.w	r3, r3, #2
 810112c:	60fb      	str	r3, [r7, #12]
 810112e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8101130:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8101134:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101136:	2302      	movs	r3, #2
 8101138:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810113a:	2300      	movs	r3, #0
 810113c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810113e:	2300      	movs	r3, #0
 8101140:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101142:	230b      	movs	r3, #11
 8101144:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101146:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810114a:	4619      	mov	r1, r3
 810114c:	4835      	ldr	r0, [pc, #212]	@ (8101224 <HAL_ETH_MspInit+0x244>)
 810114e:	f001 fff5 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8101152:	2304      	movs	r3, #4
 8101154:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101156:	2302      	movs	r3, #2
 8101158:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810115a:	2300      	movs	r3, #0
 810115c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810115e:	2300      	movs	r3, #0
 8101160:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101162:	230b      	movs	r3, #11
 8101164:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8101166:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810116a:	4619      	mov	r1, r3
 810116c:	482e      	ldr	r0, [pc, #184]	@ (8101228 <HAL_ETH_MspInit+0x248>)
 810116e:	f001 ffe5 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8101172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8101176:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101178:	2302      	movs	r3, #2
 810117a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810117c:	2300      	movs	r3, #0
 810117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101180:	2300      	movs	r3, #0
 8101182:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101184:	230b      	movs	r3, #11
 8101186:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8101188:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810118c:	4619      	mov	r1, r3
 810118e:	4827      	ldr	r0, [pc, #156]	@ (810122c <HAL_ETH_MspInit+0x24c>)
 8101190:	f001 ffd4 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8101194:	233e      	movs	r3, #62	@ 0x3e
 8101196:	637b      	str	r3, [r7, #52]	@ 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101198:	2302      	movs	r3, #2
 810119a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810119c:	2300      	movs	r3, #0
 810119e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011a0:	2300      	movs	r3, #0
 81011a2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81011a4:	230b      	movs	r3, #11
 81011a6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81011a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81011ac:	4619      	mov	r1, r3
 81011ae:	4820      	ldr	r0, [pc, #128]	@ (8101230 <HAL_ETH_MspInit+0x250>)
 81011b0:	f001 ffc4 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 81011b4:	230c      	movs	r3, #12
 81011b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011b8:	2302      	movs	r3, #2
 81011ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011bc:	2300      	movs	r3, #0
 81011be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011c0:	2300      	movs	r3, #0
 81011c2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81011c4:	230b      	movs	r3, #11
 81011c6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81011c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81011cc:	4619      	mov	r1, r3
 81011ce:	4819      	ldr	r0, [pc, #100]	@ (8101234 <HAL_ETH_MspInit+0x254>)
 81011d0:	f001 ffb4 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 81011d4:	2386      	movs	r3, #134	@ 0x86
 81011d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011d8:	2302      	movs	r3, #2
 81011da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011dc:	2300      	movs	r3, #0
 81011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011e0:	2300      	movs	r3, #0
 81011e2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81011e4:	230b      	movs	r3, #11
 81011e6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81011e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 81011ec:	4619      	mov	r1, r3
 81011ee:	4812      	ldr	r0, [pc, #72]	@ (8101238 <HAL_ETH_MspInit+0x258>)
 81011f0:	f001 ffa4 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 81011f4:	2303      	movs	r3, #3
 81011f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011f8:	2302      	movs	r3, #2
 81011fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011fc:	2300      	movs	r3, #0
 81011fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101200:	2300      	movs	r3, #0
 8101202:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101204:	230b      	movs	r3, #11
 8101206:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101208:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810120c:	4619      	mov	r1, r3
 810120e:	480b      	ldr	r0, [pc, #44]	@ (810123c <HAL_ETH_MspInit+0x25c>)
 8101210:	f001 ff94 	bl	810313c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8101214:	bf00      	nop
 8101216:	3748      	adds	r7, #72	@ 0x48
 8101218:	46bd      	mov	sp, r7
 810121a:	bd80      	pop	{r7, pc}
 810121c:	40028000 	.word	0x40028000
 8101220:	58024400 	.word	0x58024400
 8101224:	58021800 	.word	0x58021800
 8101228:	58021000 	.word	0x58021000
 810122c:	58022000 	.word	0x58022000
 8101230:	58020800 	.word	0x58020800
 8101234:	58021c00 	.word	0x58021c00
 8101238:	58020000 	.word	0x58020000
 810123c:	58020400 	.word	0x58020400

08101240 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8101240:	b580      	push	{r7, lr}
 8101242:	b0bc      	sub	sp, #240	@ 0xf0
 8101244:	af00      	add	r7, sp, #0
 8101246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101248:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810124c:	2200      	movs	r2, #0
 810124e:	601a      	str	r2, [r3, #0]
 8101250:	605a      	str	r2, [r3, #4]
 8101252:	609a      	str	r2, [r3, #8]
 8101254:	60da      	str	r2, [r3, #12]
 8101256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101258:	f107 0318 	add.w	r3, r7, #24
 810125c:	22c0      	movs	r2, #192	@ 0xc0
 810125e:	2100      	movs	r1, #0
 8101260:	4618      	mov	r0, r3
 8101262:	f008 ff8a 	bl	810a17a <memset>
  if(hfdcan->Instance==FDCAN1)
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	681b      	ldr	r3, [r3, #0]
 810126a:	4a57      	ldr	r2, [pc, #348]	@ (81013c8 <HAL_FDCAN_MspInit+0x188>)
 810126c:	4293      	cmp	r3, r2
 810126e:	d151      	bne.n	8101314 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8101270:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8101274:	f04f 0300 	mov.w	r3, #0
 8101278:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 810127c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8101280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101284:	f107 0318 	add.w	r3, r7, #24
 8101288:	4618      	mov	r0, r3
 810128a:	f003 feeb 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 810128e:	4603      	mov	r3, r0
 8101290:	2b00      	cmp	r3, #0
 8101292:	d001      	beq.n	8101298 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8101294:	f7ff fe84 	bl	8100fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8101298:	4b4c      	ldr	r3, [pc, #304]	@ (81013cc <HAL_FDCAN_MspInit+0x18c>)
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	3301      	adds	r3, #1
 810129e:	4a4b      	ldr	r2, [pc, #300]	@ (81013cc <HAL_FDCAN_MspInit+0x18c>)
 81012a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 81012a2:	4b4a      	ldr	r3, [pc, #296]	@ (81013cc <HAL_FDCAN_MspInit+0x18c>)
 81012a4:	681b      	ldr	r3, [r3, #0]
 81012a6:	2b01      	cmp	r3, #1
 81012a8:	d10e      	bne.n	81012c8 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 81012aa:	4b49      	ldr	r3, [pc, #292]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 81012ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 81012b0:	4a47      	ldr	r2, [pc, #284]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 81012b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81012b6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 81012ba:	4b45      	ldr	r3, [pc, #276]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 81012bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 81012c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81012c4:	617b      	str	r3, [r7, #20]
 81012c6:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 81012c8:	4b41      	ldr	r3, [pc, #260]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 81012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012ce:	4a40      	ldr	r2, [pc, #256]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 81012d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012d8:	4b3d      	ldr	r3, [pc, #244]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 81012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81012e2:	613b      	str	r3, [r7, #16]
 81012e4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN2_RXH14_Pin|FDCAN1_TX_Pin;
 81012e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 81012ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012ee:	2302      	movs	r3, #2
 81012f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012f4:	2300      	movs	r3, #0
 81012f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012fa:	2300      	movs	r3, #0
 81012fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8101300:	2309      	movs	r3, #9
 8101302:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101306:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810130a:	4619      	mov	r1, r3
 810130c:	4831      	ldr	r0, [pc, #196]	@ (81013d4 <HAL_FDCAN_MspInit+0x194>)
 810130e:	f001 ff15 	bl	810313c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8101312:	e055      	b.n	81013c0 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	681b      	ldr	r3, [r3, #0]
 8101318:	4a2f      	ldr	r2, [pc, #188]	@ (81013d8 <HAL_FDCAN_MspInit+0x198>)
 810131a:	4293      	cmp	r3, r2
 810131c:	d150      	bne.n	81013c0 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 810131e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8101322:	f04f 0300 	mov.w	r3, #0
 8101326:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 810132a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810132e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101332:	f107 0318 	add.w	r3, r7, #24
 8101336:	4618      	mov	r0, r3
 8101338:	f003 fe94 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 810133c:	4603      	mov	r3, r0
 810133e:	2b00      	cmp	r3, #0
 8101340:	d001      	beq.n	8101346 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8101342:	f7ff fe2d 	bl	8100fa0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8101346:	4b21      	ldr	r3, [pc, #132]	@ (81013cc <HAL_FDCAN_MspInit+0x18c>)
 8101348:	681b      	ldr	r3, [r3, #0]
 810134a:	3301      	adds	r3, #1
 810134c:	4a1f      	ldr	r2, [pc, #124]	@ (81013cc <HAL_FDCAN_MspInit+0x18c>)
 810134e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8101350:	4b1e      	ldr	r3, [pc, #120]	@ (81013cc <HAL_FDCAN_MspInit+0x18c>)
 8101352:	681b      	ldr	r3, [r3, #0]
 8101354:	2b01      	cmp	r3, #1
 8101356:	d10e      	bne.n	8101376 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8101358:	4b1d      	ldr	r3, [pc, #116]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 810135a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810135e:	4a1c      	ldr	r2, [pc, #112]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 8101360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101364:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8101368:	4b19      	ldr	r3, [pc, #100]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 810136a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810136e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101372:	60fb      	str	r3, [r7, #12]
 8101374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101376:	4b16      	ldr	r3, [pc, #88]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 8101378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810137c:	4a14      	ldr	r2, [pc, #80]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 810137e:	f043 0302 	orr.w	r3, r3, #2
 8101382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101386:	4b12      	ldr	r3, [pc, #72]	@ (81013d0 <HAL_FDCAN_MspInit+0x190>)
 8101388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810138c:	f003 0302 	and.w	r3, r3, #2
 8101390:	60bb      	str	r3, [r7, #8]
 8101392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8101394:	f242 0320 	movw	r3, #8224	@ 0x2020
 8101398:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810139c:	2302      	movs	r3, #2
 810139e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013a2:	2300      	movs	r3, #0
 81013a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013a8:	2300      	movs	r3, #0
 81013aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 81013ae:	2309      	movs	r3, #9
 81013b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81013b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81013b8:	4619      	mov	r1, r3
 81013ba:	4808      	ldr	r0, [pc, #32]	@ (81013dc <HAL_FDCAN_MspInit+0x19c>)
 81013bc:	f001 febe 	bl	810313c <HAL_GPIO_Init>
}
 81013c0:	bf00      	nop
 81013c2:	37f0      	adds	r7, #240	@ 0xf0
 81013c4:	46bd      	mov	sp, r7
 81013c6:	bd80      	pop	{r7, pc}
 81013c8:	4000a000 	.word	0x4000a000
 81013cc:	10000d64 	.word	0x10000d64
 81013d0:	58024400 	.word	0x58024400
 81013d4:	58021c00 	.word	0x58021c00
 81013d8:	4000a400 	.word	0x4000a400
 81013dc:	58020400 	.word	0x58020400

081013e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 81013e0:	b580      	push	{r7, lr}
 81013e2:	b0be      	sub	sp, #248	@ 0xf8
 81013e4:	af00      	add	r7, sp, #0
 81013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81013ec:	2200      	movs	r2, #0
 81013ee:	601a      	str	r2, [r3, #0]
 81013f0:	605a      	str	r2, [r3, #4]
 81013f2:	609a      	str	r2, [r3, #8]
 81013f4:	60da      	str	r2, [r3, #12]
 81013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81013f8:	f107 0320 	add.w	r3, r7, #32
 81013fc:	22c0      	movs	r2, #192	@ 0xc0
 81013fe:	2100      	movs	r1, #0
 8101400:	4618      	mov	r0, r3
 8101402:	f008 feba 	bl	810a17a <memset>
  if(hltdc->Instance==LTDC)
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	681b      	ldr	r3, [r3, #0]
 810140a:	4a66      	ldr	r2, [pc, #408]	@ (81015a4 <HAL_LTDC_MspInit+0x1c4>)
 810140c:	4293      	cmp	r3, r2
 810140e:	f040 80c4 	bne.w	810159a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8101412:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8101416:	f04f 0300 	mov.w	r3, #0
 810141a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 810141e:	2320      	movs	r3, #32
 8101420:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8101422:	23c0      	movs	r3, #192	@ 0xc0
 8101424:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8101426:	2302      	movs	r3, #2
 8101428:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 810142a:	2302      	movs	r3, #2
 810142c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 810142e:	2302      	movs	r3, #2
 8101430:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8101432:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101436:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8101438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810143c:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 810143e:	2300      	movs	r3, #0
 8101440:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101442:	f107 0320 	add.w	r3, r7, #32
 8101446:	4618      	mov	r0, r3
 8101448:	f003 fe0c 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 810144c:	4603      	mov	r3, r0
 810144e:	2b00      	cmp	r3, #0
 8101450:	d001      	beq.n	8101456 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8101452:	f7ff fda5 	bl	8100fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8101456:	4b54      	ldr	r3, [pc, #336]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 8101458:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810145c:	4a52      	ldr	r2, [pc, #328]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 810145e:	f043 0308 	orr.w	r3, r3, #8
 8101462:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8101466:	4b50      	ldr	r3, [pc, #320]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 8101468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810146c:	f003 0308 	and.w	r3, r3, #8
 8101470:	61fb      	str	r3, [r7, #28]
 8101472:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101474:	4b4c      	ldr	r3, [pc, #304]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 8101476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810147a:	4a4b      	ldr	r2, [pc, #300]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 810147c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101484:	4b48      	ldr	r3, [pc, #288]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 8101486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810148a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810148e:	61bb      	str	r3, [r7, #24]
 8101490:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8101492:	4b45      	ldr	r3, [pc, #276]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 8101494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101498:	4a43      	ldr	r2, [pc, #268]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 810149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810149e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014a2:	4b41      	ldr	r3, [pc, #260]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 81014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81014ac:	617b      	str	r3, [r7, #20]
 81014ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81014b0:	4b3d      	ldr	r3, [pc, #244]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 81014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014b6:	4a3c      	ldr	r2, [pc, #240]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 81014b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81014bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014c0:	4b39      	ldr	r3, [pc, #228]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 81014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81014ca:	613b      	str	r3, [r7, #16]
 81014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81014ce:	4b36      	ldr	r3, [pc, #216]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 81014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014d4:	4a34      	ldr	r2, [pc, #208]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 81014d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81014da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014de:	4b32      	ldr	r3, [pc, #200]	@ (81015a8 <HAL_LTDC_MspInit+0x1c8>)
 81014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81014e8:	60fb      	str	r3, [r7, #12]
 81014ea:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 81014ec:	23fc      	movs	r3, #252	@ 0xfc
 81014ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014f2:	2302      	movs	r3, #2
 81014f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014f8:	2300      	movs	r3, #0
 81014fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014fe:	2300      	movs	r3, #0
 8101500:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101504:	230e      	movs	r3, #14
 8101506:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 810150a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810150e:	4619      	mov	r1, r3
 8101510:	4826      	ldr	r0, [pc, #152]	@ (81015ac <HAL_LTDC_MspInit+0x1cc>)
 8101512:	f001 fe13 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8101516:	f24d 2303 	movw	r3, #53763	@ 0xd203
 810151a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810151e:	2302      	movs	r3, #2
 8101520:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101524:	2300      	movs	r3, #0
 8101526:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810152a:	2300      	movs	r3, #0
 810152c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101530:	230e      	movs	r3, #14
 8101532:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101536:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810153a:	4619      	mov	r1, r3
 810153c:	481c      	ldr	r0, [pc, #112]	@ (81015b0 <HAL_LTDC_MspInit+0x1d0>)
 810153e:	f001 fdfd 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8101542:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8101546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810154a:	2302      	movs	r3, #2
 810154c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101550:	2300      	movs	r3, #0
 8101552:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101556:	2300      	movs	r3, #0
 8101558:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 810155c:	230e      	movs	r3, #14
 810155e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101562:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101566:	4619      	mov	r1, r3
 8101568:	4812      	ldr	r0, [pc, #72]	@ (81015b4 <HAL_LTDC_MspInit+0x1d4>)
 810156a:	f001 fde7 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 810156e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101576:	2302      	movs	r3, #2
 8101578:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810157c:	2300      	movs	r3, #0
 810157e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101582:	2300      	movs	r3, #0
 8101584:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101588:	230e      	movs	r3, #14
 810158a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810158e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101592:	4619      	mov	r1, r3
 8101594:	4808      	ldr	r0, [pc, #32]	@ (81015b8 <HAL_LTDC_MspInit+0x1d8>)
 8101596:	f001 fdd1 	bl	810313c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 810159a:	bf00      	nop
 810159c:	37f8      	adds	r7, #248	@ 0xf8
 810159e:	46bd      	mov	sp, r7
 81015a0:	bd80      	pop	{r7, pc}
 81015a2:	bf00      	nop
 81015a4:	50001000 	.word	0x50001000
 81015a8:	58024400 	.word	0x58024400
 81015ac:	58022800 	.word	0x58022800
 81015b0:	58022000 	.word	0x58022000
 81015b4:	58022400 	.word	0x58022400
 81015b8:	58021c00 	.word	0x58021c00

081015bc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 81015bc:	b580      	push	{r7, lr}
 81015be:	b0bc      	sub	sp, #240	@ 0xf0
 81015c0:	af00      	add	r7, sp, #0
 81015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81015c8:	2200      	movs	r2, #0
 81015ca:	601a      	str	r2, [r3, #0]
 81015cc:	605a      	str	r2, [r3, #4]
 81015ce:	609a      	str	r2, [r3, #8]
 81015d0:	60da      	str	r2, [r3, #12]
 81015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015d4:	f107 0318 	add.w	r3, r7, #24
 81015d8:	22c0      	movs	r2, #192	@ 0xc0
 81015da:	2100      	movs	r1, #0
 81015dc:	4618      	mov	r0, r3
 81015de:	f008 fdcc 	bl	810a17a <memset>
  if(hqspi->Instance==QUADSPI)
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	681b      	ldr	r3, [r3, #0]
 81015e6:	4a56      	ldr	r2, [pc, #344]	@ (8101740 <HAL_QSPI_MspInit+0x184>)
 81015e8:	4293      	cmp	r3, r2
 81015ea:	f040 80a5 	bne.w	8101738 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 81015ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 81015f2:	f04f 0300 	mov.w	r3, #0
 81015f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 81015fa:	2300      	movs	r3, #0
 81015fc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015fe:	f107 0318 	add.w	r3, r7, #24
 8101602:	4618      	mov	r0, r3
 8101604:	f003 fd2e 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 8101608:	4603      	mov	r3, r0
 810160a:	2b00      	cmp	r3, #0
 810160c:	d001      	beq.n	8101612 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 810160e:	f7ff fcc7 	bl	8100fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8101612:	4b4c      	ldr	r3, [pc, #304]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101614:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101618:	4a4a      	ldr	r2, [pc, #296]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 810161a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810161e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101622:	4b48      	ldr	r3, [pc, #288]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101624:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810162c:	617b      	str	r3, [r7, #20]
 810162e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101630:	4b44      	ldr	r3, [pc, #272]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101636:	4a43      	ldr	r2, [pc, #268]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101638:	f043 0302 	orr.w	r3, r3, #2
 810163c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101640:	4b40      	ldr	r3, [pc, #256]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101646:	f003 0302 	and.w	r3, r3, #2
 810164a:	613b      	str	r3, [r7, #16]
 810164c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810164e:	4b3d      	ldr	r3, [pc, #244]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101654:	4a3b      	ldr	r2, [pc, #236]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101656:	f043 0320 	orr.w	r3, r3, #32
 810165a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810165e:	4b39      	ldr	r3, [pc, #228]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101664:	f003 0320 	and.w	r3, r3, #32
 8101668:	60fb      	str	r3, [r7, #12]
 810166a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810166c:	4b35      	ldr	r3, [pc, #212]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 810166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101672:	4a34      	ldr	r2, [pc, #208]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 8101674:	f043 0308 	orr.w	r3, r3, #8
 8101678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810167c:	4b31      	ldr	r3, [pc, #196]	@ (8101744 <HAL_QSPI_MspInit+0x188>)
 810167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101682:	f003 0308 	and.w	r3, r3, #8
 8101686:	60bb      	str	r3, [r7, #8]
 8101688:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 810168a:	2340      	movs	r3, #64	@ 0x40
 810168c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101690:	2302      	movs	r3, #2
 8101692:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101696:	2300      	movs	r3, #0
 8101698:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810169c:	2300      	movs	r3, #0
 810169e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81016a2:	230a      	movs	r3, #10
 81016a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81016a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81016ac:	4619      	mov	r1, r3
 81016ae:	4826      	ldr	r0, [pc, #152]	@ (8101748 <HAL_QSPI_MspInit+0x18c>)
 81016b0:	f001 fd44 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 81016b4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 81016b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016bc:	2302      	movs	r3, #2
 81016be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016c2:	2300      	movs	r3, #0
 81016c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016c8:	2300      	movs	r3, #0
 81016ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81016ce:	2309      	movs	r3, #9
 81016d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81016d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81016d8:	4619      	mov	r1, r3
 81016da:	481c      	ldr	r0, [pc, #112]	@ (810174c <HAL_QSPI_MspInit+0x190>)
 81016dc:	f001 fd2e 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81016e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81016e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016e8:	2302      	movs	r3, #2
 81016ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016ee:	2300      	movs	r3, #0
 81016f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016f4:	2300      	movs	r3, #0
 81016f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81016fa:	230a      	movs	r3, #10
 81016fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101700:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101704:	4619      	mov	r1, r3
 8101706:	4811      	ldr	r0, [pc, #68]	@ (810174c <HAL_QSPI_MspInit+0x190>)
 8101708:	f001 fd18 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 810170c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101710:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101714:	2302      	movs	r3, #2
 8101716:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810171a:	2300      	movs	r3, #0
 810171c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101720:	2300      	movs	r3, #0
 8101722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101726:	2309      	movs	r3, #9
 8101728:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810172c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101730:	4619      	mov	r1, r3
 8101732:	4807      	ldr	r0, [pc, #28]	@ (8101750 <HAL_QSPI_MspInit+0x194>)
 8101734:	f001 fd02 	bl	810313c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8101738:	bf00      	nop
 810173a:	37f0      	adds	r7, #240	@ 0xf0
 810173c:	46bd      	mov	sp, r7
 810173e:	bd80      	pop	{r7, pc}
 8101740:	52005000 	.word	0x52005000
 8101744:	58024400 	.word	0x58024400
 8101748:	58020400 	.word	0x58020400
 810174c:	58021400 	.word	0x58021400
 8101750:	58020c00 	.word	0x58020c00

08101754 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8101754:	b580      	push	{r7, lr}
 8101756:	b0bc      	sub	sp, #240	@ 0xf0
 8101758:	af00      	add	r7, sp, #0
 810175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810175c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101760:	2200      	movs	r2, #0
 8101762:	601a      	str	r2, [r3, #0]
 8101764:	605a      	str	r2, [r3, #4]
 8101766:	609a      	str	r2, [r3, #8]
 8101768:	60da      	str	r2, [r3, #12]
 810176a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810176c:	f107 0318 	add.w	r3, r7, #24
 8101770:	22c0      	movs	r2, #192	@ 0xc0
 8101772:	2100      	movs	r1, #0
 8101774:	4618      	mov	r0, r3
 8101776:	f008 fd00 	bl	810a17a <memset>
  if(hmmc->Instance==SDMMC1)
 810177a:	687b      	ldr	r3, [r7, #4]
 810177c:	681b      	ldr	r3, [r3, #0]
 810177e:	4a4b      	ldr	r2, [pc, #300]	@ (81018ac <HAL_MMC_MspInit+0x158>)
 8101780:	4293      	cmp	r3, r2
 8101782:	f040 808f 	bne.w	81018a4 <HAL_MMC_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810178a:	f04f 0300 	mov.w	r3, #0
 810178e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101792:	2300      	movs	r3, #0
 8101794:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101796:	f107 0318 	add.w	r3, r7, #24
 810179a:	4618      	mov	r0, r3
 810179c:	f003 fc62 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 81017a0:	4603      	mov	r3, r0
 81017a2:	2b00      	cmp	r3, #0
 81017a4:	d001      	beq.n	81017aa <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 81017a6:	f7ff fbfb 	bl	8100fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 81017aa:	4b41      	ldr	r3, [pc, #260]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81017b0:	4a3f      	ldr	r2, [pc, #252]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81017b6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81017ba:	4b3d      	ldr	r3, [pc, #244]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81017c4:	617b      	str	r3, [r7, #20]
 81017c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81017c8:	4b39      	ldr	r3, [pc, #228]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017ce:	4a38      	ldr	r2, [pc, #224]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017d0:	f043 0304 	orr.w	r3, r3, #4
 81017d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017d8:	4b35      	ldr	r3, [pc, #212]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017de:	f003 0304 	and.w	r3, r3, #4
 81017e2:	613b      	str	r3, [r7, #16]
 81017e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81017e6:	4b32      	ldr	r3, [pc, #200]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017ec:	4a30      	ldr	r2, [pc, #192]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017ee:	f043 0302 	orr.w	r3, r3, #2
 81017f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017f6:	4b2e      	ldr	r3, [pc, #184]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 81017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017fc:	f003 0302 	and.w	r3, r3, #2
 8101800:	60fb      	str	r3, [r7, #12]
 8101802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101804:	4b2a      	ldr	r3, [pc, #168]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 8101806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810180a:	4a29      	ldr	r2, [pc, #164]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 810180c:	f043 0308 	orr.w	r3, r3, #8
 8101810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101814:	4b26      	ldr	r3, [pc, #152]	@ (81018b0 <HAL_MMC_MspInit+0x15c>)
 8101816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810181a:	f003 0308 	and.w	r3, r3, #8
 810181e:	60bb      	str	r3, [r7, #8]
 8101820:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101822:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 8101826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810182a:	2302      	movs	r3, #2
 810182c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101830:	2300      	movs	r3, #0
 8101832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101836:	2303      	movs	r3, #3
 8101838:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810183c:	230c      	movs	r3, #12
 810183e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101842:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101846:	4619      	mov	r1, r3
 8101848:	481a      	ldr	r0, [pc, #104]	@ (81018b4 <HAL_MMC_MspInit+0x160>)
 810184a:	f001 fc77 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 810184e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8101852:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101856:	2302      	movs	r3, #2
 8101858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810185c:	2300      	movs	r3, #0
 810185e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101862:	2303      	movs	r3, #3
 8101864:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101868:	230c      	movs	r3, #12
 810186a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810186e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101872:	4619      	mov	r1, r3
 8101874:	4810      	ldr	r0, [pc, #64]	@ (81018b8 <HAL_MMC_MspInit+0x164>)
 8101876:	f001 fc61 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 810187a:	2304      	movs	r3, #4
 810187c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101880:	2302      	movs	r3, #2
 8101882:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101886:	2300      	movs	r3, #0
 8101888:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810188c:	2303      	movs	r3, #3
 810188e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101892:	230c      	movs	r3, #12
 8101894:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101898:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810189c:	4619      	mov	r1, r3
 810189e:	4807      	ldr	r0, [pc, #28]	@ (81018bc <HAL_MMC_MspInit+0x168>)
 81018a0:	f001 fc4c 	bl	810313c <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 81018a4:	bf00      	nop
 81018a6:	37f0      	adds	r7, #240	@ 0xf0
 81018a8:	46bd      	mov	sp, r7
 81018aa:	bd80      	pop	{r7, pc}
 81018ac:	52007000 	.word	0x52007000
 81018b0:	58024400 	.word	0x58024400
 81018b4:	58020800 	.word	0x58020800
 81018b8:	58020400 	.word	0x58020400
 81018bc:	58020c00 	.word	0x58020c00

081018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81018c0:	b580      	push	{r7, lr}
 81018c2:	b0ba      	sub	sp, #232	@ 0xe8
 81018c4:	af00      	add	r7, sp, #0
 81018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81018cc:	2200      	movs	r2, #0
 81018ce:	601a      	str	r2, [r3, #0]
 81018d0:	605a      	str	r2, [r3, #4]
 81018d2:	609a      	str	r2, [r3, #8]
 81018d4:	60da      	str	r2, [r3, #12]
 81018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81018d8:	f107 0310 	add.w	r3, r7, #16
 81018dc:	22c0      	movs	r2, #192	@ 0xc0
 81018de:	2100      	movs	r1, #0
 81018e0:	4618      	mov	r0, r3
 81018e2:	f008 fc4a 	bl	810a17a <memset>
  if(huart->Instance==USART3)
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	681b      	ldr	r3, [r3, #0]
 81018ea:	4a27      	ldr	r2, [pc, #156]	@ (8101988 <HAL_UART_MspInit+0xc8>)
 81018ec:	4293      	cmp	r3, r2
 81018ee:	d146      	bne.n	810197e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81018f0:	f04f 0202 	mov.w	r2, #2
 81018f4:	f04f 0300 	mov.w	r3, #0
 81018f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81018fc:	2300      	movs	r3, #0
 81018fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101902:	f107 0310 	add.w	r3, r7, #16
 8101906:	4618      	mov	r0, r3
 8101908:	f003 fbac 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 810190c:	4603      	mov	r3, r0
 810190e:	2b00      	cmp	r3, #0
 8101910:	d001      	beq.n	8101916 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101912:	f7ff fb45 	bl	8100fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101916:	4b1d      	ldr	r3, [pc, #116]	@ (810198c <HAL_UART_MspInit+0xcc>)
 8101918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810191c:	4a1b      	ldr	r2, [pc, #108]	@ (810198c <HAL_UART_MspInit+0xcc>)
 810191e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8101922:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101926:	4b19      	ldr	r3, [pc, #100]	@ (810198c <HAL_UART_MspInit+0xcc>)
 8101928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810192c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8101930:	60fb      	str	r3, [r7, #12]
 8101932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101934:	4b15      	ldr	r3, [pc, #84]	@ (810198c <HAL_UART_MspInit+0xcc>)
 8101936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810193a:	4a14      	ldr	r2, [pc, #80]	@ (810198c <HAL_UART_MspInit+0xcc>)
 810193c:	f043 0302 	orr.w	r3, r3, #2
 8101940:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101944:	4b11      	ldr	r3, [pc, #68]	@ (810198c <HAL_UART_MspInit+0xcc>)
 8101946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810194a:	f003 0302 	and.w	r3, r3, #2
 810194e:	60bb      	str	r3, [r7, #8]
 8101950:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8101952:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810195a:	2302      	movs	r3, #2
 810195c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101960:	2300      	movs	r3, #0
 8101962:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101966:	2300      	movs	r3, #0
 8101968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810196c:	2307      	movs	r3, #7
 810196e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101972:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101976:	4619      	mov	r1, r3
 8101978:	4805      	ldr	r0, [pc, #20]	@ (8101990 <HAL_UART_MspInit+0xd0>)
 810197a:	f001 fbdf 	bl	810313c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 810197e:	bf00      	nop
 8101980:	37e8      	adds	r7, #232	@ 0xe8
 8101982:	46bd      	mov	sp, r7
 8101984:	bd80      	pop	{r7, pc}
 8101986:	bf00      	nop
 8101988:	40004800 	.word	0x40004800
 810198c:	58024400 	.word	0x58024400
 8101990:	58020400 	.word	0x58020400

08101994 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101994:	b580      	push	{r7, lr}
 8101996:	b0ba      	sub	sp, #232	@ 0xe8
 8101998:	af00      	add	r7, sp, #0
 810199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810199c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81019a0:	2200      	movs	r2, #0
 81019a2:	601a      	str	r2, [r3, #0]
 81019a4:	605a      	str	r2, [r3, #4]
 81019a6:	609a      	str	r2, [r3, #8]
 81019a8:	60da      	str	r2, [r3, #12]
 81019aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81019ac:	f107 0310 	add.w	r3, r7, #16
 81019b0:	22c0      	movs	r2, #192	@ 0xc0
 81019b2:	2100      	movs	r1, #0
 81019b4:	4618      	mov	r0, r3
 81019b6:	f008 fbe0 	bl	810a17a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	681b      	ldr	r3, [r3, #0]
 81019be:	4a30      	ldr	r2, [pc, #192]	@ (8101a80 <HAL_PCD_MspInit+0xec>)
 81019c0:	4293      	cmp	r3, r2
 81019c2:	d159      	bne.n	8101a78 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81019c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81019c8:	f04f 0300 	mov.w	r3, #0
 81019cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 81019d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 81019d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019d8:	f107 0310 	add.w	r3, r7, #16
 81019dc:	4618      	mov	r0, r3
 81019de:	f003 fb41 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 81019e2:	4603      	mov	r3, r0
 81019e4:	2b00      	cmp	r3, #0
 81019e6:	d001      	beq.n	81019ec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 81019e8:	f7ff fada 	bl	8100fa0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81019ec:	f003 f898 	bl	8104b20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81019f0:	4b24      	ldr	r3, [pc, #144]	@ (8101a84 <HAL_PCD_MspInit+0xf0>)
 81019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019f6:	4a23      	ldr	r2, [pc, #140]	@ (8101a84 <HAL_PCD_MspInit+0xf0>)
 81019f8:	f043 0301 	orr.w	r3, r3, #1
 81019fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101a00:	4b20      	ldr	r3, [pc, #128]	@ (8101a84 <HAL_PCD_MspInit+0xf0>)
 8101a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a06:	f003 0301 	and.w	r3, r3, #1
 8101a0a:	60fb      	str	r3, [r7, #12]
 8101a0c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8101a0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101a16:	2300      	movs	r3, #0
 8101a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a1c:	2300      	movs	r3, #0
 8101a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8101a22:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101a26:	4619      	mov	r1, r3
 8101a28:	4817      	ldr	r0, [pc, #92]	@ (8101a88 <HAL_PCD_MspInit+0xf4>)
 8101a2a:	f001 fb87 	bl	810313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8101a2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a36:	2302      	movs	r3, #2
 8101a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a3c:	2300      	movs	r3, #0
 8101a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a42:	2300      	movs	r3, #0
 8101a44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8101a48:	230a      	movs	r3, #10
 8101a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101a4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101a52:	4619      	mov	r1, r3
 8101a54:	480c      	ldr	r0, [pc, #48]	@ (8101a88 <HAL_PCD_MspInit+0xf4>)
 8101a56:	f001 fb71 	bl	810313c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8101a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8101a84 <HAL_PCD_MspInit+0xf0>)
 8101a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101a60:	4a08      	ldr	r2, [pc, #32]	@ (8101a84 <HAL_PCD_MspInit+0xf0>)
 8101a62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8101a66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101a6a:	4b06      	ldr	r3, [pc, #24]	@ (8101a84 <HAL_PCD_MspInit+0xf0>)
 8101a6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8101a74:	60bb      	str	r3, [r7, #8]
 8101a76:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8101a78:	bf00      	nop
 8101a7a:	37e8      	adds	r7, #232	@ 0xe8
 8101a7c:	46bd      	mov	sp, r7
 8101a7e:	bd80      	pop	{r7, pc}
 8101a80:	40080000 	.word	0x40080000
 8101a84:	58024400 	.word	0x58024400
 8101a88:	58020000 	.word	0x58020000

08101a8c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8101a8c:	b580      	push	{r7, lr}
 8101a8e:	b0b8      	sub	sp, #224	@ 0xe0
 8101a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8101a92:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101a96:	2200      	movs	r2, #0
 8101a98:	601a      	str	r2, [r3, #0]
 8101a9a:	605a      	str	r2, [r3, #4]
 8101a9c:	609a      	str	r2, [r3, #8]
 8101a9e:	60da      	str	r2, [r3, #12]
 8101aa0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8101aa2:	4b51      	ldr	r3, [pc, #324]	@ (8101be8 <HAL_FMC_MspInit+0x15c>)
 8101aa4:	681b      	ldr	r3, [r3, #0]
 8101aa6:	2b00      	cmp	r3, #0
 8101aa8:	f040 8099 	bne.w	8101bde <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8101aac:	4b4e      	ldr	r3, [pc, #312]	@ (8101be8 <HAL_FMC_MspInit+0x15c>)
 8101aae:	2201      	movs	r2, #1
 8101ab0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101ab2:	f107 0308 	add.w	r3, r7, #8
 8101ab6:	22c0      	movs	r2, #192	@ 0xc0
 8101ab8:	2100      	movs	r1, #0
 8101aba:	4618      	mov	r0, r3
 8101abc:	f008 fb5d 	bl	810a17a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8101ac0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8101ac4:	f04f 0300 	mov.w	r3, #0
 8101ac8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8101acc:	2300      	movs	r3, #0
 8101ace:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ad0:	f107 0308 	add.w	r3, r7, #8
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f003 fac5 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 8101ada:	4603      	mov	r3, r0
 8101adc:	2b00      	cmp	r3, #0
 8101ade:	d001      	beq.n	8101ae4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8101ae0:	f7ff fa5e 	bl	8100fa0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8101ae4:	4b41      	ldr	r3, [pc, #260]	@ (8101bec <HAL_FMC_MspInit+0x160>)
 8101ae6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101aea:	4a40      	ldr	r2, [pc, #256]	@ (8101bec <HAL_FMC_MspInit+0x160>)
 8101aec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8101af0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101af4:	4b3d      	ldr	r3, [pc, #244]	@ (8101bec <HAL_FMC_MspInit+0x160>)
 8101af6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101afe:	607b      	str	r3, [r7, #4]
 8101b00:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8101b02:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8101b06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b0a:	2302      	movs	r3, #2
 8101b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b10:	2300      	movs	r3, #0
 8101b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101b16:	2303      	movs	r3, #3
 8101b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101b1c:	230c      	movs	r3, #12
 8101b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101b22:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101b26:	4619      	mov	r1, r3
 8101b28:	4831      	ldr	r0, [pc, #196]	@ (8101bf0 <HAL_FMC_MspInit+0x164>)
 8101b2a:	f001 fb07 	bl	810313c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8101b2e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8101b32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b36:	2302      	movs	r3, #2
 8101b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b3c:	2300      	movs	r3, #0
 8101b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101b42:	2303      	movs	r3, #3
 8101b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101b48:	230c      	movs	r3, #12
 8101b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101b4e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101b52:	4619      	mov	r1, r3
 8101b54:	4827      	ldr	r0, [pc, #156]	@ (8101bf4 <HAL_FMC_MspInit+0x168>)
 8101b56:	f001 faf1 	bl	810313c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8101b5a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8101b5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b62:	2302      	movs	r3, #2
 8101b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b68:	2300      	movs	r3, #0
 8101b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101b6e:	2303      	movs	r3, #3
 8101b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101b74:	230c      	movs	r3, #12
 8101b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101b7a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101b7e:	4619      	mov	r1, r3
 8101b80:	481d      	ldr	r0, [pc, #116]	@ (8101bf8 <HAL_FMC_MspInit+0x16c>)
 8101b82:	f001 fadb 	bl	810313c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8101b86:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8101b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b8e:	2302      	movs	r3, #2
 8101b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b94:	2300      	movs	r3, #0
 8101b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101b9a:	2303      	movs	r3, #3
 8101b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101ba0:	230c      	movs	r3, #12
 8101ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101ba6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101baa:	4619      	mov	r1, r3
 8101bac:	4813      	ldr	r0, [pc, #76]	@ (8101bfc <HAL_FMC_MspInit+0x170>)
 8101bae:	f001 fac5 	bl	810313c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8101bb2:	23e0      	movs	r3, #224	@ 0xe0
 8101bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bb8:	2302      	movs	r3, #2
 8101bba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bbe:	2300      	movs	r3, #0
 8101bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101bc4:	2303      	movs	r3, #3
 8101bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101bca:	230c      	movs	r3, #12
 8101bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101bd0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8101bd4:	4619      	mov	r1, r3
 8101bd6:	480a      	ldr	r0, [pc, #40]	@ (8101c00 <HAL_FMC_MspInit+0x174>)
 8101bd8:	f001 fab0 	bl	810313c <HAL_GPIO_Init>
 8101bdc:	e000      	b.n	8101be0 <HAL_FMC_MspInit+0x154>
    return;
 8101bde:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8101be0:	37e0      	adds	r7, #224	@ 0xe0
 8101be2:	46bd      	mov	sp, r7
 8101be4:	bd80      	pop	{r7, pc}
 8101be6:	bf00      	nop
 8101be8:	10000d68 	.word	0x10000d68
 8101bec:	58024400 	.word	0x58024400
 8101bf0:	58021000 	.word	0x58021000
 8101bf4:	58021800 	.word	0x58021800
 8101bf8:	58020c00 	.word	0x58020c00
 8101bfc:	58021400 	.word	0x58021400
 8101c00:	58021c00 	.word	0x58021c00

08101c04 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8101c04:	b580      	push	{r7, lr}
 8101c06:	b082      	sub	sp, #8
 8101c08:	af00      	add	r7, sp, #0
 8101c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8101c0c:	f7ff ff3e 	bl	8101a8c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8101c10:	bf00      	nop
 8101c12:	3708      	adds	r7, #8
 8101c14:	46bd      	mov	sp, r7
 8101c16:	bd80      	pop	{r7, pc}

08101c18 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101c18:	b580      	push	{r7, lr}
 8101c1a:	b0ba      	sub	sp, #232	@ 0xe8
 8101c1c:	af00      	add	r7, sp, #0
 8101c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c20:	f107 0310 	add.w	r3, r7, #16
 8101c24:	22c0      	movs	r2, #192	@ 0xc0
 8101c26:	2100      	movs	r1, #0
 8101c28:	4618      	mov	r0, r3
 8101c2a:	f008 faa6 	bl	810a17a <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	681b      	ldr	r3, [r3, #0]
 8101c32:	4a45      	ldr	r2, [pc, #276]	@ (8101d48 <HAL_SAI_MspInit+0x130>)
 8101c34:	4293      	cmp	r3, r2
 8101c36:	d13e      	bne.n	8101cb6 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8101c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8101c3c:	f04f 0300 	mov.w	r3, #0
 8101c40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8101c44:	2300      	movs	r3, #0
 8101c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c48:	f107 0310 	add.w	r3, r7, #16
 8101c4c:	4618      	mov	r0, r3
 8101c4e:	f003 fa09 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 8101c52:	4603      	mov	r3, r0
 8101c54:	2b00      	cmp	r3, #0
 8101c56:	d001      	beq.n	8101c5c <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8101c58:	f7ff f9a2 	bl	8100fa0 <Error_Handler>
    }

    if (SAI2_client == 0)
 8101c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8101d4c <HAL_SAI_MspInit+0x134>)
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	2b00      	cmp	r3, #0
 8101c62:	d10e      	bne.n	8101c82 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101c64:	4b3a      	ldr	r3, [pc, #232]	@ (8101d50 <HAL_SAI_MspInit+0x138>)
 8101c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101c6a:	4a39      	ldr	r2, [pc, #228]	@ (8101d50 <HAL_SAI_MspInit+0x138>)
 8101c6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101c70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101c74:	4b36      	ldr	r3, [pc, #216]	@ (8101d50 <HAL_SAI_MspInit+0x138>)
 8101c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101c7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8101c7e:	60fb      	str	r3, [r7, #12]
 8101c80:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8101c82:	4b32      	ldr	r3, [pc, #200]	@ (8101d4c <HAL_SAI_MspInit+0x134>)
 8101c84:	681b      	ldr	r3, [r3, #0]
 8101c86:	3301      	adds	r3, #1
 8101c88:	4a30      	ldr	r2, [pc, #192]	@ (8101d4c <HAL_SAI_MspInit+0x134>)
 8101c8a:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8101c8c:	23f0      	movs	r3, #240	@ 0xf0
 8101c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c92:	2302      	movs	r3, #2
 8101c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c98:	2300      	movs	r3, #0
 8101c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c9e:	2300      	movs	r3, #0
 8101ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101ca4:	230a      	movs	r3, #10
 8101ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101caa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101cae:	4619      	mov	r1, r3
 8101cb0:	4828      	ldr	r0, [pc, #160]	@ (8101d54 <HAL_SAI_MspInit+0x13c>)
 8101cb2:	f001 fa43 	bl	810313c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8101cb6:	687b      	ldr	r3, [r7, #4]
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	4a27      	ldr	r2, [pc, #156]	@ (8101d58 <HAL_SAI_MspInit+0x140>)
 8101cbc:	4293      	cmp	r3, r2
 8101cbe:	d13f      	bne.n	8101d40 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8101cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8101cc4:	f04f 0300 	mov.w	r3, #0
 8101cc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8101ccc:	2300      	movs	r3, #0
 8101cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101cd0:	f107 0310 	add.w	r3, r7, #16
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	f003 f9c5 	bl	8105064 <HAL_RCCEx_PeriphCLKConfig>
 8101cda:	4603      	mov	r3, r0
 8101cdc:	2b00      	cmp	r3, #0
 8101cde:	d001      	beq.n	8101ce4 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8101ce0:	f7ff f95e 	bl	8100fa0 <Error_Handler>
    }

      if (SAI2_client == 0)
 8101ce4:	4b19      	ldr	r3, [pc, #100]	@ (8101d4c <HAL_SAI_MspInit+0x134>)
 8101ce6:	681b      	ldr	r3, [r3, #0]
 8101ce8:	2b00      	cmp	r3, #0
 8101cea:	d10e      	bne.n	8101d0a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101cec:	4b18      	ldr	r3, [pc, #96]	@ (8101d50 <HAL_SAI_MspInit+0x138>)
 8101cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101cf2:	4a17      	ldr	r2, [pc, #92]	@ (8101d50 <HAL_SAI_MspInit+0x138>)
 8101cf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101cf8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101cfc:	4b14      	ldr	r3, [pc, #80]	@ (8101d50 <HAL_SAI_MspInit+0x138>)
 8101cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8101d06:	60bb      	str	r3, [r7, #8]
 8101d08:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8101d0a:	4b10      	ldr	r3, [pc, #64]	@ (8101d4c <HAL_SAI_MspInit+0x134>)
 8101d0c:	681b      	ldr	r3, [r3, #0]
 8101d0e:	3301      	adds	r3, #1
 8101d10:	4a0e      	ldr	r2, [pc, #56]	@ (8101d4c <HAL_SAI_MspInit+0x134>)
 8101d12:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8101d18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d1c:	2302      	movs	r3, #2
 8101d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d22:	2300      	movs	r3, #0
 8101d24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d28:	2300      	movs	r3, #0
 8101d2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101d2e:	230a      	movs	r3, #10
 8101d30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101d34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101d38:	4619      	mov	r1, r3
 8101d3a:	4808      	ldr	r0, [pc, #32]	@ (8101d5c <HAL_SAI_MspInit+0x144>)
 8101d3c:	f001 f9fe 	bl	810313c <HAL_GPIO_Init>

    }
}
 8101d40:	bf00      	nop
 8101d42:	37e8      	adds	r7, #232	@ 0xe8
 8101d44:	46bd      	mov	sp, r7
 8101d46:	bd80      	pop	{r7, pc}
 8101d48:	40015c04 	.word	0x40015c04
 8101d4c:	10000d6c 	.word	0x10000d6c
 8101d50:	58024400 	.word	0x58024400
 8101d54:	58022000 	.word	0x58022000
 8101d58:	40015c24 	.word	0x40015c24
 8101d5c:	58021800 	.word	0x58021800

08101d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101d60:	b480      	push	{r7}
 8101d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101d64:	bf00      	nop
 8101d66:	e7fd      	b.n	8101d64 <NMI_Handler+0x4>

08101d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101d68:	b480      	push	{r7}
 8101d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101d6c:	bf00      	nop
 8101d6e:	e7fd      	b.n	8101d6c <HardFault_Handler+0x4>

08101d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101d70:	b480      	push	{r7}
 8101d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101d74:	bf00      	nop
 8101d76:	e7fd      	b.n	8101d74 <MemManage_Handler+0x4>

08101d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101d78:	b480      	push	{r7}
 8101d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101d7c:	bf00      	nop
 8101d7e:	e7fd      	b.n	8101d7c <BusFault_Handler+0x4>

08101d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101d80:	b480      	push	{r7}
 8101d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d84:	bf00      	nop
 8101d86:	e7fd      	b.n	8101d84 <UsageFault_Handler+0x4>

08101d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101d88:	b480      	push	{r7}
 8101d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101d8c:	bf00      	nop
 8101d8e:	46bd      	mov	sp, r7
 8101d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d94:	4770      	bx	lr

08101d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d96:	b480      	push	{r7}
 8101d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d9a:	bf00      	nop
 8101d9c:	46bd      	mov	sp, r7
 8101d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101da2:	4770      	bx	lr

08101da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101da4:	b480      	push	{r7}
 8101da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101da8:	bf00      	nop
 8101daa:	46bd      	mov	sp, r7
 8101dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101db0:	4770      	bx	lr

08101db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101db2:	b580      	push	{r7, lr}
 8101db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101db6:	f000 f8c3 	bl	8101f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101dba:	bf00      	nop
 8101dbc:	bd80      	pop	{r7, pc}
	...

08101dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101dc0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101dfc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101dc4:	f7fe fc18 	bl	81005f8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8101dc8:	f7fe fbfe 	bl	81005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101dcc:	480c      	ldr	r0, [pc, #48]	@ (8101e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101dce:	490d      	ldr	r1, [pc, #52]	@ (8101e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8101e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101dd4:	e002      	b.n	8101ddc <LoopCopyDataInit>

08101dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101dda:	3304      	adds	r3, #4

08101ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101de0:	d3f9      	bcc.n	8101dd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101de2:	4a0a      	ldr	r2, [pc, #40]	@ (8101e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101de4:	4c0a      	ldr	r4, [pc, #40]	@ (8101e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101de8:	e001      	b.n	8101dee <LoopFillZerobss>

08101dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101dec:	3204      	adds	r2, #4

08101dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101df0:	d3fb      	bcc.n	8101dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101df2:	f008 f9cb 	bl	810a18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101df6:	f7fe fc17 	bl	8100628 <main>
  bx  lr
 8101dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101dfc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101e00:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101e04:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101e08:	0810a29c 	.word	0x0810a29c
  ldr r2, =_sbss
 8101e0c:	100000d0 	.word	0x100000d0
  ldr r4, =_ebss
 8101e10:	10000d74 	.word	0x10000d74

08101e14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101e14:	e7fe      	b.n	8101e14 <ADC3_IRQHandler>
	...

08101e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101e18:	b580      	push	{r7, lr}
 8101e1a:	b082      	sub	sp, #8
 8101e1c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101e1e:	4b28      	ldr	r3, [pc, #160]	@ (8101ec0 <HAL_Init+0xa8>)
 8101e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e24:	4a26      	ldr	r2, [pc, #152]	@ (8101ec0 <HAL_Init+0xa8>)
 8101e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101e2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101e2e:	4b24      	ldr	r3, [pc, #144]	@ (8101ec0 <HAL_Init+0xa8>)
 8101e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101e38:	603b      	str	r3, [r7, #0]
 8101e3a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101e3c:	4b21      	ldr	r3, [pc, #132]	@ (8101ec4 <HAL_Init+0xac>)
 8101e3e:	681b      	ldr	r3, [r3, #0]
 8101e40:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101e44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101e48:	4a1e      	ldr	r2, [pc, #120]	@ (8101ec4 <HAL_Init+0xac>)
 8101e4a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101e4e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101e50:	4b1c      	ldr	r3, [pc, #112]	@ (8101ec4 <HAL_Init+0xac>)
 8101e52:	681b      	ldr	r3, [r3, #0]
 8101e54:	4a1b      	ldr	r2, [pc, #108]	@ (8101ec4 <HAL_Init+0xac>)
 8101e56:	f043 0301 	orr.w	r3, r3, #1
 8101e5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101e5c:	2003      	movs	r0, #3
 8101e5e:	f000 f985 	bl	810216c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101e62:	f002 ff27 	bl	8104cb4 <HAL_RCC_GetSysClockFreq>
 8101e66:	4602      	mov	r2, r0
 8101e68:	4b15      	ldr	r3, [pc, #84]	@ (8101ec0 <HAL_Init+0xa8>)
 8101e6a:	699b      	ldr	r3, [r3, #24]
 8101e6c:	0a1b      	lsrs	r3, r3, #8
 8101e6e:	f003 030f 	and.w	r3, r3, #15
 8101e72:	4915      	ldr	r1, [pc, #84]	@ (8101ec8 <HAL_Init+0xb0>)
 8101e74:	5ccb      	ldrb	r3, [r1, r3]
 8101e76:	f003 031f 	and.w	r3, r3, #31
 8101e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8101e7e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101e80:	4b0f      	ldr	r3, [pc, #60]	@ (8101ec0 <HAL_Init+0xa8>)
 8101e82:	699b      	ldr	r3, [r3, #24]
 8101e84:	f003 030f 	and.w	r3, r3, #15
 8101e88:	4a0f      	ldr	r2, [pc, #60]	@ (8101ec8 <HAL_Init+0xb0>)
 8101e8a:	5cd3      	ldrb	r3, [r2, r3]
 8101e8c:	f003 031f 	and.w	r3, r3, #31
 8101e90:	687a      	ldr	r2, [r7, #4]
 8101e92:	fa22 f303 	lsr.w	r3, r2, r3
 8101e96:	4a0d      	ldr	r2, [pc, #52]	@ (8101ecc <HAL_Init+0xb4>)
 8101e98:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8101ecc <HAL_Init+0xb4>)
 8101e9c:	681b      	ldr	r3, [r3, #0]
 8101e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8101ed0 <HAL_Init+0xb8>)
 8101ea0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101ea2:	2000      	movs	r0, #0
 8101ea4:	f000 f816 	bl	8101ed4 <HAL_InitTick>
 8101ea8:	4603      	mov	r3, r0
 8101eaa:	2b00      	cmp	r3, #0
 8101eac:	d001      	beq.n	8101eb2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101eae:	2301      	movs	r3, #1
 8101eb0:	e002      	b.n	8101eb8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101eb2:	f7ff f87b 	bl	8100fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101eb6:	2300      	movs	r3, #0
}
 8101eb8:	4618      	mov	r0, r3
 8101eba:	3708      	adds	r7, #8
 8101ebc:	46bd      	mov	sp, r7
 8101ebe:	bd80      	pop	{r7, pc}
 8101ec0:	58024400 	.word	0x58024400
 8101ec4:	40024400 	.word	0x40024400
 8101ec8:	0810a254 	.word	0x0810a254
 8101ecc:	10000004 	.word	0x10000004
 8101ed0:	10000000 	.word	0x10000000

08101ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101ed4:	b580      	push	{r7, lr}
 8101ed6:	b082      	sub	sp, #8
 8101ed8:	af00      	add	r7, sp, #0
 8101eda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101edc:	4b15      	ldr	r3, [pc, #84]	@ (8101f34 <HAL_InitTick+0x60>)
 8101ede:	781b      	ldrb	r3, [r3, #0]
 8101ee0:	2b00      	cmp	r3, #0
 8101ee2:	d101      	bne.n	8101ee8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101ee4:	2301      	movs	r3, #1
 8101ee6:	e021      	b.n	8101f2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101ee8:	4b13      	ldr	r3, [pc, #76]	@ (8101f38 <HAL_InitTick+0x64>)
 8101eea:	681a      	ldr	r2, [r3, #0]
 8101eec:	4b11      	ldr	r3, [pc, #68]	@ (8101f34 <HAL_InitTick+0x60>)
 8101eee:	781b      	ldrb	r3, [r3, #0]
 8101ef0:	4619      	mov	r1, r3
 8101ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8101efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8101efe:	4618      	mov	r0, r3
 8101f00:	f000 f959 	bl	81021b6 <HAL_SYSTICK_Config>
 8101f04:	4603      	mov	r3, r0
 8101f06:	2b00      	cmp	r3, #0
 8101f08:	d001      	beq.n	8101f0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101f0a:	2301      	movs	r3, #1
 8101f0c:	e00e      	b.n	8101f2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	2b0f      	cmp	r3, #15
 8101f12:	d80a      	bhi.n	8101f2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101f14:	2200      	movs	r2, #0
 8101f16:	6879      	ldr	r1, [r7, #4]
 8101f18:	f04f 30ff 	mov.w	r0, #4294967295
 8101f1c:	f000 f931 	bl	8102182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101f20:	4a06      	ldr	r2, [pc, #24]	@ (8101f3c <HAL_InitTick+0x68>)
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101f26:	2300      	movs	r3, #0
 8101f28:	e000      	b.n	8101f2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101f2a:	2301      	movs	r3, #1
}
 8101f2c:	4618      	mov	r0, r3
 8101f2e:	3708      	adds	r7, #8
 8101f30:	46bd      	mov	sp, r7
 8101f32:	bd80      	pop	{r7, pc}
 8101f34:	1000000c 	.word	0x1000000c
 8101f38:	10000000 	.word	0x10000000
 8101f3c:	10000008 	.word	0x10000008

08101f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101f40:	b480      	push	{r7}
 8101f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101f44:	4b06      	ldr	r3, [pc, #24]	@ (8101f60 <HAL_IncTick+0x20>)
 8101f46:	781b      	ldrb	r3, [r3, #0]
 8101f48:	461a      	mov	r2, r3
 8101f4a:	4b06      	ldr	r3, [pc, #24]	@ (8101f64 <HAL_IncTick+0x24>)
 8101f4c:	681b      	ldr	r3, [r3, #0]
 8101f4e:	4413      	add	r3, r2
 8101f50:	4a04      	ldr	r2, [pc, #16]	@ (8101f64 <HAL_IncTick+0x24>)
 8101f52:	6013      	str	r3, [r2, #0]
}
 8101f54:	bf00      	nop
 8101f56:	46bd      	mov	sp, r7
 8101f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f5c:	4770      	bx	lr
 8101f5e:	bf00      	nop
 8101f60:	1000000c 	.word	0x1000000c
 8101f64:	10000d70 	.word	0x10000d70

08101f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101f68:	b480      	push	{r7}
 8101f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8101f6c:	4b03      	ldr	r3, [pc, #12]	@ (8101f7c <HAL_GetTick+0x14>)
 8101f6e:	681b      	ldr	r3, [r3, #0]
}
 8101f70:	4618      	mov	r0, r3
 8101f72:	46bd      	mov	sp, r7
 8101f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f78:	4770      	bx	lr
 8101f7a:	bf00      	nop
 8101f7c:	10000d70 	.word	0x10000d70

08101f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101f80:	b580      	push	{r7, lr}
 8101f82:	b084      	sub	sp, #16
 8101f84:	af00      	add	r7, sp, #0
 8101f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101f88:	f7ff ffee 	bl	8101f68 <HAL_GetTick>
 8101f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101f92:	68fb      	ldr	r3, [r7, #12]
 8101f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101f98:	d005      	beq.n	8101fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8101fc4 <HAL_Delay+0x44>)
 8101f9c:	781b      	ldrb	r3, [r3, #0]
 8101f9e:	461a      	mov	r2, r3
 8101fa0:	68fb      	ldr	r3, [r7, #12]
 8101fa2:	4413      	add	r3, r2
 8101fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101fa6:	bf00      	nop
 8101fa8:	f7ff ffde 	bl	8101f68 <HAL_GetTick>
 8101fac:	4602      	mov	r2, r0
 8101fae:	68bb      	ldr	r3, [r7, #8]
 8101fb0:	1ad3      	subs	r3, r2, r3
 8101fb2:	68fa      	ldr	r2, [r7, #12]
 8101fb4:	429a      	cmp	r2, r3
 8101fb6:	d8f7      	bhi.n	8101fa8 <HAL_Delay+0x28>
  {
  }
}
 8101fb8:	bf00      	nop
 8101fba:	bf00      	nop
 8101fbc:	3710      	adds	r7, #16
 8101fbe:	46bd      	mov	sp, r7
 8101fc0:	bd80      	pop	{r7, pc}
 8101fc2:	bf00      	nop
 8101fc4:	1000000c 	.word	0x1000000c

08101fc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101fc8:	b480      	push	{r7}
 8101fca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101fcc:	4b03      	ldr	r3, [pc, #12]	@ (8101fdc <HAL_GetREVID+0x14>)
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	0c1b      	lsrs	r3, r3, #16
}
 8101fd2:	4618      	mov	r0, r3
 8101fd4:	46bd      	mov	sp, r7
 8101fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fda:	4770      	bx	lr
 8101fdc:	5c001000 	.word	0x5c001000

08101fe0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8101fe0:	b480      	push	{r7}
 8101fe2:	b083      	sub	sp, #12
 8101fe4:	af00      	add	r7, sp, #0
 8101fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8101fe8:	4b06      	ldr	r3, [pc, #24]	@ (8102004 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101fea:	685b      	ldr	r3, [r3, #4]
 8101fec:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8101ff0:	4904      	ldr	r1, [pc, #16]	@ (8102004 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	4313      	orrs	r3, r2
 8101ff6:	604b      	str	r3, [r1, #4]
}
 8101ff8:	bf00      	nop
 8101ffa:	370c      	adds	r7, #12
 8101ffc:	46bd      	mov	sp, r7
 8101ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102002:	4770      	bx	lr
 8102004:	58000400 	.word	0x58000400

08102008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102008:	b480      	push	{r7}
 810200a:	b085      	sub	sp, #20
 810200c:	af00      	add	r7, sp, #0
 810200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	f003 0307 	and.w	r3, r3, #7
 8102016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102018:	4b0c      	ldr	r3, [pc, #48]	@ (810204c <__NVIC_SetPriorityGrouping+0x44>)
 810201a:	68db      	ldr	r3, [r3, #12]
 810201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810201e:	68ba      	ldr	r2, [r7, #8]
 8102020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102024:	4013      	ands	r3, r2
 8102026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102028:	68fb      	ldr	r3, [r7, #12]
 810202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810202c:	68bb      	ldr	r3, [r7, #8]
 810202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810203a:	4a04      	ldr	r2, [pc, #16]	@ (810204c <__NVIC_SetPriorityGrouping+0x44>)
 810203c:	68bb      	ldr	r3, [r7, #8]
 810203e:	60d3      	str	r3, [r2, #12]
}
 8102040:	bf00      	nop
 8102042:	3714      	adds	r7, #20
 8102044:	46bd      	mov	sp, r7
 8102046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810204a:	4770      	bx	lr
 810204c:	e000ed00 	.word	0xe000ed00

08102050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102050:	b480      	push	{r7}
 8102052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102054:	4b04      	ldr	r3, [pc, #16]	@ (8102068 <__NVIC_GetPriorityGrouping+0x18>)
 8102056:	68db      	ldr	r3, [r3, #12]
 8102058:	0a1b      	lsrs	r3, r3, #8
 810205a:	f003 0307 	and.w	r3, r3, #7
}
 810205e:	4618      	mov	r0, r3
 8102060:	46bd      	mov	sp, r7
 8102062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102066:	4770      	bx	lr
 8102068:	e000ed00 	.word	0xe000ed00

0810206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810206c:	b480      	push	{r7}
 810206e:	b083      	sub	sp, #12
 8102070:	af00      	add	r7, sp, #0
 8102072:	4603      	mov	r3, r0
 8102074:	6039      	str	r1, [r7, #0]
 8102076:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810207c:	2b00      	cmp	r3, #0
 810207e:	db0a      	blt.n	8102096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102080:	683b      	ldr	r3, [r7, #0]
 8102082:	b2da      	uxtb	r2, r3
 8102084:	490c      	ldr	r1, [pc, #48]	@ (81020b8 <__NVIC_SetPriority+0x4c>)
 8102086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810208a:	0112      	lsls	r2, r2, #4
 810208c:	b2d2      	uxtb	r2, r2
 810208e:	440b      	add	r3, r1
 8102090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102094:	e00a      	b.n	81020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102096:	683b      	ldr	r3, [r7, #0]
 8102098:	b2da      	uxtb	r2, r3
 810209a:	4908      	ldr	r1, [pc, #32]	@ (81020bc <__NVIC_SetPriority+0x50>)
 810209c:	88fb      	ldrh	r3, [r7, #6]
 810209e:	f003 030f 	and.w	r3, r3, #15
 81020a2:	3b04      	subs	r3, #4
 81020a4:	0112      	lsls	r2, r2, #4
 81020a6:	b2d2      	uxtb	r2, r2
 81020a8:	440b      	add	r3, r1
 81020aa:	761a      	strb	r2, [r3, #24]
}
 81020ac:	bf00      	nop
 81020ae:	370c      	adds	r7, #12
 81020b0:	46bd      	mov	sp, r7
 81020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b6:	4770      	bx	lr
 81020b8:	e000e100 	.word	0xe000e100
 81020bc:	e000ed00 	.word	0xe000ed00

081020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81020c0:	b480      	push	{r7}
 81020c2:	b089      	sub	sp, #36	@ 0x24
 81020c4:	af00      	add	r7, sp, #0
 81020c6:	60f8      	str	r0, [r7, #12]
 81020c8:	60b9      	str	r1, [r7, #8]
 81020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81020cc:	68fb      	ldr	r3, [r7, #12]
 81020ce:	f003 0307 	and.w	r3, r3, #7
 81020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81020d4:	69fb      	ldr	r3, [r7, #28]
 81020d6:	f1c3 0307 	rsb	r3, r3, #7
 81020da:	2b04      	cmp	r3, #4
 81020dc:	bf28      	it	cs
 81020de:	2304      	movcs	r3, #4
 81020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81020e2:	69fb      	ldr	r3, [r7, #28]
 81020e4:	3304      	adds	r3, #4
 81020e6:	2b06      	cmp	r3, #6
 81020e8:	d902      	bls.n	81020f0 <NVIC_EncodePriority+0x30>
 81020ea:	69fb      	ldr	r3, [r7, #28]
 81020ec:	3b03      	subs	r3, #3
 81020ee:	e000      	b.n	81020f2 <NVIC_EncodePriority+0x32>
 81020f0:	2300      	movs	r3, #0
 81020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81020f4:	f04f 32ff 	mov.w	r2, #4294967295
 81020f8:	69bb      	ldr	r3, [r7, #24]
 81020fa:	fa02 f303 	lsl.w	r3, r2, r3
 81020fe:	43da      	mvns	r2, r3
 8102100:	68bb      	ldr	r3, [r7, #8]
 8102102:	401a      	ands	r2, r3
 8102104:	697b      	ldr	r3, [r7, #20]
 8102106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102108:	f04f 31ff 	mov.w	r1, #4294967295
 810210c:	697b      	ldr	r3, [r7, #20]
 810210e:	fa01 f303 	lsl.w	r3, r1, r3
 8102112:	43d9      	mvns	r1, r3
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102118:	4313      	orrs	r3, r2
         );
}
 810211a:	4618      	mov	r0, r3
 810211c:	3724      	adds	r7, #36	@ 0x24
 810211e:	46bd      	mov	sp, r7
 8102120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102124:	4770      	bx	lr
	...

08102128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102128:	b580      	push	{r7, lr}
 810212a:	b082      	sub	sp, #8
 810212c:	af00      	add	r7, sp, #0
 810212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	3b01      	subs	r3, #1
 8102134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102138:	d301      	bcc.n	810213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810213a:	2301      	movs	r3, #1
 810213c:	e00f      	b.n	810215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810213e:	4a0a      	ldr	r2, [pc, #40]	@ (8102168 <SysTick_Config+0x40>)
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	3b01      	subs	r3, #1
 8102144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102146:	210f      	movs	r1, #15
 8102148:	f04f 30ff 	mov.w	r0, #4294967295
 810214c:	f7ff ff8e 	bl	810206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102150:	4b05      	ldr	r3, [pc, #20]	@ (8102168 <SysTick_Config+0x40>)
 8102152:	2200      	movs	r2, #0
 8102154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102156:	4b04      	ldr	r3, [pc, #16]	@ (8102168 <SysTick_Config+0x40>)
 8102158:	2207      	movs	r2, #7
 810215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810215c:	2300      	movs	r3, #0
}
 810215e:	4618      	mov	r0, r3
 8102160:	3708      	adds	r7, #8
 8102162:	46bd      	mov	sp, r7
 8102164:	bd80      	pop	{r7, pc}
 8102166:	bf00      	nop
 8102168:	e000e010 	.word	0xe000e010

0810216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810216c:	b580      	push	{r7, lr}
 810216e:	b082      	sub	sp, #8
 8102170:	af00      	add	r7, sp, #0
 8102172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102174:	6878      	ldr	r0, [r7, #4]
 8102176:	f7ff ff47 	bl	8102008 <__NVIC_SetPriorityGrouping>
}
 810217a:	bf00      	nop
 810217c:	3708      	adds	r7, #8
 810217e:	46bd      	mov	sp, r7
 8102180:	bd80      	pop	{r7, pc}

08102182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102182:	b580      	push	{r7, lr}
 8102184:	b086      	sub	sp, #24
 8102186:	af00      	add	r7, sp, #0
 8102188:	4603      	mov	r3, r0
 810218a:	60b9      	str	r1, [r7, #8]
 810218c:	607a      	str	r2, [r7, #4]
 810218e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102190:	f7ff ff5e 	bl	8102050 <__NVIC_GetPriorityGrouping>
 8102194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102196:	687a      	ldr	r2, [r7, #4]
 8102198:	68b9      	ldr	r1, [r7, #8]
 810219a:	6978      	ldr	r0, [r7, #20]
 810219c:	f7ff ff90 	bl	81020c0 <NVIC_EncodePriority>
 81021a0:	4602      	mov	r2, r0
 81021a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81021a6:	4611      	mov	r1, r2
 81021a8:	4618      	mov	r0, r3
 81021aa:	f7ff ff5f 	bl	810206c <__NVIC_SetPriority>
}
 81021ae:	bf00      	nop
 81021b0:	3718      	adds	r7, #24
 81021b2:	46bd      	mov	sp, r7
 81021b4:	bd80      	pop	{r7, pc}

081021b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81021b6:	b580      	push	{r7, lr}
 81021b8:	b082      	sub	sp, #8
 81021ba:	af00      	add	r7, sp, #0
 81021bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81021be:	6878      	ldr	r0, [r7, #4]
 81021c0:	f7ff ffb2 	bl	8102128 <SysTick_Config>
 81021c4:	4603      	mov	r3, r0
}
 81021c6:	4618      	mov	r0, r3
 81021c8:	3708      	adds	r7, #8
 81021ca:	46bd      	mov	sp, r7
 81021cc:	bd80      	pop	{r7, pc}
	...

081021d0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81021d0:	b480      	push	{r7}
 81021d2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81021d4:	4b07      	ldr	r3, [pc, #28]	@ (81021f4 <HAL_GetCurrentCPUID+0x24>)
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	091b      	lsrs	r3, r3, #4
 81021da:	f003 030f 	and.w	r3, r3, #15
 81021de:	2b07      	cmp	r3, #7
 81021e0:	d101      	bne.n	81021e6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81021e2:	2303      	movs	r3, #3
 81021e4:	e000      	b.n	81021e8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81021e6:	2301      	movs	r3, #1
  }
}
 81021e8:	4618      	mov	r0, r3
 81021ea:	46bd      	mov	sp, r7
 81021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f0:	4770      	bx	lr
 81021f2:	bf00      	nop
 81021f4:	e000ed00 	.word	0xe000ed00

081021f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 81021f8:	b580      	push	{r7, lr}
 81021fa:	b084      	sub	sp, #16
 81021fc:	af00      	add	r7, sp, #0
 81021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	2b00      	cmp	r3, #0
 8102204:	d101      	bne.n	810220a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8102206:	2301      	movs	r3, #1
 8102208:	e0e7      	b.n	81023da <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102210:	2b00      	cmp	r3, #0
 8102212:	d106      	bne.n	8102222 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	2220      	movs	r2, #32
 8102218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 810221c:	6878      	ldr	r0, [r7, #4]
 810221e:	f7fe fedf 	bl	8100fe0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102222:	4b70      	ldr	r3, [pc, #448]	@ (81023e4 <HAL_ETH_Init+0x1ec>)
 8102224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102228:	4a6e      	ldr	r2, [pc, #440]	@ (81023e4 <HAL_ETH_Init+0x1ec>)
 810222a:	f043 0302 	orr.w	r3, r3, #2
 810222e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102232:	4b6c      	ldr	r3, [pc, #432]	@ (81023e4 <HAL_ETH_Init+0x1ec>)
 8102234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102238:	f003 0302 	and.w	r3, r3, #2
 810223c:	60bb      	str	r3, [r7, #8]
 810223e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8102240:	687b      	ldr	r3, [r7, #4]
 8102242:	7a1b      	ldrb	r3, [r3, #8]
 8102244:	2b00      	cmp	r3, #0
 8102246:	d103      	bne.n	8102250 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8102248:	2000      	movs	r0, #0
 810224a:	f7ff fec9 	bl	8101fe0 <HAL_SYSCFG_ETHInterfaceSelect>
 810224e:	e003      	b.n	8102258 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8102250:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8102254:	f7ff fec4 	bl	8101fe0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8102258:	4b63      	ldr	r3, [pc, #396]	@ (81023e8 <HAL_ETH_Init+0x1f0>)
 810225a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	687a      	ldr	r2, [r7, #4]
 8102268:	6812      	ldr	r2, [r2, #0]
 810226a:	f043 0301 	orr.w	r3, r3, #1
 810226e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102272:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8102274:	f7ff fe78 	bl	8101f68 <HAL_GetTick>
 8102278:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810227a:	e011      	b.n	81022a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 810227c:	f7ff fe74 	bl	8101f68 <HAL_GetTick>
 8102280:	4602      	mov	r2, r0
 8102282:	68fb      	ldr	r3, [r7, #12]
 8102284:	1ad3      	subs	r3, r2, r3
 8102286:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 810228a:	d909      	bls.n	81022a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	2204      	movs	r2, #4
 8102290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	22e0      	movs	r2, #224	@ 0xe0
 8102298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 810229c:	2301      	movs	r3, #1
 810229e:	e09c      	b.n	81023da <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	f003 0301 	and.w	r3, r3, #1
 81022ae:	2b00      	cmp	r3, #0
 81022b0:	d1e4      	bne.n	810227c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81022b2:	6878      	ldr	r0, [r7, #4]
 81022b4:	f000 f89e 	bl	81023f4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81022b8:	f002 fe76 	bl	8104fa8 <HAL_RCC_GetHCLKFreq>
 81022bc:	4603      	mov	r3, r0
 81022be:	4a4b      	ldr	r2, [pc, #300]	@ (81023ec <HAL_ETH_Init+0x1f4>)
 81022c0:	fba2 2303 	umull	r2, r3, r2, r3
 81022c4:	0c9a      	lsrs	r2, r3, #18
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	3a01      	subs	r2, #1
 81022cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 81022d0:	6878      	ldr	r0, [r7, #4]
 81022d2:	f000 fa81 	bl	81027d8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81022de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 81022e2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 81022e6:	687a      	ldr	r2, [r7, #4]
 81022e8:	6812      	ldr	r2, [r2, #0]
 81022ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81022ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81022f2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	695b      	ldr	r3, [r3, #20]
 81022fa:	f003 0303 	and.w	r3, r3, #3
 81022fe:	2b00      	cmp	r3, #0
 8102300:	d009      	beq.n	8102316 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	2201      	movs	r2, #1
 8102306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	22e0      	movs	r2, #224	@ 0xe0
 810230e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8102312:	2301      	movs	r3, #1
 8102314:	e061      	b.n	81023da <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810231e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8102322:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8102326:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 810232a:	687a      	ldr	r2, [r7, #4]
 810232c:	6952      	ldr	r2, [r2, #20]
 810232e:	0051      	lsls	r1, r2, #1
 8102330:	687a      	ldr	r2, [r7, #4]
 8102332:	6812      	ldr	r2, [r2, #0]
 8102334:	430b      	orrs	r3, r1
 8102336:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810233a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810233e:	6878      	ldr	r0, [r7, #4]
 8102340:	f000 fae7 	bl	8102912 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8102344:	6878      	ldr	r0, [r7, #4]
 8102346:	f000 fb2d 	bl	81029a4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	685b      	ldr	r3, [r3, #4]
 810234e:	3305      	adds	r3, #5
 8102350:	781b      	ldrb	r3, [r3, #0]
 8102352:	021a      	lsls	r2, r3, #8
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	685b      	ldr	r3, [r3, #4]
 8102358:	3304      	adds	r3, #4
 810235a:	781b      	ldrb	r3, [r3, #0]
 810235c:	4619      	mov	r1, r3
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	430a      	orrs	r2, r1
 8102364:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	685b      	ldr	r3, [r3, #4]
 810236c:	3303      	adds	r3, #3
 810236e:	781b      	ldrb	r3, [r3, #0]
 8102370:	061a      	lsls	r2, r3, #24
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	685b      	ldr	r3, [r3, #4]
 8102376:	3302      	adds	r3, #2
 8102378:	781b      	ldrb	r3, [r3, #0]
 810237a:	041b      	lsls	r3, r3, #16
 810237c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	685b      	ldr	r3, [r3, #4]
 8102382:	3301      	adds	r3, #1
 8102384:	781b      	ldrb	r3, [r3, #0]
 8102386:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8102388:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810238a:	687b      	ldr	r3, [r7, #4]
 810238c:	685b      	ldr	r3, [r3, #4]
 810238e:	781b      	ldrb	r3, [r3, #0]
 8102390:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8102396:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8102398:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 810239c:	687b      	ldr	r3, [r7, #4]
 810239e:	681b      	ldr	r3, [r3, #0]
 81023a0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 81023a4:	687b      	ldr	r3, [r7, #4]
 81023a6:	681a      	ldr	r2, [r3, #0]
 81023a8:	4b11      	ldr	r3, [pc, #68]	@ (81023f0 <HAL_ETH_Init+0x1f8>)
 81023aa:	430b      	orrs	r3, r1
 81023ac:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	681b      	ldr	r3, [r3, #0]
 81023b4:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 81023b8:	687a      	ldr	r2, [r7, #4]
 81023ba:	6812      	ldr	r2, [r2, #0]
 81023bc:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 81023c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 81023c4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81023c8:	687b      	ldr	r3, [r7, #4]
 81023ca:	2200      	movs	r2, #0
 81023cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	2210      	movs	r2, #16
 81023d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81023d8:	2300      	movs	r3, #0
}
 81023da:	4618      	mov	r0, r3
 81023dc:	3710      	adds	r7, #16
 81023de:	46bd      	mov	sp, r7
 81023e0:	bd80      	pop	{r7, pc}
 81023e2:	bf00      	nop
 81023e4:	58024400 	.word	0x58024400
 81023e8:	58000400 	.word	0x58000400
 81023ec:	431bde83 	.word	0x431bde83
 81023f0:	0c020060 	.word	0x0c020060

081023f4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 81023f4:	b580      	push	{r7, lr}
 81023f6:	b084      	sub	sp, #16
 81023f8:	af00      	add	r7, sp, #0
 81023fa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	681b      	ldr	r3, [r3, #0]
 8102400:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8102404:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8102406:	68fb      	ldr	r3, [r7, #12]
 8102408:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810240c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 810240e:	f002 fdcb 	bl	8104fa8 <HAL_RCC_GetHCLKFreq>
 8102412:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8102414:	68bb      	ldr	r3, [r7, #8]
 8102416:	4a1a      	ldr	r2, [pc, #104]	@ (8102480 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8102418:	4293      	cmp	r3, r2
 810241a:	d804      	bhi.n	8102426 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 810241c:	68fb      	ldr	r3, [r7, #12]
 810241e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8102422:	60fb      	str	r3, [r7, #12]
 8102424:	e022      	b.n	810246c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8102426:	68bb      	ldr	r3, [r7, #8]
 8102428:	4a16      	ldr	r2, [pc, #88]	@ (8102484 <HAL_ETH_SetMDIOClockRange+0x90>)
 810242a:	4293      	cmp	r3, r2
 810242c:	d204      	bcs.n	8102438 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810242e:	68fb      	ldr	r3, [r7, #12]
 8102430:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8102434:	60fb      	str	r3, [r7, #12]
 8102436:	e019      	b.n	810246c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8102438:	68bb      	ldr	r3, [r7, #8]
 810243a:	4a13      	ldr	r2, [pc, #76]	@ (8102488 <HAL_ETH_SetMDIOClockRange+0x94>)
 810243c:	4293      	cmp	r3, r2
 810243e:	d915      	bls.n	810246c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8102440:	68bb      	ldr	r3, [r7, #8]
 8102442:	4a12      	ldr	r2, [pc, #72]	@ (810248c <HAL_ETH_SetMDIOClockRange+0x98>)
 8102444:	4293      	cmp	r3, r2
 8102446:	d804      	bhi.n	8102452 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8102448:	68fb      	ldr	r3, [r7, #12]
 810244a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810244e:	60fb      	str	r3, [r7, #12]
 8102450:	e00c      	b.n	810246c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8102452:	68bb      	ldr	r3, [r7, #8]
 8102454:	4a0e      	ldr	r2, [pc, #56]	@ (8102490 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8102456:	4293      	cmp	r3, r2
 8102458:	d804      	bhi.n	8102464 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810245a:	68fb      	ldr	r3, [r7, #12]
 810245c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8102460:	60fb      	str	r3, [r7, #12]
 8102462:	e003      	b.n	810246c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8102464:	68fb      	ldr	r3, [r7, #12]
 8102466:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 810246a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	68fa      	ldr	r2, [r7, #12]
 8102472:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8102476:	bf00      	nop
 8102478:	3710      	adds	r7, #16
 810247a:	46bd      	mov	sp, r7
 810247c:	bd80      	pop	{r7, pc}
 810247e:	bf00      	nop
 8102480:	02160ebf 	.word	0x02160ebf
 8102484:	03938700 	.word	0x03938700
 8102488:	05f5e0ff 	.word	0x05f5e0ff
 810248c:	08f0d17f 	.word	0x08f0d17f
 8102490:	0ee6b27f 	.word	0x0ee6b27f

08102494 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8102494:	b480      	push	{r7}
 8102496:	b085      	sub	sp, #20
 8102498:	af00      	add	r7, sp, #0
 810249a:	6078      	str	r0, [r7, #4]
 810249c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 810249e:	683b      	ldr	r3, [r7, #0]
 81024a0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 81024a2:	683b      	ldr	r3, [r7, #0]
 81024a4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 81024a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81024a8:	683b      	ldr	r3, [r7, #0]
 81024aa:	791b      	ldrb	r3, [r3, #4]
 81024ac:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 81024ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81024b0:	683b      	ldr	r3, [r7, #0]
 81024b2:	7b1b      	ldrb	r3, [r3, #12]
 81024b4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81024b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81024b8:	683b      	ldr	r3, [r7, #0]
 81024ba:	7b5b      	ldrb	r3, [r3, #13]
 81024bc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81024be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81024c0:	683b      	ldr	r3, [r7, #0]
 81024c2:	7b9b      	ldrb	r3, [r3, #14]
 81024c4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81024c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81024c8:	683b      	ldr	r3, [r7, #0]
 81024ca:	7bdb      	ldrb	r3, [r3, #15]
 81024cc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81024ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81024d0:	683a      	ldr	r2, [r7, #0]
 81024d2:	7c12      	ldrb	r2, [r2, #16]
 81024d4:	2a00      	cmp	r2, #0
 81024d6:	d102      	bne.n	81024de <ETH_SetMACConfig+0x4a>
 81024d8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 81024dc:	e000      	b.n	81024e0 <ETH_SetMACConfig+0x4c>
 81024de:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81024e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81024e2:	683a      	ldr	r2, [r7, #0]
 81024e4:	7c52      	ldrb	r2, [r2, #17]
 81024e6:	2a00      	cmp	r2, #0
 81024e8:	d102      	bne.n	81024f0 <ETH_SetMACConfig+0x5c>
 81024ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 81024ee:	e000      	b.n	81024f2 <ETH_SetMACConfig+0x5e>
 81024f0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81024f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 81024f4:	683b      	ldr	r3, [r7, #0]
 81024f6:	7c9b      	ldrb	r3, [r3, #18]
 81024f8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81024fa:	431a      	orrs	r2, r3
               macconf->Speed |
 81024fc:	683b      	ldr	r3, [r7, #0]
 81024fe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8102500:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8102502:	683b      	ldr	r3, [r7, #0]
 8102504:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8102506:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8102508:	683b      	ldr	r3, [r7, #0]
 810250a:	7f1b      	ldrb	r3, [r3, #28]
 810250c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 810250e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8102510:	683b      	ldr	r3, [r7, #0]
 8102512:	7f5b      	ldrb	r3, [r3, #29]
 8102514:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8102516:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8102518:	683a      	ldr	r2, [r7, #0]
 810251a:	7f92      	ldrb	r2, [r2, #30]
 810251c:	2a00      	cmp	r2, #0
 810251e:	d102      	bne.n	8102526 <ETH_SetMACConfig+0x92>
 8102520:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8102524:	e000      	b.n	8102528 <ETH_SetMACConfig+0x94>
 8102526:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8102528:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810252a:	683b      	ldr	r3, [r7, #0]
 810252c:	7fdb      	ldrb	r3, [r3, #31]
 810252e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8102530:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8102532:	683a      	ldr	r2, [r7, #0]
 8102534:	f892 2020 	ldrb.w	r2, [r2, #32]
 8102538:	2a00      	cmp	r2, #0
 810253a:	d102      	bne.n	8102542 <ETH_SetMACConfig+0xae>
 810253c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102540:	e000      	b.n	8102544 <ETH_SetMACConfig+0xb0>
 8102542:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8102544:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8102546:	683b      	ldr	r3, [r7, #0]
 8102548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810254a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 810254c:	683b      	ldr	r3, [r7, #0]
 810254e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8102552:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8102554:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8102556:	683b      	ldr	r3, [r7, #0]
 8102558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 810255a:	4313      	orrs	r3, r2
 810255c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	681a      	ldr	r2, [r3, #0]
 8102564:	4b57      	ldr	r3, [pc, #348]	@ (81026c4 <ETH_SetMACConfig+0x230>)
 8102566:	4013      	ands	r3, r2
 8102568:	687a      	ldr	r2, [r7, #4]
 810256a:	6812      	ldr	r2, [r2, #0]
 810256c:	68f9      	ldr	r1, [r7, #12]
 810256e:	430b      	orrs	r3, r1
 8102570:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8102572:	683b      	ldr	r3, [r7, #0]
 8102574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102576:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8102578:	683b      	ldr	r3, [r7, #0]
 810257a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810257e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8102580:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8102582:	683b      	ldr	r3, [r7, #0]
 8102584:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8102588:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810258a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 810258c:	683b      	ldr	r3, [r7, #0]
 810258e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8102592:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8102594:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8102596:	683a      	ldr	r2, [r7, #0]
 8102598:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 810259c:	2a00      	cmp	r2, #0
 810259e:	d102      	bne.n	81025a6 <ETH_SetMACConfig+0x112>
 81025a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81025a4:	e000      	b.n	81025a8 <ETH_SetMACConfig+0x114>
 81025a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81025a8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81025aa:	683b      	ldr	r3, [r7, #0]
 81025ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81025ae:	4313      	orrs	r3, r2
 81025b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81025b2:	687b      	ldr	r3, [r7, #4]
 81025b4:	681b      	ldr	r3, [r3, #0]
 81025b6:	685a      	ldr	r2, [r3, #4]
 81025b8:	4b43      	ldr	r3, [pc, #268]	@ (81026c8 <ETH_SetMACConfig+0x234>)
 81025ba:	4013      	ands	r3, r2
 81025bc:	687a      	ldr	r2, [r7, #4]
 81025be:	6812      	ldr	r2, [r2, #0]
 81025c0:	68f9      	ldr	r1, [r7, #12]
 81025c2:	430b      	orrs	r3, r1
 81025c4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81025c6:	683b      	ldr	r3, [r7, #0]
 81025c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81025cc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81025ce:	683b      	ldr	r3, [r7, #0]
 81025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81025d2:	4313      	orrs	r3, r2
 81025d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	681b      	ldr	r3, [r3, #0]
 81025da:	68db      	ldr	r3, [r3, #12]
 81025dc:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 81025e0:	f023 0301 	bic.w	r3, r3, #1
 81025e4:	687a      	ldr	r2, [r7, #4]
 81025e6:	6812      	ldr	r2, [r2, #0]
 81025e8:	68f9      	ldr	r1, [r7, #12]
 81025ea:	430b      	orrs	r3, r1
 81025ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81025ee:	683b      	ldr	r3, [r7, #0]
 81025f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 81025f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 81025f6:	683b      	ldr	r3, [r7, #0]
 81025f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81025fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 81025fc:	683a      	ldr	r2, [r7, #0]
 81025fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8102602:	2a00      	cmp	r2, #0
 8102604:	d101      	bne.n	810260a <ETH_SetMACConfig+0x176>
 8102606:	2280      	movs	r2, #128	@ 0x80
 8102608:	e000      	b.n	810260c <ETH_SetMACConfig+0x178>
 810260a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 810260c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 810260e:	683b      	ldr	r3, [r7, #0]
 8102610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102612:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8102614:	4313      	orrs	r3, r2
 8102616:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810261e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8102622:	4013      	ands	r3, r2
 8102624:	687a      	ldr	r2, [r7, #4]
 8102626:	6812      	ldr	r2, [r2, #0]
 8102628:	68f9      	ldr	r1, [r7, #12]
 810262a:	430b      	orrs	r3, r1
 810262c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810262e:	683b      	ldr	r3, [r7, #0]
 8102630:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8102634:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8102636:	683b      	ldr	r3, [r7, #0]
 8102638:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 810263c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810263e:	4313      	orrs	r3, r2
 8102640:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810264a:	f023 0103 	bic.w	r1, r3, #3
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	68fa      	ldr	r2, [r7, #12]
 8102654:	430a      	orrs	r2, r1
 8102656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	681b      	ldr	r3, [r3, #0]
 810265e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8102662:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8102666:	683b      	ldr	r3, [r7, #0]
 8102668:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	430a      	orrs	r2, r1
 8102670:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8102674:	683b      	ldr	r3, [r7, #0]
 8102676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8102678:	683a      	ldr	r2, [r7, #0]
 810267a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 810267e:	2a00      	cmp	r2, #0
 8102680:	d101      	bne.n	8102686 <ETH_SetMACConfig+0x1f2>
 8102682:	2240      	movs	r2, #64	@ 0x40
 8102684:	e000      	b.n	8102688 <ETH_SetMACConfig+0x1f4>
 8102686:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8102688:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 810268a:	683b      	ldr	r3, [r7, #0]
 810268c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8102690:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8102692:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8102694:	683b      	ldr	r3, [r7, #0]
 8102696:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 810269a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 810269c:	4313      	orrs	r3, r2
 810269e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	681b      	ldr	r3, [r3, #0]
 81026a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81026a8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	68fa      	ldr	r2, [r7, #12]
 81026b2:	430a      	orrs	r2, r1
 81026b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 81026b8:	bf00      	nop
 81026ba:	3714      	adds	r7, #20
 81026bc:	46bd      	mov	sp, r7
 81026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026c2:	4770      	bx	lr
 81026c4:	00048083 	.word	0x00048083
 81026c8:	c0f88000 	.word	0xc0f88000

081026cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 81026cc:	b480      	push	{r7}
 81026ce:	b085      	sub	sp, #20
 81026d0:	af00      	add	r7, sp, #0
 81026d2:	6078      	str	r0, [r7, #4]
 81026d4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81026de:	681b      	ldr	r3, [r3, #0]
 81026e0:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 81026e4:	f023 0302 	bic.w	r3, r3, #2
 81026e8:	683a      	ldr	r2, [r7, #0]
 81026ea:	6811      	ldr	r1, [r2, #0]
 81026ec:	687a      	ldr	r2, [r7, #4]
 81026ee:	6812      	ldr	r2, [r2, #0]
 81026f0:	430b      	orrs	r3, r1
 81026f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81026f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81026f8:	683b      	ldr	r3, [r7, #0]
 81026fa:	791b      	ldrb	r3, [r3, #4]
 81026fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 81026fe:	683b      	ldr	r3, [r7, #0]
 8102700:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8102702:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8102704:	683b      	ldr	r3, [r7, #0]
 8102706:	7b1b      	ldrb	r3, [r3, #12]
 8102708:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810270a:	4313      	orrs	r3, r2
 810270c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	681b      	ldr	r3, [r3, #0]
 8102712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102716:	685b      	ldr	r3, [r3, #4]
 8102718:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 810271c:	f023 0301 	bic.w	r3, r3, #1
 8102720:	687a      	ldr	r2, [r7, #4]
 8102722:	6812      	ldr	r2, [r2, #0]
 8102724:	68f9      	ldr	r1, [r7, #12]
 8102726:	430b      	orrs	r3, r1
 8102728:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810272c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810272e:	683b      	ldr	r3, [r7, #0]
 8102730:	7b5b      	ldrb	r3, [r3, #13]
 8102732:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8102734:	683b      	ldr	r3, [r7, #0]
 8102736:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102738:	4313      	orrs	r3, r2
 810273a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102744:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8102748:	4b21      	ldr	r3, [pc, #132]	@ (81027d0 <ETH_SetDMAConfig+0x104>)
 810274a:	4013      	ands	r3, r2
 810274c:	687a      	ldr	r2, [r7, #4]
 810274e:	6812      	ldr	r2, [r2, #0]
 8102750:	68f9      	ldr	r1, [r7, #12]
 8102752:	430b      	orrs	r3, r1
 8102754:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102758:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 810275c:	683b      	ldr	r3, [r7, #0]
 810275e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8102760:	683b      	ldr	r3, [r7, #0]
 8102762:	7d1b      	ldrb	r3, [r3, #20]
 8102764:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8102766:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8102768:	683b      	ldr	r3, [r7, #0]
 810276a:	7f5b      	ldrb	r3, [r3, #29]
 810276c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810276e:	4313      	orrs	r3, r2
 8102770:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	681b      	ldr	r3, [r3, #0]
 8102776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810277a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810277e:	4b15      	ldr	r3, [pc, #84]	@ (81027d4 <ETH_SetDMAConfig+0x108>)
 8102780:	4013      	ands	r3, r2
 8102782:	687a      	ldr	r2, [r7, #4]
 8102784:	6812      	ldr	r2, [r2, #0]
 8102786:	68f9      	ldr	r1, [r7, #12]
 8102788:	430b      	orrs	r3, r1
 810278a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810278e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8102792:	683b      	ldr	r3, [r7, #0]
 8102794:	7f1b      	ldrb	r3, [r3, #28]
 8102796:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8102798:	683b      	ldr	r3, [r7, #0]
 810279a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810279c:	4313      	orrs	r3, r2
 810279e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81027a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81027ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81027b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81027b4:	687a      	ldr	r2, [r7, #4]
 81027b6:	6812      	ldr	r2, [r2, #0]
 81027b8:	68f9      	ldr	r1, [r7, #12]
 81027ba:	430b      	orrs	r3, r1
 81027bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81027c0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 81027c4:	bf00      	nop
 81027c6:	3714      	adds	r7, #20
 81027c8:	46bd      	mov	sp, r7
 81027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ce:	4770      	bx	lr
 81027d0:	fffec000 	.word	0xfffec000
 81027d4:	ffc0efef 	.word	0xffc0efef

081027d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 81027d8:	b580      	push	{r7, lr}
 81027da:	b0a4      	sub	sp, #144	@ 0x90
 81027dc:	af00      	add	r7, sp, #0
 81027de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 81027e0:	2301      	movs	r3, #1
 81027e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 81027e6:	2300      	movs	r3, #0
 81027e8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 81027ea:	2300      	movs	r3, #0
 81027ec:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 81027f0:	2300      	movs	r3, #0
 81027f2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 81027f6:	2301      	movs	r3, #1
 81027f8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 81027fc:	2301      	movs	r3, #1
 81027fe:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8102802:	2301      	movs	r3, #1
 8102804:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8102808:	2300      	movs	r3, #0
 810280a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810280e:	2301      	movs	r3, #1
 8102810:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8102814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8102818:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 810281a:	2300      	movs	r3, #0
 810281c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8102820:	2300      	movs	r3, #0
 8102822:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8102824:	2300      	movs	r3, #0
 8102826:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 810282a:	2300      	movs	r3, #0
 810282c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8102830:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8102834:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8102836:	2300      	movs	r3, #0
 8102838:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 810283c:	2300      	movs	r3, #0
 810283e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8102840:	2301      	movs	r3, #1
 8102842:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8102846:	2300      	movs	r3, #0
 8102848:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 810284c:	2300      	movs	r3, #0
 810284e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8102852:	2300      	movs	r3, #0
 8102854:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8102856:	2300      	movs	r3, #0
 8102858:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 810285a:	2300      	movs	r3, #0
 810285c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810285e:	2300      	movs	r3, #0
 8102860:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8102864:	2300      	movs	r3, #0
 8102866:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 810286a:	2301      	movs	r3, #1
 810286c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8102870:	2320      	movs	r3, #32
 8102872:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8102876:	2301      	movs	r3, #1
 8102878:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 810287c:	2300      	movs	r3, #0
 810287e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8102882:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8102886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8102888:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810288c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 810288e:	2300      	movs	r3, #0
 8102890:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8102894:	2302      	movs	r3, #2
 8102896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 810289a:	2300      	movs	r3, #0
 810289c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81028a0:	2300      	movs	r3, #0
 81028a2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81028a6:	2300      	movs	r3, #0
 81028a8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 81028ac:	2301      	movs	r3, #1
 81028ae:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 81028b2:	2300      	movs	r3, #0
 81028b4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81028b6:	2301      	movs	r3, #1
 81028b8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81028bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81028c0:	4619      	mov	r1, r3
 81028c2:	6878      	ldr	r0, [r7, #4]
 81028c4:	f7ff fde6 	bl	8102494 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81028c8:	2301      	movs	r3, #1
 81028ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81028cc:	2301      	movs	r3, #1
 81028ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81028d0:	2300      	movs	r3, #0
 81028d2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81028d4:	2300      	movs	r3, #0
 81028d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81028da:	2300      	movs	r3, #0
 81028dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81028de:	2300      	movs	r3, #0
 81028e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 81028e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81028e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 81028e8:	2300      	movs	r3, #0
 81028ea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 81028ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81028f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 81028f2:	2300      	movs	r3, #0
 81028f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 81028f8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 81028fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 81028fe:	f107 0308 	add.w	r3, r7, #8
 8102902:	4619      	mov	r1, r3
 8102904:	6878      	ldr	r0, [r7, #4]
 8102906:	f7ff fee1 	bl	81026cc <ETH_SetDMAConfig>
}
 810290a:	bf00      	nop
 810290c:	3790      	adds	r7, #144	@ 0x90
 810290e:	46bd      	mov	sp, r7
 8102910:	bd80      	pop	{r7, pc}

08102912 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8102912:	b480      	push	{r7}
 8102914:	b085      	sub	sp, #20
 8102916:	af00      	add	r7, sp, #0
 8102918:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810291a:	2300      	movs	r3, #0
 810291c:	60fb      	str	r3, [r7, #12]
 810291e:	e01d      	b.n	810295c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	68d9      	ldr	r1, [r3, #12]
 8102924:	68fa      	ldr	r2, [r7, #12]
 8102926:	4613      	mov	r3, r2
 8102928:	005b      	lsls	r3, r3, #1
 810292a:	4413      	add	r3, r2
 810292c:	00db      	lsls	r3, r3, #3
 810292e:	440b      	add	r3, r1
 8102930:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8102932:	68bb      	ldr	r3, [r7, #8]
 8102934:	2200      	movs	r2, #0
 8102936:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8102938:	68bb      	ldr	r3, [r7, #8]
 810293a:	2200      	movs	r2, #0
 810293c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810293e:	68bb      	ldr	r3, [r7, #8]
 8102940:	2200      	movs	r2, #0
 8102942:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8102944:	68bb      	ldr	r3, [r7, #8]
 8102946:	2200      	movs	r2, #0
 8102948:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 810294a:	68b9      	ldr	r1, [r7, #8]
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	68fa      	ldr	r2, [r7, #12]
 8102950:	3206      	adds	r2, #6
 8102952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102956:	68fb      	ldr	r3, [r7, #12]
 8102958:	3301      	adds	r3, #1
 810295a:	60fb      	str	r3, [r7, #12]
 810295c:	68fb      	ldr	r3, [r7, #12]
 810295e:	2b03      	cmp	r3, #3
 8102960:	d9de      	bls.n	8102920 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	2200      	movs	r2, #0
 8102966:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102970:	461a      	mov	r2, r3
 8102972:	2303      	movs	r3, #3
 8102974:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	68da      	ldr	r2, [r3, #12]
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102984:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8102988:	687b      	ldr	r3, [r7, #4]
 810298a:	68da      	ldr	r2, [r3, #12]
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102994:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8102998:	bf00      	nop
 810299a:	3714      	adds	r7, #20
 810299c:	46bd      	mov	sp, r7
 810299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a2:	4770      	bx	lr

081029a4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81029a4:	b480      	push	{r7}
 81029a6:	b085      	sub	sp, #20
 81029a8:	af00      	add	r7, sp, #0
 81029aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81029ac:	2300      	movs	r3, #0
 81029ae:	60fb      	str	r3, [r7, #12]
 81029b0:	e023      	b.n	81029fa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	6919      	ldr	r1, [r3, #16]
 81029b6:	68fa      	ldr	r2, [r7, #12]
 81029b8:	4613      	mov	r3, r2
 81029ba:	005b      	lsls	r3, r3, #1
 81029bc:	4413      	add	r3, r2
 81029be:	00db      	lsls	r3, r3, #3
 81029c0:	440b      	add	r3, r1
 81029c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 81029c4:	68bb      	ldr	r3, [r7, #8]
 81029c6:	2200      	movs	r2, #0
 81029c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 81029ca:	68bb      	ldr	r3, [r7, #8]
 81029cc:	2200      	movs	r2, #0
 81029ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 81029d0:	68bb      	ldr	r3, [r7, #8]
 81029d2:	2200      	movs	r2, #0
 81029d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 81029d6:	68bb      	ldr	r3, [r7, #8]
 81029d8:	2200      	movs	r2, #0
 81029da:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 81029dc:	68bb      	ldr	r3, [r7, #8]
 81029de:	2200      	movs	r2, #0
 81029e0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 81029e2:	68bb      	ldr	r3, [r7, #8]
 81029e4:	2200      	movs	r2, #0
 81029e6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 81029e8:	68b9      	ldr	r1, [r7, #8]
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	68fa      	ldr	r2, [r7, #12]
 81029ee:	3212      	adds	r2, #18
 81029f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81029f4:	68fb      	ldr	r3, [r7, #12]
 81029f6:	3301      	adds	r3, #1
 81029f8:	60fb      	str	r3, [r7, #12]
 81029fa:	68fb      	ldr	r3, [r7, #12]
 81029fc:	2b03      	cmp	r3, #3
 81029fe:	d9d8      	bls.n	81029b2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	2200      	movs	r2, #0
 8102a04:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	2200      	movs	r2, #0
 8102a0a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	2200      	movs	r2, #0
 8102a10:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	2200      	movs	r2, #0
 8102a16:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	2200      	movs	r2, #0
 8102a1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102a26:	461a      	mov	r2, r3
 8102a28:	2303      	movs	r3, #3
 8102a2a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	691a      	ldr	r2, [r3, #16]
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	681b      	ldr	r3, [r3, #0]
 8102a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102a3a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	691b      	ldr	r3, [r3, #16]
 8102a42:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102a4e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8102a52:	bf00      	nop
 8102a54:	3714      	adds	r7, #20
 8102a56:	46bd      	mov	sp, r7
 8102a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a5c:	4770      	bx	lr
	...

08102a60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8102a60:	b580      	push	{r7, lr}
 8102a62:	b098      	sub	sp, #96	@ 0x60
 8102a64:	af00      	add	r7, sp, #0
 8102a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8102a68:	4a84      	ldr	r2, [pc, #528]	@ (8102c7c <HAL_FDCAN_Init+0x21c>)
 8102a6a:	f107 030c 	add.w	r3, r7, #12
 8102a6e:	4611      	mov	r1, r2
 8102a70:	224c      	movs	r2, #76	@ 0x4c
 8102a72:	4618      	mov	r0, r3
 8102a74:	f007 fbae 	bl	810a1d4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	2b00      	cmp	r3, #0
 8102a7c:	d101      	bne.n	8102a82 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8102a7e:	2301      	movs	r3, #1
 8102a80:	e1c6      	b.n	8102e10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	4a7e      	ldr	r2, [pc, #504]	@ (8102c80 <HAL_FDCAN_Init+0x220>)
 8102a88:	4293      	cmp	r3, r2
 8102a8a:	d106      	bne.n	8102a9a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8102a94:	461a      	mov	r2, r3
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8102aa0:	b2db      	uxtb	r3, r3
 8102aa2:	2b00      	cmp	r3, #0
 8102aa4:	d106      	bne.n	8102ab4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	2200      	movs	r2, #0
 8102aaa:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8102aae:	6878      	ldr	r0, [r7, #4]
 8102ab0:	f7fe fbc6 	bl	8101240 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	681b      	ldr	r3, [r3, #0]
 8102ab8:	699a      	ldr	r2, [r3, #24]
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	f022 0210 	bic.w	r2, r2, #16
 8102ac2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8102ac4:	f7ff fa50 	bl	8101f68 <HAL_GetTick>
 8102ac8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8102aca:	e014      	b.n	8102af6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8102acc:	f7ff fa4c 	bl	8101f68 <HAL_GetTick>
 8102ad0:	4602      	mov	r2, r0
 8102ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8102ad4:	1ad3      	subs	r3, r2, r3
 8102ad6:	2b0a      	cmp	r3, #10
 8102ad8:	d90d      	bls.n	8102af6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102ae0:	f043 0201 	orr.w	r2, r3, #1
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	2203      	movs	r2, #3
 8102aee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8102af2:	2301      	movs	r3, #1
 8102af4:	e18c      	b.n	8102e10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8102af6:	687b      	ldr	r3, [r7, #4]
 8102af8:	681b      	ldr	r3, [r3, #0]
 8102afa:	699b      	ldr	r3, [r3, #24]
 8102afc:	f003 0308 	and.w	r3, r3, #8
 8102b00:	2b08      	cmp	r3, #8
 8102b02:	d0e3      	beq.n	8102acc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	699a      	ldr	r2, [r3, #24]
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	681b      	ldr	r3, [r3, #0]
 8102b0e:	f042 0201 	orr.w	r2, r2, #1
 8102b12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8102b14:	f7ff fa28 	bl	8101f68 <HAL_GetTick>
 8102b18:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8102b1a:	e014      	b.n	8102b46 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8102b1c:	f7ff fa24 	bl	8101f68 <HAL_GetTick>
 8102b20:	4602      	mov	r2, r0
 8102b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8102b24:	1ad3      	subs	r3, r2, r3
 8102b26:	2b0a      	cmp	r3, #10
 8102b28:	d90d      	bls.n	8102b46 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102b30:	f043 0201 	orr.w	r2, r3, #1
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	2203      	movs	r2, #3
 8102b3e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8102b42:	2301      	movs	r3, #1
 8102b44:	e164      	b.n	8102e10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	699b      	ldr	r3, [r3, #24]
 8102b4c:	f003 0301 	and.w	r3, r3, #1
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	d0e3      	beq.n	8102b1c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	699a      	ldr	r2, [r3, #24]
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	681b      	ldr	r3, [r3, #0]
 8102b5e:	f042 0202 	orr.w	r2, r2, #2
 8102b62:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	7c1b      	ldrb	r3, [r3, #16]
 8102b68:	2b01      	cmp	r3, #1
 8102b6a:	d108      	bne.n	8102b7e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	699a      	ldr	r2, [r3, #24]
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8102b7a:	619a      	str	r2, [r3, #24]
 8102b7c:	e007      	b.n	8102b8e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	699a      	ldr	r2, [r3, #24]
 8102b84:	687b      	ldr	r3, [r7, #4]
 8102b86:	681b      	ldr	r3, [r3, #0]
 8102b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8102b8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	7c5b      	ldrb	r3, [r3, #17]
 8102b92:	2b01      	cmp	r3, #1
 8102b94:	d108      	bne.n	8102ba8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	699a      	ldr	r2, [r3, #24]
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	681b      	ldr	r3, [r3, #0]
 8102ba0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8102ba4:	619a      	str	r2, [r3, #24]
 8102ba6:	e007      	b.n	8102bb8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	699a      	ldr	r2, [r3, #24]
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8102bb6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	7c9b      	ldrb	r3, [r3, #18]
 8102bbc:	2b01      	cmp	r3, #1
 8102bbe:	d108      	bne.n	8102bd2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8102bc0:	687b      	ldr	r3, [r7, #4]
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	699a      	ldr	r2, [r3, #24]
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	681b      	ldr	r3, [r3, #0]
 8102bca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8102bce:	619a      	str	r2, [r3, #24]
 8102bd0:	e007      	b.n	8102be2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	699a      	ldr	r2, [r3, #24]
 8102bd8:	687b      	ldr	r3, [r7, #4]
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8102be0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	681b      	ldr	r3, [r3, #0]
 8102be6:	699b      	ldr	r3, [r3, #24]
 8102be8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	689a      	ldr	r2, [r3, #8]
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	430a      	orrs	r2, r1
 8102bf6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8102bf8:	687b      	ldr	r3, [r7, #4]
 8102bfa:	681b      	ldr	r3, [r3, #0]
 8102bfc:	699a      	ldr	r2, [r3, #24]
 8102bfe:	687b      	ldr	r3, [r7, #4]
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8102c06:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	691a      	ldr	r2, [r3, #16]
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	f022 0210 	bic.w	r2, r2, #16
 8102c16:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	68db      	ldr	r3, [r3, #12]
 8102c1c:	2b01      	cmp	r3, #1
 8102c1e:	d108      	bne.n	8102c32 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8102c20:	687b      	ldr	r3, [r7, #4]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	699a      	ldr	r2, [r3, #24]
 8102c26:	687b      	ldr	r3, [r7, #4]
 8102c28:	681b      	ldr	r3, [r3, #0]
 8102c2a:	f042 0204 	orr.w	r2, r2, #4
 8102c2e:	619a      	str	r2, [r3, #24]
 8102c30:	e030      	b.n	8102c94 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	68db      	ldr	r3, [r3, #12]
 8102c36:	2b00      	cmp	r3, #0
 8102c38:	d02c      	beq.n	8102c94 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8102c3a:	687b      	ldr	r3, [r7, #4]
 8102c3c:	68db      	ldr	r3, [r3, #12]
 8102c3e:	2b02      	cmp	r3, #2
 8102c40:	d020      	beq.n	8102c84 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	699a      	ldr	r2, [r3, #24]
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8102c50:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8102c52:	687b      	ldr	r3, [r7, #4]
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	691a      	ldr	r2, [r3, #16]
 8102c58:	687b      	ldr	r3, [r7, #4]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	f042 0210 	orr.w	r2, r2, #16
 8102c60:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	68db      	ldr	r3, [r3, #12]
 8102c66:	2b03      	cmp	r3, #3
 8102c68:	d114      	bne.n	8102c94 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	699a      	ldr	r2, [r3, #24]
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	f042 0220 	orr.w	r2, r2, #32
 8102c78:	619a      	str	r2, [r3, #24]
 8102c7a:	e00b      	b.n	8102c94 <HAL_FDCAN_Init+0x234>
 8102c7c:	0810a208 	.word	0x0810a208
 8102c80:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	699a      	ldr	r2, [r3, #24]
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	681b      	ldr	r3, [r3, #0]
 8102c8e:	f042 0220 	orr.w	r2, r2, #32
 8102c92:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	699b      	ldr	r3, [r3, #24]
 8102c98:	3b01      	subs	r3, #1
 8102c9a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	69db      	ldr	r3, [r3, #28]
 8102ca0:	3b01      	subs	r3, #1
 8102ca2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102ca4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8102ca6:	687b      	ldr	r3, [r7, #4]
 8102ca8:	6a1b      	ldr	r3, [r3, #32]
 8102caa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8102cac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	695b      	ldr	r3, [r3, #20]
 8102cb4:	3b01      	subs	r3, #1
 8102cb6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102cb8:	687b      	ldr	r3, [r7, #4]
 8102cba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8102cbc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102cbe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	689b      	ldr	r3, [r3, #8]
 8102cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102cc8:	d115      	bne.n	8102cf6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102cce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102cd4:	3b01      	subs	r3, #1
 8102cd6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8102cd8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102cde:	3b01      	subs	r3, #1
 8102ce0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8102ce2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102cea:	3b01      	subs	r3, #1
 8102cec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8102cf2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8102cf4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102cfa:	2b00      	cmp	r3, #0
 8102cfc:	d00a      	beq.n	8102d14 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	430a      	orrs	r2, r1
 8102d10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102d1c:	4413      	add	r3, r2
 8102d1e:	2b00      	cmp	r3, #0
 8102d20:	d011      	beq.n	8102d46 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8102d2a:	f023 0107 	bic.w	r1, r3, #7
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102d32:	009b      	lsls	r3, r3, #2
 8102d34:	3360      	adds	r3, #96	@ 0x60
 8102d36:	443b      	add	r3, r7
 8102d38:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	430a      	orrs	r2, r1
 8102d42:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102d4a:	2b00      	cmp	r3, #0
 8102d4c:	d011      	beq.n	8102d72 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102d56:	f023 0107 	bic.w	r1, r3, #7
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102d5e:	009b      	lsls	r3, r3, #2
 8102d60:	3360      	adds	r3, #96	@ 0x60
 8102d62:	443b      	add	r3, r7
 8102d64:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	430a      	orrs	r2, r1
 8102d6e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102d76:	2b00      	cmp	r3, #0
 8102d78:	d012      	beq.n	8102da0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102d82:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102d8a:	009b      	lsls	r3, r3, #2
 8102d8c:	3360      	adds	r3, #96	@ 0x60
 8102d8e:	443b      	add	r3, r7
 8102d90:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8102d94:	011a      	lsls	r2, r3, #4
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	430a      	orrs	r2, r1
 8102d9c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102da4:	2b00      	cmp	r3, #0
 8102da6:	d012      	beq.n	8102dce <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102db0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102db8:	009b      	lsls	r3, r3, #2
 8102dba:	3360      	adds	r3, #96	@ 0x60
 8102dbc:	443b      	add	r3, r7
 8102dbe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8102dc2:	021a      	lsls	r2, r3, #8
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	430a      	orrs	r2, r1
 8102dca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8102dce:	687b      	ldr	r3, [r7, #4]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	4a11      	ldr	r2, [pc, #68]	@ (8102e18 <HAL_FDCAN_Init+0x3b8>)
 8102dd4:	4293      	cmp	r3, r2
 8102dd6:	d107      	bne.n	8102de8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8102dd8:	687b      	ldr	r3, [r7, #4]
 8102dda:	685b      	ldr	r3, [r3, #4]
 8102ddc:	689a      	ldr	r2, [r3, #8]
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	685b      	ldr	r3, [r3, #4]
 8102de2:	f022 0203 	bic.w	r2, r2, #3
 8102de6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	2200      	movs	r2, #0
 8102dec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	2200      	movs	r2, #0
 8102df4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	2201      	movs	r2, #1
 8102dfc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8102e00:	6878      	ldr	r0, [r7, #4]
 8102e02:	f000 f80b 	bl	8102e1c <FDCAN_CalcultateRamBlockAddresses>
 8102e06:	4603      	mov	r3, r0
 8102e08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8102e0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8102e10:	4618      	mov	r0, r3
 8102e12:	3760      	adds	r7, #96	@ 0x60
 8102e14:	46bd      	mov	sp, r7
 8102e16:	bd80      	pop	{r7, pc}
 8102e18:	4000a000 	.word	0x4000a000

08102e1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8102e1c:	b480      	push	{r7}
 8102e1e:	b085      	sub	sp, #20
 8102e20:	af00      	add	r7, sp, #0
 8102e22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102e28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102e32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102e36:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102e3a:	68ba      	ldr	r2, [r7, #8]
 8102e3c:	0091      	lsls	r1, r2, #2
 8102e3e:	687a      	ldr	r2, [r7, #4]
 8102e40:	6812      	ldr	r2, [r2, #0]
 8102e42:	430b      	orrs	r3, r1
 8102e44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102e50:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102e58:	041a      	lsls	r2, r3, #16
 8102e5a:	687b      	ldr	r3, [r7, #4]
 8102e5c:	681b      	ldr	r3, [r3, #0]
 8102e5e:	430a      	orrs	r2, r1
 8102e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8102e64:	687b      	ldr	r3, [r7, #4]
 8102e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102e68:	68ba      	ldr	r2, [r7, #8]
 8102e6a:	4413      	add	r3, r2
 8102e6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102e7a:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102e7e:	68ba      	ldr	r2, [r7, #8]
 8102e80:	0091      	lsls	r1, r2, #2
 8102e82:	687a      	ldr	r2, [r7, #4]
 8102e84:	6812      	ldr	r2, [r2, #0]
 8102e86:	430b      	orrs	r3, r1
 8102e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102e94:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102e9c:	041a      	lsls	r2, r3, #16
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	430a      	orrs	r2, r1
 8102ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102eac:	005b      	lsls	r3, r3, #1
 8102eae:	68ba      	ldr	r2, [r7, #8]
 8102eb0:	4413      	add	r3, r2
 8102eb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102ebc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102ec0:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102ec4:	68ba      	ldr	r2, [r7, #8]
 8102ec6:	0091      	lsls	r1, r2, #2
 8102ec8:	687a      	ldr	r2, [r7, #4]
 8102eca:	6812      	ldr	r2, [r2, #0]
 8102ecc:	430b      	orrs	r3, r1
 8102ece:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102eda:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102ee2:	041a      	lsls	r2, r3, #16
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	430a      	orrs	r2, r1
 8102eea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102ef2:	687a      	ldr	r2, [r7, #4]
 8102ef4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8102ef6:	fb02 f303 	mul.w	r3, r2, r3
 8102efa:	68ba      	ldr	r2, [r7, #8]
 8102efc:	4413      	add	r3, r2
 8102efe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8102f00:	687b      	ldr	r3, [r7, #4]
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102f08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102f0c:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102f10:	68ba      	ldr	r2, [r7, #8]
 8102f12:	0091      	lsls	r1, r2, #2
 8102f14:	687a      	ldr	r2, [r7, #4]
 8102f16:	6812      	ldr	r2, [r2, #0]
 8102f18:	430b      	orrs	r3, r1
 8102f1a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102f26:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102f2e:	041a      	lsls	r2, r3, #16
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	430a      	orrs	r2, r1
 8102f36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102f3e:	687a      	ldr	r2, [r7, #4]
 8102f40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8102f42:	fb02 f303 	mul.w	r3, r2, r3
 8102f46:	68ba      	ldr	r2, [r7, #8]
 8102f48:	4413      	add	r3, r2
 8102f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102f54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102f58:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102f5c:	68ba      	ldr	r2, [r7, #8]
 8102f5e:	0091      	lsls	r1, r2, #2
 8102f60:	687a      	ldr	r2, [r7, #4]
 8102f62:	6812      	ldr	r2, [r2, #0]
 8102f64:	430b      	orrs	r3, r1
 8102f66:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102f6e:	687a      	ldr	r2, [r7, #4]
 8102f70:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8102f72:	fb02 f303 	mul.w	r3, r2, r3
 8102f76:	68ba      	ldr	r2, [r7, #8]
 8102f78:	4413      	add	r3, r2
 8102f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102f84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102f88:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102f8c:	68ba      	ldr	r2, [r7, #8]
 8102f8e:	0091      	lsls	r1, r2, #2
 8102f90:	687a      	ldr	r2, [r7, #4]
 8102f92:	6812      	ldr	r2, [r2, #0]
 8102f94:	430b      	orrs	r3, r1
 8102f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102fa2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102faa:	041a      	lsls	r2, r3, #16
 8102fac:	687b      	ldr	r3, [r7, #4]
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	430a      	orrs	r2, r1
 8102fb2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102fba:	005b      	lsls	r3, r3, #1
 8102fbc:	68ba      	ldr	r2, [r7, #8]
 8102fbe:	4413      	add	r3, r2
 8102fc0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102fce:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102fd2:	68ba      	ldr	r2, [r7, #8]
 8102fd4:	0091      	lsls	r1, r2, #2
 8102fd6:	687a      	ldr	r2, [r7, #4]
 8102fd8:	6812      	ldr	r2, [r2, #0]
 8102fda:	430b      	orrs	r3, r1
 8102fdc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102fe8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102ff0:	041a      	lsls	r2, r3, #16
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	681b      	ldr	r3, [r3, #0]
 8102ff6:	430a      	orrs	r2, r1
 8102ff8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8103004:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8103008:	687b      	ldr	r3, [r7, #4]
 810300a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810300c:	061a      	lsls	r2, r3, #24
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	430a      	orrs	r2, r1
 8103014:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810301c:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8103020:	f503 532c 	add.w	r3, r3, #11008	@ 0x2b00
 8103024:	009a      	lsls	r2, r3, #2
 8103026:	687b      	ldr	r3, [r7, #4]
 8103028:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810302e:	687b      	ldr	r3, [r7, #4]
 8103030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103032:	009b      	lsls	r3, r3, #2
 8103034:	441a      	add	r2, r3
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103042:	00db      	lsls	r3, r3, #3
 8103044:	441a      	add	r2, r3
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103052:	6879      	ldr	r1, [r7, #4]
 8103054:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8103056:	fb01 f303 	mul.w	r3, r1, r3
 810305a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 810305c:	441a      	add	r2, r3
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810306a:	6879      	ldr	r1, [r7, #4]
 810306c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 810306e:	fb01 f303 	mul.w	r3, r1, r3
 8103072:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8103074:	441a      	add	r2, r3
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 810307e:	687b      	ldr	r3, [r7, #4]
 8103080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103082:	6879      	ldr	r1, [r7, #4]
 8103084:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8103086:	fb01 f303 	mul.w	r3, r1, r3
 810308a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 810308c:	441a      	add	r2, r3
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8103094:	687b      	ldr	r3, [r7, #4]
 8103096:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810309e:	00db      	lsls	r3, r3, #3
 81030a0:	441a      	add	r2, r3
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81030b2:	6879      	ldr	r1, [r7, #4]
 81030b4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 81030b6:	fb01 f303 	mul.w	r3, r1, r3
 81030ba:	009b      	lsls	r3, r3, #2
 81030bc:	441a      	add	r2, r3
 81030be:	687b      	ldr	r3, [r7, #4]
 81030c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81030ce:	6879      	ldr	r1, [r7, #4]
 81030d0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 81030d2:	fb01 f303 	mul.w	r3, r1, r3
 81030d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 81030d8:	441a      	add	r2, r3
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81030e6:	4a14      	ldr	r2, [pc, #80]	@ (8103138 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 81030e8:	4293      	cmp	r3, r2
 81030ea:	d90d      	bls.n	8103108 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81030f2:	f043 0220 	orr.w	r2, r3, #32
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	2203      	movs	r2, #3
 8103100:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8103104:	2301      	movs	r3, #1
 8103106:	e010      	b.n	810312a <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810310c:	60fb      	str	r3, [r7, #12]
 810310e:	e005      	b.n	810311c <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8103110:	68fb      	ldr	r3, [r7, #12]
 8103112:	2200      	movs	r2, #0
 8103114:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8103116:	68fb      	ldr	r3, [r7, #12]
 8103118:	3304      	adds	r3, #4
 810311a:	60fb      	str	r3, [r7, #12]
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103122:	68fa      	ldr	r2, [r7, #12]
 8103124:	429a      	cmp	r2, r3
 8103126:	d3f3      	bcc.n	8103110 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8103128:	2300      	movs	r3, #0
}
 810312a:	4618      	mov	r0, r3
 810312c:	3714      	adds	r7, #20
 810312e:	46bd      	mov	sp, r7
 8103130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103134:	4770      	bx	lr
 8103136:	bf00      	nop
 8103138:	4000d3fc 	.word	0x4000d3fc

0810313c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810313c:	b480      	push	{r7}
 810313e:	b089      	sub	sp, #36	@ 0x24
 8103140:	af00      	add	r7, sp, #0
 8103142:	6078      	str	r0, [r7, #4]
 8103144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103146:	2300      	movs	r3, #0
 8103148:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810314a:	4b89      	ldr	r3, [pc, #548]	@ (8103370 <HAL_GPIO_Init+0x234>)
 810314c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810314e:	e194      	b.n	810347a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103150:	683b      	ldr	r3, [r7, #0]
 8103152:	681a      	ldr	r2, [r3, #0]
 8103154:	2101      	movs	r1, #1
 8103156:	69fb      	ldr	r3, [r7, #28]
 8103158:	fa01 f303 	lsl.w	r3, r1, r3
 810315c:	4013      	ands	r3, r2
 810315e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103160:	693b      	ldr	r3, [r7, #16]
 8103162:	2b00      	cmp	r3, #0
 8103164:	f000 8186 	beq.w	8103474 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103168:	683b      	ldr	r3, [r7, #0]
 810316a:	685b      	ldr	r3, [r3, #4]
 810316c:	f003 0303 	and.w	r3, r3, #3
 8103170:	2b01      	cmp	r3, #1
 8103172:	d005      	beq.n	8103180 <HAL_GPIO_Init+0x44>
 8103174:	683b      	ldr	r3, [r7, #0]
 8103176:	685b      	ldr	r3, [r3, #4]
 8103178:	f003 0303 	and.w	r3, r3, #3
 810317c:	2b02      	cmp	r3, #2
 810317e:	d130      	bne.n	81031e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	689b      	ldr	r3, [r3, #8]
 8103184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103186:	69fb      	ldr	r3, [r7, #28]
 8103188:	005b      	lsls	r3, r3, #1
 810318a:	2203      	movs	r2, #3
 810318c:	fa02 f303 	lsl.w	r3, r2, r3
 8103190:	43db      	mvns	r3, r3
 8103192:	69ba      	ldr	r2, [r7, #24]
 8103194:	4013      	ands	r3, r2
 8103196:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103198:	683b      	ldr	r3, [r7, #0]
 810319a:	68da      	ldr	r2, [r3, #12]
 810319c:	69fb      	ldr	r3, [r7, #28]
 810319e:	005b      	lsls	r3, r3, #1
 81031a0:	fa02 f303 	lsl.w	r3, r2, r3
 81031a4:	69ba      	ldr	r2, [r7, #24]
 81031a6:	4313      	orrs	r3, r2
 81031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	69ba      	ldr	r2, [r7, #24]
 81031ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	685b      	ldr	r3, [r3, #4]
 81031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81031b6:	2201      	movs	r2, #1
 81031b8:	69fb      	ldr	r3, [r7, #28]
 81031ba:	fa02 f303 	lsl.w	r3, r2, r3
 81031be:	43db      	mvns	r3, r3
 81031c0:	69ba      	ldr	r2, [r7, #24]
 81031c2:	4013      	ands	r3, r2
 81031c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81031c6:	683b      	ldr	r3, [r7, #0]
 81031c8:	685b      	ldr	r3, [r3, #4]
 81031ca:	091b      	lsrs	r3, r3, #4
 81031cc:	f003 0201 	and.w	r2, r3, #1
 81031d0:	69fb      	ldr	r3, [r7, #28]
 81031d2:	fa02 f303 	lsl.w	r3, r2, r3
 81031d6:	69ba      	ldr	r2, [r7, #24]
 81031d8:	4313      	orrs	r3, r2
 81031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	69ba      	ldr	r2, [r7, #24]
 81031e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81031e2:	683b      	ldr	r3, [r7, #0]
 81031e4:	685b      	ldr	r3, [r3, #4]
 81031e6:	f003 0303 	and.w	r3, r3, #3
 81031ea:	2b03      	cmp	r3, #3
 81031ec:	d017      	beq.n	810321e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	68db      	ldr	r3, [r3, #12]
 81031f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81031f4:	69fb      	ldr	r3, [r7, #28]
 81031f6:	005b      	lsls	r3, r3, #1
 81031f8:	2203      	movs	r2, #3
 81031fa:	fa02 f303 	lsl.w	r3, r2, r3
 81031fe:	43db      	mvns	r3, r3
 8103200:	69ba      	ldr	r2, [r7, #24]
 8103202:	4013      	ands	r3, r2
 8103204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103206:	683b      	ldr	r3, [r7, #0]
 8103208:	689a      	ldr	r2, [r3, #8]
 810320a:	69fb      	ldr	r3, [r7, #28]
 810320c:	005b      	lsls	r3, r3, #1
 810320e:	fa02 f303 	lsl.w	r3, r2, r3
 8103212:	69ba      	ldr	r2, [r7, #24]
 8103214:	4313      	orrs	r3, r2
 8103216:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	69ba      	ldr	r2, [r7, #24]
 810321c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810321e:	683b      	ldr	r3, [r7, #0]
 8103220:	685b      	ldr	r3, [r3, #4]
 8103222:	f003 0303 	and.w	r3, r3, #3
 8103226:	2b02      	cmp	r3, #2
 8103228:	d123      	bne.n	8103272 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810322a:	69fb      	ldr	r3, [r7, #28]
 810322c:	08da      	lsrs	r2, r3, #3
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	3208      	adds	r2, #8
 8103232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103238:	69fb      	ldr	r3, [r7, #28]
 810323a:	f003 0307 	and.w	r3, r3, #7
 810323e:	009b      	lsls	r3, r3, #2
 8103240:	220f      	movs	r2, #15
 8103242:	fa02 f303 	lsl.w	r3, r2, r3
 8103246:	43db      	mvns	r3, r3
 8103248:	69ba      	ldr	r2, [r7, #24]
 810324a:	4013      	ands	r3, r2
 810324c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810324e:	683b      	ldr	r3, [r7, #0]
 8103250:	691a      	ldr	r2, [r3, #16]
 8103252:	69fb      	ldr	r3, [r7, #28]
 8103254:	f003 0307 	and.w	r3, r3, #7
 8103258:	009b      	lsls	r3, r3, #2
 810325a:	fa02 f303 	lsl.w	r3, r2, r3
 810325e:	69ba      	ldr	r2, [r7, #24]
 8103260:	4313      	orrs	r3, r2
 8103262:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103264:	69fb      	ldr	r3, [r7, #28]
 8103266:	08da      	lsrs	r2, r3, #3
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	3208      	adds	r2, #8
 810326c:	69b9      	ldr	r1, [r7, #24]
 810326e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103278:	69fb      	ldr	r3, [r7, #28]
 810327a:	005b      	lsls	r3, r3, #1
 810327c:	2203      	movs	r2, #3
 810327e:	fa02 f303 	lsl.w	r3, r2, r3
 8103282:	43db      	mvns	r3, r3
 8103284:	69ba      	ldr	r2, [r7, #24]
 8103286:	4013      	ands	r3, r2
 8103288:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810328a:	683b      	ldr	r3, [r7, #0]
 810328c:	685b      	ldr	r3, [r3, #4]
 810328e:	f003 0203 	and.w	r2, r3, #3
 8103292:	69fb      	ldr	r3, [r7, #28]
 8103294:	005b      	lsls	r3, r3, #1
 8103296:	fa02 f303 	lsl.w	r3, r2, r3
 810329a:	69ba      	ldr	r2, [r7, #24]
 810329c:	4313      	orrs	r3, r2
 810329e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	69ba      	ldr	r2, [r7, #24]
 81032a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81032a6:	683b      	ldr	r3, [r7, #0]
 81032a8:	685b      	ldr	r3, [r3, #4]
 81032aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81032ae:	2b00      	cmp	r3, #0
 81032b0:	f000 80e0 	beq.w	8103474 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81032b4:	4b2f      	ldr	r3, [pc, #188]	@ (8103374 <HAL_GPIO_Init+0x238>)
 81032b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81032ba:	4a2e      	ldr	r2, [pc, #184]	@ (8103374 <HAL_GPIO_Init+0x238>)
 81032bc:	f043 0302 	orr.w	r3, r3, #2
 81032c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81032c4:	4b2b      	ldr	r3, [pc, #172]	@ (8103374 <HAL_GPIO_Init+0x238>)
 81032c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81032ca:	f003 0302 	and.w	r3, r3, #2
 81032ce:	60fb      	str	r3, [r7, #12]
 81032d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81032d2:	4a29      	ldr	r2, [pc, #164]	@ (8103378 <HAL_GPIO_Init+0x23c>)
 81032d4:	69fb      	ldr	r3, [r7, #28]
 81032d6:	089b      	lsrs	r3, r3, #2
 81032d8:	3302      	adds	r3, #2
 81032da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81032e0:	69fb      	ldr	r3, [r7, #28]
 81032e2:	f003 0303 	and.w	r3, r3, #3
 81032e6:	009b      	lsls	r3, r3, #2
 81032e8:	220f      	movs	r2, #15
 81032ea:	fa02 f303 	lsl.w	r3, r2, r3
 81032ee:	43db      	mvns	r3, r3
 81032f0:	69ba      	ldr	r2, [r7, #24]
 81032f2:	4013      	ands	r3, r2
 81032f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81032f6:	687b      	ldr	r3, [r7, #4]
 81032f8:	4a20      	ldr	r2, [pc, #128]	@ (810337c <HAL_GPIO_Init+0x240>)
 81032fa:	4293      	cmp	r3, r2
 81032fc:	d052      	beq.n	81033a4 <HAL_GPIO_Init+0x268>
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	4a1f      	ldr	r2, [pc, #124]	@ (8103380 <HAL_GPIO_Init+0x244>)
 8103302:	4293      	cmp	r3, r2
 8103304:	d031      	beq.n	810336a <HAL_GPIO_Init+0x22e>
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	4a1e      	ldr	r2, [pc, #120]	@ (8103384 <HAL_GPIO_Init+0x248>)
 810330a:	4293      	cmp	r3, r2
 810330c:	d02b      	beq.n	8103366 <HAL_GPIO_Init+0x22a>
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	4a1d      	ldr	r2, [pc, #116]	@ (8103388 <HAL_GPIO_Init+0x24c>)
 8103312:	4293      	cmp	r3, r2
 8103314:	d025      	beq.n	8103362 <HAL_GPIO_Init+0x226>
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	4a1c      	ldr	r2, [pc, #112]	@ (810338c <HAL_GPIO_Init+0x250>)
 810331a:	4293      	cmp	r3, r2
 810331c:	d01f      	beq.n	810335e <HAL_GPIO_Init+0x222>
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	4a1b      	ldr	r2, [pc, #108]	@ (8103390 <HAL_GPIO_Init+0x254>)
 8103322:	4293      	cmp	r3, r2
 8103324:	d019      	beq.n	810335a <HAL_GPIO_Init+0x21e>
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	4a1a      	ldr	r2, [pc, #104]	@ (8103394 <HAL_GPIO_Init+0x258>)
 810332a:	4293      	cmp	r3, r2
 810332c:	d013      	beq.n	8103356 <HAL_GPIO_Init+0x21a>
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	4a19      	ldr	r2, [pc, #100]	@ (8103398 <HAL_GPIO_Init+0x25c>)
 8103332:	4293      	cmp	r3, r2
 8103334:	d00d      	beq.n	8103352 <HAL_GPIO_Init+0x216>
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	4a18      	ldr	r2, [pc, #96]	@ (810339c <HAL_GPIO_Init+0x260>)
 810333a:	4293      	cmp	r3, r2
 810333c:	d007      	beq.n	810334e <HAL_GPIO_Init+0x212>
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	4a17      	ldr	r2, [pc, #92]	@ (81033a0 <HAL_GPIO_Init+0x264>)
 8103342:	4293      	cmp	r3, r2
 8103344:	d101      	bne.n	810334a <HAL_GPIO_Init+0x20e>
 8103346:	2309      	movs	r3, #9
 8103348:	e02d      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 810334a:	230a      	movs	r3, #10
 810334c:	e02b      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 810334e:	2308      	movs	r3, #8
 8103350:	e029      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 8103352:	2307      	movs	r3, #7
 8103354:	e027      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 8103356:	2306      	movs	r3, #6
 8103358:	e025      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 810335a:	2305      	movs	r3, #5
 810335c:	e023      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 810335e:	2304      	movs	r3, #4
 8103360:	e021      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 8103362:	2303      	movs	r3, #3
 8103364:	e01f      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 8103366:	2302      	movs	r3, #2
 8103368:	e01d      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 810336a:	2301      	movs	r3, #1
 810336c:	e01b      	b.n	81033a6 <HAL_GPIO_Init+0x26a>
 810336e:	bf00      	nop
 8103370:	580000c0 	.word	0x580000c0
 8103374:	58024400 	.word	0x58024400
 8103378:	58000400 	.word	0x58000400
 810337c:	58020000 	.word	0x58020000
 8103380:	58020400 	.word	0x58020400
 8103384:	58020800 	.word	0x58020800
 8103388:	58020c00 	.word	0x58020c00
 810338c:	58021000 	.word	0x58021000
 8103390:	58021400 	.word	0x58021400
 8103394:	58021800 	.word	0x58021800
 8103398:	58021c00 	.word	0x58021c00
 810339c:	58022000 	.word	0x58022000
 81033a0:	58022400 	.word	0x58022400
 81033a4:	2300      	movs	r3, #0
 81033a6:	69fa      	ldr	r2, [r7, #28]
 81033a8:	f002 0203 	and.w	r2, r2, #3
 81033ac:	0092      	lsls	r2, r2, #2
 81033ae:	4093      	lsls	r3, r2
 81033b0:	69ba      	ldr	r2, [r7, #24]
 81033b2:	4313      	orrs	r3, r2
 81033b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81033b6:	4938      	ldr	r1, [pc, #224]	@ (8103498 <HAL_GPIO_Init+0x35c>)
 81033b8:	69fb      	ldr	r3, [r7, #28]
 81033ba:	089b      	lsrs	r3, r3, #2
 81033bc:	3302      	adds	r3, #2
 81033be:	69ba      	ldr	r2, [r7, #24]
 81033c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81033c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81033cc:	693b      	ldr	r3, [r7, #16]
 81033ce:	43db      	mvns	r3, r3
 81033d0:	69ba      	ldr	r2, [r7, #24]
 81033d2:	4013      	ands	r3, r2
 81033d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81033d6:	683b      	ldr	r3, [r7, #0]
 81033d8:	685b      	ldr	r3, [r3, #4]
 81033da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81033de:	2b00      	cmp	r3, #0
 81033e0:	d003      	beq.n	81033ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81033e2:	69ba      	ldr	r2, [r7, #24]
 81033e4:	693b      	ldr	r3, [r7, #16]
 81033e6:	4313      	orrs	r3, r2
 81033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81033ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81033ee:	69bb      	ldr	r3, [r7, #24]
 81033f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81033f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81033f6:	685b      	ldr	r3, [r3, #4]
 81033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81033fa:	693b      	ldr	r3, [r7, #16]
 81033fc:	43db      	mvns	r3, r3
 81033fe:	69ba      	ldr	r2, [r7, #24]
 8103400:	4013      	ands	r3, r2
 8103402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103404:	683b      	ldr	r3, [r7, #0]
 8103406:	685b      	ldr	r3, [r3, #4]
 8103408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810340c:	2b00      	cmp	r3, #0
 810340e:	d003      	beq.n	8103418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103410:	69ba      	ldr	r2, [r7, #24]
 8103412:	693b      	ldr	r3, [r7, #16]
 8103414:	4313      	orrs	r3, r2
 8103416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103418:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810341c:	69bb      	ldr	r3, [r7, #24]
 810341e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103420:	697b      	ldr	r3, [r7, #20]
 8103422:	685b      	ldr	r3, [r3, #4]
 8103424:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103426:	693b      	ldr	r3, [r7, #16]
 8103428:	43db      	mvns	r3, r3
 810342a:	69ba      	ldr	r2, [r7, #24]
 810342c:	4013      	ands	r3, r2
 810342e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103430:	683b      	ldr	r3, [r7, #0]
 8103432:	685b      	ldr	r3, [r3, #4]
 8103434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103438:	2b00      	cmp	r3, #0
 810343a:	d003      	beq.n	8103444 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810343c:	69ba      	ldr	r2, [r7, #24]
 810343e:	693b      	ldr	r3, [r7, #16]
 8103440:	4313      	orrs	r3, r2
 8103442:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103444:	697b      	ldr	r3, [r7, #20]
 8103446:	69ba      	ldr	r2, [r7, #24]
 8103448:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810344a:	697b      	ldr	r3, [r7, #20]
 810344c:	681b      	ldr	r3, [r3, #0]
 810344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103450:	693b      	ldr	r3, [r7, #16]
 8103452:	43db      	mvns	r3, r3
 8103454:	69ba      	ldr	r2, [r7, #24]
 8103456:	4013      	ands	r3, r2
 8103458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810345a:	683b      	ldr	r3, [r7, #0]
 810345c:	685b      	ldr	r3, [r3, #4]
 810345e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103462:	2b00      	cmp	r3, #0
 8103464:	d003      	beq.n	810346e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103466:	69ba      	ldr	r2, [r7, #24]
 8103468:	693b      	ldr	r3, [r7, #16]
 810346a:	4313      	orrs	r3, r2
 810346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810346e:	697b      	ldr	r3, [r7, #20]
 8103470:	69ba      	ldr	r2, [r7, #24]
 8103472:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103474:	69fb      	ldr	r3, [r7, #28]
 8103476:	3301      	adds	r3, #1
 8103478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810347a:	683b      	ldr	r3, [r7, #0]
 810347c:	681a      	ldr	r2, [r3, #0]
 810347e:	69fb      	ldr	r3, [r7, #28]
 8103480:	fa22 f303 	lsr.w	r3, r2, r3
 8103484:	2b00      	cmp	r3, #0
 8103486:	f47f ae63 	bne.w	8103150 <HAL_GPIO_Init+0x14>
  }
}
 810348a:	bf00      	nop
 810348c:	bf00      	nop
 810348e:	3724      	adds	r7, #36	@ 0x24
 8103490:	46bd      	mov	sp, r7
 8103492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103496:	4770      	bx	lr
 8103498:	58000400 	.word	0x58000400

0810349c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810349c:	b480      	push	{r7}
 810349e:	b083      	sub	sp, #12
 81034a0:	af00      	add	r7, sp, #0
 81034a2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81034a4:	4b05      	ldr	r3, [pc, #20]	@ (81034bc <HAL_HSEM_ActivateNotification+0x20>)
 81034a6:	681a      	ldr	r2, [r3, #0]
 81034a8:	4904      	ldr	r1, [pc, #16]	@ (81034bc <HAL_HSEM_ActivateNotification+0x20>)
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	4313      	orrs	r3, r2
 81034ae:	600b      	str	r3, [r1, #0]
#endif
}
 81034b0:	bf00      	nop
 81034b2:	370c      	adds	r7, #12
 81034b4:	46bd      	mov	sp, r7
 81034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ba:	4770      	bx	lr
 81034bc:	58026510 	.word	0x58026510

081034c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 81034c0:	b580      	push	{r7, lr}
 81034c2:	b084      	sub	sp, #16
 81034c4:	af00      	add	r7, sp, #0
 81034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	2b00      	cmp	r3, #0
 81034cc:	d101      	bne.n	81034d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 81034ce:	2301      	movs	r3, #1
 81034d0:	e08f      	b.n	81035f2 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 81034d8:	b2db      	uxtb	r3, r3
 81034da:	2b00      	cmp	r3, #0
 81034dc:	d106      	bne.n	81034ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	2200      	movs	r2, #0
 81034e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 81034e6:	6878      	ldr	r0, [r7, #4]
 81034e8:	f7fd ff7a 	bl	81013e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	2202      	movs	r2, #2
 81034f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	699a      	ldr	r2, [r3, #24]
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	681b      	ldr	r3, [r3, #0]
 81034fe:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8103502:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	6999      	ldr	r1, [r3, #24]
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	685a      	ldr	r2, [r3, #4]
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	689b      	ldr	r3, [r3, #8]
 8103512:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8103518:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	691b      	ldr	r3, [r3, #16]
 810351e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	681b      	ldr	r3, [r3, #0]
 8103524:	430a      	orrs	r2, r1
 8103526:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	695b      	ldr	r3, [r3, #20]
 810352c:	041b      	lsls	r3, r3, #16
 810352e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	6999      	ldr	r1, [r3, #24]
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	68fa      	ldr	r2, [r7, #12]
 810353a:	430a      	orrs	r2, r1
 810353c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	69db      	ldr	r3, [r3, #28]
 8103542:	041b      	lsls	r3, r3, #16
 8103544:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	6a19      	ldr	r1, [r3, #32]
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	68fa      	ldr	r2, [r7, #12]
 8103550:	430a      	orrs	r2, r1
 8103552:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103558:	041b      	lsls	r3, r3, #16
 810355a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	68fa      	ldr	r2, [r7, #12]
 8103566:	430a      	orrs	r2, r1
 8103568:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810356e:	041b      	lsls	r3, r3, #16
 8103570:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	681b      	ldr	r3, [r3, #0]
 810357a:	68fa      	ldr	r2, [r7, #12]
 810357c:	430a      	orrs	r2, r1
 810357e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8103586:	021b      	lsls	r3, r3, #8
 8103588:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8103590:	041b      	lsls	r3, r3, #16
 8103592:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	681b      	ldr	r3, [r3, #0]
 8103598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 81035a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81035aa:	68ba      	ldr	r2, [r7, #8]
 81035ac:	68fb      	ldr	r3, [r7, #12]
 81035ae:	4313      	orrs	r3, r2
 81035b0:	687a      	ldr	r2, [r7, #4]
 81035b2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 81035b6:	431a      	orrs	r2, r3
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	430a      	orrs	r2, r1
 81035be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	681b      	ldr	r3, [r3, #0]
 81035ca:	f042 0206 	orr.w	r2, r2, #6
 81035ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	699a      	ldr	r2, [r3, #24]
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	f042 0201 	orr.w	r2, r2, #1
 81035de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	2200      	movs	r2, #0
 81035e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	2201      	movs	r2, #1
 81035ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 81035f0:	2300      	movs	r3, #0
}
 81035f2:	4618      	mov	r0, r3
 81035f4:	3710      	adds	r7, #16
 81035f6:	46bd      	mov	sp, r7
 81035f8:	bd80      	pop	{r7, pc}

081035fa <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 81035fa:	b5b0      	push	{r4, r5, r7, lr}
 81035fc:	b084      	sub	sp, #16
 81035fe:	af00      	add	r7, sp, #0
 8103600:	60f8      	str	r0, [r7, #12]
 8103602:	60b9      	str	r1, [r7, #8]
 8103604:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8103606:	68fb      	ldr	r3, [r7, #12]
 8103608:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 810360c:	2b01      	cmp	r3, #1
 810360e:	d101      	bne.n	8103614 <HAL_LTDC_ConfigLayer+0x1a>
 8103610:	2302      	movs	r3, #2
 8103612:	e02c      	b.n	810366e <HAL_LTDC_ConfigLayer+0x74>
 8103614:	68fb      	ldr	r3, [r7, #12]
 8103616:	2201      	movs	r2, #1
 8103618:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 810361c:	68fb      	ldr	r3, [r7, #12]
 810361e:	2202      	movs	r2, #2
 8103620:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8103624:	68fa      	ldr	r2, [r7, #12]
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	2134      	movs	r1, #52	@ 0x34
 810362a:	fb01 f303 	mul.w	r3, r1, r3
 810362e:	4413      	add	r3, r2
 8103630:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8103634:	68bb      	ldr	r3, [r7, #8]
 8103636:	4614      	mov	r4, r2
 8103638:	461d      	mov	r5, r3
 810363a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810363c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810363e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103646:	682b      	ldr	r3, [r5, #0]
 8103648:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 810364a:	687a      	ldr	r2, [r7, #4]
 810364c:	68b9      	ldr	r1, [r7, #8]
 810364e:	68f8      	ldr	r0, [r7, #12]
 8103650:	f000 f811 	bl	8103676 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8103654:	68fb      	ldr	r3, [r7, #12]
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	2201      	movs	r2, #1
 810365a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 810365c:	68fb      	ldr	r3, [r7, #12]
 810365e:	2201      	movs	r2, #1
 8103660:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8103664:	68fb      	ldr	r3, [r7, #12]
 8103666:	2200      	movs	r2, #0
 8103668:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 810366c:	2300      	movs	r3, #0
}
 810366e:	4618      	mov	r0, r3
 8103670:	3710      	adds	r7, #16
 8103672:	46bd      	mov	sp, r7
 8103674:	bdb0      	pop	{r4, r5, r7, pc}

08103676 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8103676:	b480      	push	{r7}
 8103678:	b089      	sub	sp, #36	@ 0x24
 810367a:	af00      	add	r7, sp, #0
 810367c:	60f8      	str	r0, [r7, #12]
 810367e:	60b9      	str	r1, [r7, #8]
 8103680:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8103682:	68bb      	ldr	r3, [r7, #8]
 8103684:	685a      	ldr	r2, [r3, #4]
 8103686:	68fb      	ldr	r3, [r7, #12]
 8103688:	681b      	ldr	r3, [r3, #0]
 810368a:	68db      	ldr	r3, [r3, #12]
 810368c:	0c1b      	lsrs	r3, r3, #16
 810368e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103692:	4413      	add	r3, r2
 8103694:	041b      	lsls	r3, r3, #16
 8103696:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8103698:	68fb      	ldr	r3, [r7, #12]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	461a      	mov	r2, r3
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	01db      	lsls	r3, r3, #7
 81036a2:	4413      	add	r3, r2
 81036a4:	3384      	adds	r3, #132	@ 0x84
 81036a6:	685b      	ldr	r3, [r3, #4]
 81036a8:	68fa      	ldr	r2, [r7, #12]
 81036aa:	6812      	ldr	r2, [r2, #0]
 81036ac:	4611      	mov	r1, r2
 81036ae:	687a      	ldr	r2, [r7, #4]
 81036b0:	01d2      	lsls	r2, r2, #7
 81036b2:	440a      	add	r2, r1
 81036b4:	3284      	adds	r2, #132	@ 0x84
 81036b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 81036ba:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 81036bc:	68bb      	ldr	r3, [r7, #8]
 81036be:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 81036c0:	68fb      	ldr	r3, [r7, #12]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	68db      	ldr	r3, [r3, #12]
 81036c6:	0c1b      	lsrs	r3, r3, #16
 81036c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 81036cc:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 81036ce:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 81036d0:	68fb      	ldr	r3, [r7, #12]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	4619      	mov	r1, r3
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	01db      	lsls	r3, r3, #7
 81036da:	440b      	add	r3, r1
 81036dc:	3384      	adds	r3, #132	@ 0x84
 81036de:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 81036e0:	69fb      	ldr	r3, [r7, #28]
 81036e2:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 81036e4:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 81036e6:	68bb      	ldr	r3, [r7, #8]
 81036e8:	68da      	ldr	r2, [r3, #12]
 81036ea:	68fb      	ldr	r3, [r7, #12]
 81036ec:	681b      	ldr	r3, [r3, #0]
 81036ee:	68db      	ldr	r3, [r3, #12]
 81036f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81036f4:	4413      	add	r3, r2
 81036f6:	041b      	lsls	r3, r3, #16
 81036f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 81036fa:	68fb      	ldr	r3, [r7, #12]
 81036fc:	681b      	ldr	r3, [r3, #0]
 81036fe:	461a      	mov	r2, r3
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	01db      	lsls	r3, r3, #7
 8103704:	4413      	add	r3, r2
 8103706:	3384      	adds	r3, #132	@ 0x84
 8103708:	689b      	ldr	r3, [r3, #8]
 810370a:	68fa      	ldr	r2, [r7, #12]
 810370c:	6812      	ldr	r2, [r2, #0]
 810370e:	4611      	mov	r1, r2
 8103710:	687a      	ldr	r2, [r7, #4]
 8103712:	01d2      	lsls	r2, r2, #7
 8103714:	440a      	add	r2, r1
 8103716:	3284      	adds	r2, #132	@ 0x84
 8103718:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 810371c:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 810371e:	68bb      	ldr	r3, [r7, #8]
 8103720:	689a      	ldr	r2, [r3, #8]
 8103722:	68fb      	ldr	r3, [r7, #12]
 8103724:	681b      	ldr	r3, [r3, #0]
 8103726:	68db      	ldr	r3, [r3, #12]
 8103728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810372c:	4413      	add	r3, r2
 810372e:	1c5a      	adds	r2, r3, #1
 8103730:	68fb      	ldr	r3, [r7, #12]
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	4619      	mov	r1, r3
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	01db      	lsls	r3, r3, #7
 810373a:	440b      	add	r3, r1
 810373c:	3384      	adds	r3, #132	@ 0x84
 810373e:	4619      	mov	r1, r3
 8103740:	69fb      	ldr	r3, [r7, #28]
 8103742:	4313      	orrs	r3, r2
 8103744:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8103746:	68fb      	ldr	r3, [r7, #12]
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	461a      	mov	r2, r3
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	01db      	lsls	r3, r3, #7
 8103750:	4413      	add	r3, r2
 8103752:	3384      	adds	r3, #132	@ 0x84
 8103754:	691b      	ldr	r3, [r3, #16]
 8103756:	68fa      	ldr	r2, [r7, #12]
 8103758:	6812      	ldr	r2, [r2, #0]
 810375a:	4611      	mov	r1, r2
 810375c:	687a      	ldr	r2, [r7, #4]
 810375e:	01d2      	lsls	r2, r2, #7
 8103760:	440a      	add	r2, r1
 8103762:	3284      	adds	r2, #132	@ 0x84
 8103764:	f023 0307 	bic.w	r3, r3, #7
 8103768:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 810376a:	68fb      	ldr	r3, [r7, #12]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	461a      	mov	r2, r3
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	01db      	lsls	r3, r3, #7
 8103774:	4413      	add	r3, r2
 8103776:	3384      	adds	r3, #132	@ 0x84
 8103778:	461a      	mov	r2, r3
 810377a:	68bb      	ldr	r3, [r7, #8]
 810377c:	691b      	ldr	r3, [r3, #16]
 810377e:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8103780:	68bb      	ldr	r3, [r7, #8]
 8103782:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8103786:	021b      	lsls	r3, r3, #8
 8103788:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 810378a:	68bb      	ldr	r3, [r7, #8]
 810378c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8103790:	041b      	lsls	r3, r3, #16
 8103792:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8103794:	68bb      	ldr	r3, [r7, #8]
 8103796:	699b      	ldr	r3, [r3, #24]
 8103798:	061b      	lsls	r3, r3, #24
 810379a:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 810379c:	68bb      	ldr	r3, [r7, #8]
 810379e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81037a2:	461a      	mov	r2, r3
 81037a4:	69fb      	ldr	r3, [r7, #28]
 81037a6:	431a      	orrs	r2, r3
 81037a8:	69bb      	ldr	r3, [r7, #24]
 81037aa:	431a      	orrs	r2, r3
 81037ac:	68fb      	ldr	r3, [r7, #12]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	4619      	mov	r1, r3
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	01db      	lsls	r3, r3, #7
 81037b6:	440b      	add	r3, r1
 81037b8:	3384      	adds	r3, #132	@ 0x84
 81037ba:	4619      	mov	r1, r3
 81037bc:	697b      	ldr	r3, [r7, #20]
 81037be:	4313      	orrs	r3, r2
 81037c0:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 81037c2:	68fb      	ldr	r3, [r7, #12]
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	461a      	mov	r2, r3
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	01db      	lsls	r3, r3, #7
 81037cc:	4413      	add	r3, r2
 81037ce:	3384      	adds	r3, #132	@ 0x84
 81037d0:	695b      	ldr	r3, [r3, #20]
 81037d2:	68fa      	ldr	r2, [r7, #12]
 81037d4:	6812      	ldr	r2, [r2, #0]
 81037d6:	4611      	mov	r1, r2
 81037d8:	687a      	ldr	r2, [r7, #4]
 81037da:	01d2      	lsls	r2, r2, #7
 81037dc:	440a      	add	r2, r1
 81037de:	3284      	adds	r2, #132	@ 0x84
 81037e0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 81037e4:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 81037e6:	68fb      	ldr	r3, [r7, #12]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	461a      	mov	r2, r3
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	01db      	lsls	r3, r3, #7
 81037f0:	4413      	add	r3, r2
 81037f2:	3384      	adds	r3, #132	@ 0x84
 81037f4:	461a      	mov	r2, r3
 81037f6:	68bb      	ldr	r3, [r7, #8]
 81037f8:	695b      	ldr	r3, [r3, #20]
 81037fa:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 81037fc:	68fb      	ldr	r3, [r7, #12]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	461a      	mov	r2, r3
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	01db      	lsls	r3, r3, #7
 8103806:	4413      	add	r3, r2
 8103808:	3384      	adds	r3, #132	@ 0x84
 810380a:	69db      	ldr	r3, [r3, #28]
 810380c:	68fa      	ldr	r2, [r7, #12]
 810380e:	6812      	ldr	r2, [r2, #0]
 8103810:	4611      	mov	r1, r2
 8103812:	687a      	ldr	r2, [r7, #4]
 8103814:	01d2      	lsls	r2, r2, #7
 8103816:	440a      	add	r2, r1
 8103818:	3284      	adds	r2, #132	@ 0x84
 810381a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 810381e:	f023 0307 	bic.w	r3, r3, #7
 8103822:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8103824:	68bb      	ldr	r3, [r7, #8]
 8103826:	69da      	ldr	r2, [r3, #28]
 8103828:	68bb      	ldr	r3, [r7, #8]
 810382a:	6a1b      	ldr	r3, [r3, #32]
 810382c:	68f9      	ldr	r1, [r7, #12]
 810382e:	6809      	ldr	r1, [r1, #0]
 8103830:	4608      	mov	r0, r1
 8103832:	6879      	ldr	r1, [r7, #4]
 8103834:	01c9      	lsls	r1, r1, #7
 8103836:	4401      	add	r1, r0
 8103838:	3184      	adds	r1, #132	@ 0x84
 810383a:	4313      	orrs	r3, r2
 810383c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 810383e:	68fb      	ldr	r3, [r7, #12]
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	461a      	mov	r2, r3
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	01db      	lsls	r3, r3, #7
 8103848:	4413      	add	r3, r2
 810384a:	3384      	adds	r3, #132	@ 0x84
 810384c:	461a      	mov	r2, r3
 810384e:	68bb      	ldr	r3, [r7, #8]
 8103850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103852:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8103854:	68bb      	ldr	r3, [r7, #8]
 8103856:	691b      	ldr	r3, [r3, #16]
 8103858:	2b00      	cmp	r3, #0
 810385a:	d102      	bne.n	8103862 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 810385c:	2304      	movs	r3, #4
 810385e:	61fb      	str	r3, [r7, #28]
 8103860:	e01b      	b.n	810389a <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8103862:	68bb      	ldr	r3, [r7, #8]
 8103864:	691b      	ldr	r3, [r3, #16]
 8103866:	2b01      	cmp	r3, #1
 8103868:	d102      	bne.n	8103870 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 810386a:	2303      	movs	r3, #3
 810386c:	61fb      	str	r3, [r7, #28]
 810386e:	e014      	b.n	810389a <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8103870:	68bb      	ldr	r3, [r7, #8]
 8103872:	691b      	ldr	r3, [r3, #16]
 8103874:	2b04      	cmp	r3, #4
 8103876:	d00b      	beq.n	8103890 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8103878:	68bb      	ldr	r3, [r7, #8]
 810387a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 810387c:	2b02      	cmp	r3, #2
 810387e:	d007      	beq.n	8103890 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8103880:	68bb      	ldr	r3, [r7, #8]
 8103882:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8103884:	2b03      	cmp	r3, #3
 8103886:	d003      	beq.n	8103890 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8103888:	68bb      	ldr	r3, [r7, #8]
 810388a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 810388c:	2b07      	cmp	r3, #7
 810388e:	d102      	bne.n	8103896 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8103890:	2302      	movs	r3, #2
 8103892:	61fb      	str	r3, [r7, #28]
 8103894:	e001      	b.n	810389a <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8103896:	2301      	movs	r3, #1
 8103898:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 810389a:	68fb      	ldr	r3, [r7, #12]
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	461a      	mov	r2, r3
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	01db      	lsls	r3, r3, #7
 81038a4:	4413      	add	r3, r2
 81038a6:	3384      	adds	r3, #132	@ 0x84
 81038a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038aa:	68fa      	ldr	r2, [r7, #12]
 81038ac:	6812      	ldr	r2, [r2, #0]
 81038ae:	4611      	mov	r1, r2
 81038b0:	687a      	ldr	r2, [r7, #4]
 81038b2:	01d2      	lsls	r2, r2, #7
 81038b4:	440a      	add	r2, r1
 81038b6:	3284      	adds	r2, #132	@ 0x84
 81038b8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 81038bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 81038be:	68bb      	ldr	r3, [r7, #8]
 81038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81038c2:	69fa      	ldr	r2, [r7, #28]
 81038c4:	fb02 f303 	mul.w	r3, r2, r3
 81038c8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 81038ca:	68bb      	ldr	r3, [r7, #8]
 81038cc:	6859      	ldr	r1, [r3, #4]
 81038ce:	68bb      	ldr	r3, [r7, #8]
 81038d0:	681b      	ldr	r3, [r3, #0]
 81038d2:	1acb      	subs	r3, r1, r3
 81038d4:	69f9      	ldr	r1, [r7, #28]
 81038d6:	fb01 f303 	mul.w	r3, r1, r3
 81038da:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 81038dc:	68f9      	ldr	r1, [r7, #12]
 81038de:	6809      	ldr	r1, [r1, #0]
 81038e0:	4608      	mov	r0, r1
 81038e2:	6879      	ldr	r1, [r7, #4]
 81038e4:	01c9      	lsls	r1, r1, #7
 81038e6:	4401      	add	r1, r0
 81038e8:	3184      	adds	r1, #132	@ 0x84
 81038ea:	4313      	orrs	r3, r2
 81038ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 81038ee:	68fb      	ldr	r3, [r7, #12]
 81038f0:	681b      	ldr	r3, [r3, #0]
 81038f2:	461a      	mov	r2, r3
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	01db      	lsls	r3, r3, #7
 81038f8:	4413      	add	r3, r2
 81038fa:	3384      	adds	r3, #132	@ 0x84
 81038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81038fe:	68fa      	ldr	r2, [r7, #12]
 8103900:	6812      	ldr	r2, [r2, #0]
 8103902:	4611      	mov	r1, r2
 8103904:	687a      	ldr	r2, [r7, #4]
 8103906:	01d2      	lsls	r2, r2, #7
 8103908:	440a      	add	r2, r1
 810390a:	3284      	adds	r2, #132	@ 0x84
 810390c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8103910:	f023 0307 	bic.w	r3, r3, #7
 8103914:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8103916:	68fb      	ldr	r3, [r7, #12]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	461a      	mov	r2, r3
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	01db      	lsls	r3, r3, #7
 8103920:	4413      	add	r3, r2
 8103922:	3384      	adds	r3, #132	@ 0x84
 8103924:	461a      	mov	r2, r3
 8103926:	68bb      	ldr	r3, [r7, #8]
 8103928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810392a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 810392c:	68fb      	ldr	r3, [r7, #12]
 810392e:	681b      	ldr	r3, [r3, #0]
 8103930:	461a      	mov	r2, r3
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	01db      	lsls	r3, r3, #7
 8103936:	4413      	add	r3, r2
 8103938:	3384      	adds	r3, #132	@ 0x84
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	68fa      	ldr	r2, [r7, #12]
 810393e:	6812      	ldr	r2, [r2, #0]
 8103940:	4611      	mov	r1, r2
 8103942:	687a      	ldr	r2, [r7, #4]
 8103944:	01d2      	lsls	r2, r2, #7
 8103946:	440a      	add	r2, r1
 8103948:	3284      	adds	r2, #132	@ 0x84
 810394a:	f043 0301 	orr.w	r3, r3, #1
 810394e:	6013      	str	r3, [r2, #0]
}
 8103950:	bf00      	nop
 8103952:	3724      	adds	r7, #36	@ 0x24
 8103954:	46bd      	mov	sp, r7
 8103956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810395a:	4770      	bx	lr

0810395c <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 810395c:	b580      	push	{r7, lr}
 810395e:	b082      	sub	sp, #8
 8103960:	af00      	add	r7, sp, #0
 8103962:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	2b00      	cmp	r3, #0
 8103968:	d101      	bne.n	810396e <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 810396a:	2301      	movs	r3, #1
 810396c:	e031      	b.n	81039d2 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8103974:	b2db      	uxtb	r3, r3
 8103976:	2b00      	cmp	r3, #0
 8103978:	d105      	bne.n	8103986 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	2200      	movs	r2, #0
 810397e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8103980:	6878      	ldr	r0, [r7, #4]
 8103982:	f7fd fee7 	bl	8101754 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	2203      	movs	r2, #3
 810398a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 810398e:	6878      	ldr	r0, [r7, #4]
 8103990:	f000 f824 	bl	81039dc <HAL_MMC_InitCard>
 8103994:	4603      	mov	r3, r0
 8103996:	2b01      	cmp	r3, #1
 8103998:	d101      	bne.n	810399e <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 810399a:	2301      	movs	r3, #1
 810399c:	e019      	b.n	81039d2 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	2200      	movs	r2, #0
 81039a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	2200      	movs	r2, #0
 81039a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	2201      	movs	r2, #1
 81039ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	68db      	ldr	r3, [r3, #12]
 81039b6:	2b00      	cmp	r3, #0
 81039b8:	d00a      	beq.n	81039d0 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	68db      	ldr	r3, [r3, #12]
 81039be:	4619      	mov	r1, r3
 81039c0:	6878      	ldr	r0, [r7, #4]
 81039c2:	f000 fb47 	bl	8104054 <HAL_MMC_ConfigWideBusOperation>
 81039c6:	4603      	mov	r3, r0
 81039c8:	2b00      	cmp	r3, #0
 81039ca:	d001      	beq.n	81039d0 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 81039cc:	2301      	movs	r3, #1
 81039ce:	e000      	b.n	81039d2 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 81039d0:	2300      	movs	r3, #0
}
 81039d2:	4618      	mov	r0, r3
 81039d4:	3708      	adds	r7, #8
 81039d6:	46bd      	mov	sp, r7
 81039d8:	bd80      	pop	{r7, pc}
	...

081039dc <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 81039dc:	b590      	push	{r4, r7, lr}
 81039de:	b08d      	sub	sp, #52	@ 0x34
 81039e0:	af02      	add	r7, sp, #8
 81039e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 81039e4:	2300      	movs	r3, #0
 81039e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 81039e8:	2300      	movs	r3, #0
 81039ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 81039ec:	2300      	movs	r3, #0
 81039ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 81039f0:	2300      	movs	r3, #0
 81039f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 81039f4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 81039f8:	f04f 0100 	mov.w	r1, #0
 81039fc:	f002 fd3c 	bl	8106478 <HAL_RCCEx_GetPeriphCLKFreq>
 8103a00:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8103a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103a04:	2b00      	cmp	r3, #0
 8103a06:	d109      	bne.n	8103a1c <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	2201      	movs	r2, #1
 8103a0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8103a16:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103a18:	2301      	movs	r3, #1
 8103a1a:	e070      	b.n	8103afe <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8103a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103a1e:	0a1b      	lsrs	r3, r3, #8
 8103a20:	4a39      	ldr	r2, [pc, #228]	@ (8103b08 <HAL_MMC_InitCard+0x12c>)
 8103a22:	fba2 2303 	umull	r2, r3, r2, r3
 8103a26:	091b      	lsrs	r3, r3, #4
 8103a28:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681c      	ldr	r4, [r3, #0]
 8103a2e:	466a      	mov	r2, sp
 8103a30:	f107 0318 	add.w	r3, r7, #24
 8103a34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103a38:	e882 0003 	stmia.w	r2, {r0, r1}
 8103a3c:	f107 030c 	add.w	r3, r7, #12
 8103a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103a42:	4620      	mov	r0, r4
 8103a44:	f005 fccc 	bl	81093e0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	4618      	mov	r0, r3
 8103a4e:	f005 fcfe 	bl	810944e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 8103a52:	69fb      	ldr	r3, [r7, #28]
 8103a54:	2b00      	cmp	r3, #0
 8103a56:	d005      	beq.n	8103a64 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8103a58:	69fb      	ldr	r3, [r7, #28]
 8103a5a:	005b      	lsls	r3, r3, #1
 8103a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103a62:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8103a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103a66:	2b00      	cmp	r3, #0
 8103a68:	d007      	beq.n	8103a7a <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8103a6a:	4a28      	ldr	r2, [pc, #160]	@ (8103b0c <HAL_MMC_InitCard+0x130>)
 8103a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103a72:	3301      	adds	r3, #1
 8103a74:	4618      	mov	r0, r3
 8103a76:	f7fe fa83 	bl	8101f80 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8103a7a:	6878      	ldr	r0, [r7, #4]
 8103a7c:	f000 fcb4 	bl	81043e8 <MMC_PowerON>
 8103a80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103a82:	6a3b      	ldr	r3, [r7, #32]
 8103a84:	2b00      	cmp	r3, #0
 8103a86:	d00b      	beq.n	8103aa0 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	2201      	movs	r2, #1
 8103a8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103a94:	6a3b      	ldr	r3, [r7, #32]
 8103a96:	431a      	orrs	r2, r3
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103a9c:	2301      	movs	r3, #1
 8103a9e:	e02e      	b.n	8103afe <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8103aa0:	6878      	ldr	r0, [r7, #4]
 8103aa2:	f000 fba3 	bl	81041ec <MMC_InitCard>
 8103aa6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103aa8:	6a3b      	ldr	r3, [r7, #32]
 8103aaa:	2b00      	cmp	r3, #0
 8103aac:	d00b      	beq.n	8103ac6 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	2201      	movs	r2, #1
 8103ab2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103aba:	6a3b      	ldr	r3, [r7, #32]
 8103abc:	431a      	orrs	r2, r3
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103ac2:	2301      	movs	r3, #1
 8103ac4:	e01b      	b.n	8103afe <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8103ace:	4618      	mov	r0, r3
 8103ad0:	f005 fd52 	bl	8109578 <SDMMC_CmdBlockLength>
 8103ad4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103ad6:	6a3b      	ldr	r3, [r7, #32]
 8103ad8:	2b00      	cmp	r3, #0
 8103ada:	d00f      	beq.n	8103afc <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8103b10 <HAL_MMC_InitCard+0x134>)
 8103ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103ae8:	6a3b      	ldr	r3, [r7, #32]
 8103aea:	431a      	orrs	r2, r3
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	2201      	movs	r2, #1
 8103af4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103af8:	2301      	movs	r3, #1
 8103afa:	e000      	b.n	8103afe <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8103afc:	2300      	movs	r3, #0
}
 8103afe:	4618      	mov	r0, r3
 8103b00:	372c      	adds	r7, #44	@ 0x2c
 8103b02:	46bd      	mov	sp, r7
 8103b04:	bd90      	pop	{r4, r7, pc}
 8103b06:	bf00      	nop
 8103b08:	014f8b59 	.word	0x014f8b59
 8103b0c:	00012110 	.word	0x00012110
 8103b10:	1fe00fff 	.word	0x1fe00fff

08103b14 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8103b14:	b580      	push	{r7, lr}
 8103b16:	b084      	sub	sp, #16
 8103b18:	af00      	add	r7, sp, #0
 8103b1a:	6078      	str	r0, [r7, #4]
 8103b1c:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8103b1e:	2300      	movs	r3, #0
 8103b20:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b26:	0f9b      	lsrs	r3, r3, #30
 8103b28:	b2da      	uxtb	r2, r3
 8103b2a:	683b      	ldr	r3, [r7, #0]
 8103b2c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b32:	0e9b      	lsrs	r3, r3, #26
 8103b34:	b2db      	uxtb	r3, r3
 8103b36:	f003 030f 	and.w	r3, r3, #15
 8103b3a:	b2da      	uxtb	r2, r3
 8103b3c:	683b      	ldr	r3, [r7, #0]
 8103b3e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b44:	0e1b      	lsrs	r3, r3, #24
 8103b46:	b2db      	uxtb	r3, r3
 8103b48:	f003 0303 	and.w	r3, r3, #3
 8103b4c:	b2da      	uxtb	r2, r3
 8103b4e:	683b      	ldr	r3, [r7, #0]
 8103b50:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b56:	0c1b      	lsrs	r3, r3, #16
 8103b58:	b2da      	uxtb	r2, r3
 8103b5a:	683b      	ldr	r3, [r7, #0]
 8103b5c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b62:	0a1b      	lsrs	r3, r3, #8
 8103b64:	b2da      	uxtb	r2, r3
 8103b66:	683b      	ldr	r3, [r7, #0]
 8103b68:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b6e:	b2da      	uxtb	r2, r3
 8103b70:	683b      	ldr	r3, [r7, #0]
 8103b72:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103b78:	0d1b      	lsrs	r3, r3, #20
 8103b7a:	b29a      	uxth	r2, r3
 8103b7c:	683b      	ldr	r3, [r7, #0]
 8103b7e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103b84:	0c1b      	lsrs	r3, r3, #16
 8103b86:	b2db      	uxtb	r3, r3
 8103b88:	f003 030f 	and.w	r3, r3, #15
 8103b8c:	b2da      	uxtb	r2, r3
 8103b8e:	683b      	ldr	r3, [r7, #0]
 8103b90:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103b96:	0bdb      	lsrs	r3, r3, #15
 8103b98:	b2db      	uxtb	r3, r3
 8103b9a:	f003 0301 	and.w	r3, r3, #1
 8103b9e:	b2da      	uxtb	r2, r3
 8103ba0:	683b      	ldr	r3, [r7, #0]
 8103ba2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103ba8:	0b9b      	lsrs	r3, r3, #14
 8103baa:	b2db      	uxtb	r3, r3
 8103bac:	f003 0301 	and.w	r3, r3, #1
 8103bb0:	b2da      	uxtb	r2, r3
 8103bb2:	683b      	ldr	r3, [r7, #0]
 8103bb4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103bba:	0b5b      	lsrs	r3, r3, #13
 8103bbc:	b2db      	uxtb	r3, r3
 8103bbe:	f003 0301 	and.w	r3, r3, #1
 8103bc2:	b2da      	uxtb	r2, r3
 8103bc4:	683b      	ldr	r3, [r7, #0]
 8103bc6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103bcc:	0b1b      	lsrs	r3, r3, #12
 8103bce:	b2db      	uxtb	r3, r3
 8103bd0:	f003 0301 	and.w	r3, r3, #1
 8103bd4:	b2da      	uxtb	r2, r3
 8103bd6:	683b      	ldr	r3, [r7, #0]
 8103bd8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8103bda:	683b      	ldr	r3, [r7, #0]
 8103bdc:	2200      	movs	r2, #0
 8103bde:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8103be0:	f107 010c 	add.w	r1, r7, #12
 8103be4:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8103be8:	22d4      	movs	r2, #212	@ 0xd4
 8103bea:	6878      	ldr	r0, [r7, #4]
 8103bec:	f000 fc4c 	bl	8104488 <MMC_ReadExtCSD>
 8103bf0:	4603      	mov	r3, r0
 8103bf2:	2b00      	cmp	r3, #0
 8103bf4:	d001      	beq.n	8103bfa <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8103bf6:	2301      	movs	r3, #1
 8103bf8:	e129      	b.n	8103e4e <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103bfe:	2b00      	cmp	r3, #0
 8103c00:	d163      	bne.n	8103cca <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103c06:	009a      	lsls	r2, r3, #2
 8103c08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8103c0c:	4013      	ands	r3, r2
 8103c0e:	687a      	ldr	r2, [r7, #4]
 8103c10:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8103c12:	0f92      	lsrs	r2, r2, #30
 8103c14:	431a      	orrs	r2, r3
 8103c16:	683b      	ldr	r3, [r7, #0]
 8103c18:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103c1e:	0edb      	lsrs	r3, r3, #27
 8103c20:	b2db      	uxtb	r3, r3
 8103c22:	f003 0307 	and.w	r3, r3, #7
 8103c26:	b2da      	uxtb	r2, r3
 8103c28:	683b      	ldr	r3, [r7, #0]
 8103c2a:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103c30:	0e1b      	lsrs	r3, r3, #24
 8103c32:	b2db      	uxtb	r3, r3
 8103c34:	f003 0307 	and.w	r3, r3, #7
 8103c38:	b2da      	uxtb	r2, r3
 8103c3a:	683b      	ldr	r3, [r7, #0]
 8103c3c:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103c42:	0d5b      	lsrs	r3, r3, #21
 8103c44:	b2db      	uxtb	r3, r3
 8103c46:	f003 0307 	and.w	r3, r3, #7
 8103c4a:	b2da      	uxtb	r2, r3
 8103c4c:	683b      	ldr	r3, [r7, #0]
 8103c4e:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103c54:	0c9b      	lsrs	r3, r3, #18
 8103c56:	b2db      	uxtb	r3, r3
 8103c58:	f003 0307 	and.w	r3, r3, #7
 8103c5c:	b2da      	uxtb	r2, r3
 8103c5e:	683b      	ldr	r3, [r7, #0]
 8103c60:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103c66:	0bdb      	lsrs	r3, r3, #15
 8103c68:	b2db      	uxtb	r3, r3
 8103c6a:	f003 0307 	and.w	r3, r3, #7
 8103c6e:	b2da      	uxtb	r2, r3
 8103c70:	683b      	ldr	r3, [r7, #0]
 8103c72:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8103c74:	683b      	ldr	r3, [r7, #0]
 8103c76:	691b      	ldr	r3, [r3, #16]
 8103c78:	1c5a      	adds	r2, r3, #1
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8103c7e:	683b      	ldr	r3, [r7, #0]
 8103c80:	7e1b      	ldrb	r3, [r3, #24]
 8103c82:	b2db      	uxtb	r3, r3
 8103c84:	f003 0307 	and.w	r3, r3, #7
 8103c88:	3302      	adds	r3, #2
 8103c8a:	2201      	movs	r2, #1
 8103c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8103c90:	687a      	ldr	r2, [r7, #4]
 8103c92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8103c94:	fb03 f202 	mul.w	r2, r3, r2
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8103c9c:	683b      	ldr	r3, [r7, #0]
 8103c9e:	7a1b      	ldrb	r3, [r3, #8]
 8103ca0:	b2db      	uxtb	r3, r3
 8103ca2:	f003 030f 	and.w	r3, r3, #15
 8103ca6:	2201      	movs	r2, #1
 8103ca8:	409a      	lsls	r2, r3
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103cb2:	687a      	ldr	r2, [r7, #4]
 8103cb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8103cb6:	0a52      	lsrs	r2, r2, #9
 8103cb8:	fb03 f202 	mul.w	r2, r3, r2
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103cc6:	655a      	str	r2, [r3, #84]	@ 0x54
 8103cc8:	e023      	b.n	8103d12 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103cce:	2b01      	cmp	r3, #1
 8103cd0:	d10f      	bne.n	8103cf2 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8103cd2:	68fa      	ldr	r2, [r7, #12]
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103ce6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	655a      	str	r2, [r3, #84]	@ 0x54
 8103cf0:	e00f      	b.n	8103d12 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	681b      	ldr	r3, [r3, #0]
 8103cf6:	4a58      	ldr	r2, [pc, #352]	@ (8103e58 <HAL_MMC_GetCardCSD+0x344>)
 8103cf8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103cfe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8103d02:	687b      	ldr	r3, [r7, #4]
 8103d04:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	2201      	movs	r2, #1
 8103d0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103d0e:	2301      	movs	r3, #1
 8103d10:	e09d      	b.n	8103e4e <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103d16:	0b9b      	lsrs	r3, r3, #14
 8103d18:	b2db      	uxtb	r3, r3
 8103d1a:	f003 0301 	and.w	r3, r3, #1
 8103d1e:	b2da      	uxtb	r2, r3
 8103d20:	683b      	ldr	r3, [r7, #0]
 8103d22:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103d28:	09db      	lsrs	r3, r3, #7
 8103d2a:	b2db      	uxtb	r3, r3
 8103d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103d30:	b2da      	uxtb	r2, r3
 8103d32:	683b      	ldr	r3, [r7, #0]
 8103d34:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103d3a:	b2db      	uxtb	r3, r3
 8103d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103d40:	b2da      	uxtb	r2, r3
 8103d42:	683b      	ldr	r3, [r7, #0]
 8103d44:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d4a:	0fdb      	lsrs	r3, r3, #31
 8103d4c:	b2da      	uxtb	r2, r3
 8103d4e:	683b      	ldr	r3, [r7, #0]
 8103d50:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d56:	0f5b      	lsrs	r3, r3, #29
 8103d58:	b2db      	uxtb	r3, r3
 8103d5a:	f003 0303 	and.w	r3, r3, #3
 8103d5e:	b2da      	uxtb	r2, r3
 8103d60:	683b      	ldr	r3, [r7, #0]
 8103d62:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d68:	0e9b      	lsrs	r3, r3, #26
 8103d6a:	b2db      	uxtb	r3, r3
 8103d6c:	f003 0307 	and.w	r3, r3, #7
 8103d70:	b2da      	uxtb	r2, r3
 8103d72:	683b      	ldr	r3, [r7, #0]
 8103d74:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d7a:	0d9b      	lsrs	r3, r3, #22
 8103d7c:	b2db      	uxtb	r3, r3
 8103d7e:	f003 030f 	and.w	r3, r3, #15
 8103d82:	b2da      	uxtb	r2, r3
 8103d84:	683b      	ldr	r3, [r7, #0]
 8103d86:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d8c:	0d5b      	lsrs	r3, r3, #21
 8103d8e:	b2db      	uxtb	r3, r3
 8103d90:	f003 0301 	and.w	r3, r3, #1
 8103d94:	b2da      	uxtb	r2, r3
 8103d96:	683b      	ldr	r3, [r7, #0]
 8103d98:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8103d9c:	683b      	ldr	r3, [r7, #0]
 8103d9e:	2200      	movs	r2, #0
 8103da0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103da8:	0c1b      	lsrs	r3, r3, #16
 8103daa:	b2db      	uxtb	r3, r3
 8103dac:	f003 0301 	and.w	r3, r3, #1
 8103db0:	b2da      	uxtb	r2, r3
 8103db2:	683b      	ldr	r3, [r7, #0]
 8103db4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103dbc:	0bdb      	lsrs	r3, r3, #15
 8103dbe:	b2db      	uxtb	r3, r3
 8103dc0:	f003 0301 	and.w	r3, r3, #1
 8103dc4:	b2da      	uxtb	r2, r3
 8103dc6:	683b      	ldr	r3, [r7, #0]
 8103dc8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103dd0:	0b9b      	lsrs	r3, r3, #14
 8103dd2:	b2db      	uxtb	r3, r3
 8103dd4:	f003 0301 	and.w	r3, r3, #1
 8103dd8:	b2da      	uxtb	r2, r3
 8103dda:	683b      	ldr	r3, [r7, #0]
 8103ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103de4:	0b5b      	lsrs	r3, r3, #13
 8103de6:	b2db      	uxtb	r3, r3
 8103de8:	f003 0301 	and.w	r3, r3, #1
 8103dec:	b2da      	uxtb	r2, r3
 8103dee:	683b      	ldr	r3, [r7, #0]
 8103df0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103df8:	0b1b      	lsrs	r3, r3, #12
 8103dfa:	b2db      	uxtb	r3, r3
 8103dfc:	f003 0301 	and.w	r3, r3, #1
 8103e00:	b2da      	uxtb	r2, r3
 8103e02:	683b      	ldr	r3, [r7, #0]
 8103e04:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103e0c:	0a9b      	lsrs	r3, r3, #10
 8103e0e:	b2db      	uxtb	r3, r3
 8103e10:	f003 0303 	and.w	r3, r3, #3
 8103e14:	b2da      	uxtb	r2, r3
 8103e16:	683b      	ldr	r3, [r7, #0]
 8103e18:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103e20:	0a1b      	lsrs	r3, r3, #8
 8103e22:	b2db      	uxtb	r3, r3
 8103e24:	f003 0303 	and.w	r3, r3, #3
 8103e28:	b2da      	uxtb	r2, r3
 8103e2a:	683b      	ldr	r3, [r7, #0]
 8103e2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103e34:	085b      	lsrs	r3, r3, #1
 8103e36:	b2db      	uxtb	r3, r3
 8103e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103e3c:	b2da      	uxtb	r2, r3
 8103e3e:	683b      	ldr	r3, [r7, #0]
 8103e40:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8103e44:	683b      	ldr	r3, [r7, #0]
 8103e46:	2201      	movs	r2, #1
 8103e48:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8103e4c:	2300      	movs	r3, #0
}
 8103e4e:	4618      	mov	r0, r3
 8103e50:	3710      	adds	r7, #16
 8103e52:	46bd      	mov	sp, r7
 8103e54:	bd80      	pop	{r7, pc}
 8103e56:	bf00      	nop
 8103e58:	1fe00fff 	.word	0x1fe00fff

08103e5c <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8103e5c:	b580      	push	{r7, lr}
 8103e5e:	b08e      	sub	sp, #56	@ 0x38
 8103e60:	af00      	add	r7, sp, #0
 8103e62:	60f8      	str	r0, [r7, #12]
 8103e64:	60b9      	str	r1, [r7, #8]
 8103e66:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103e68:	f7fe f87e 	bl	8101f68 <HAL_GetTick>
 8103e6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8103e6e:	68bb      	ldr	r3, [r7, #8]
 8103e70:	2b00      	cmp	r3, #0
 8103e72:	d107      	bne.n	8103e84 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8103e74:	68fb      	ldr	r3, [r7, #12]
 8103e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103e78:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103e80:	2301      	movs	r3, #1
 8103e82:	e0de      	b.n	8104042 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8103e84:	68fb      	ldr	r3, [r7, #12]
 8103e86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8103e8a:	b2db      	uxtb	r3, r3
 8103e8c:	2b01      	cmp	r3, #1
 8103e8e:	f040 80d7 	bne.w	8104040 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8103e92:	68fb      	ldr	r3, [r7, #12]
 8103e94:	2200      	movs	r2, #0
 8103e96:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	2203      	movs	r2, #3
 8103e9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8103ea0:	68fb      	ldr	r3, [r7, #12]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	2200      	movs	r2, #0
 8103ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8103ea8:	68bb      	ldr	r3, [r7, #8]
 8103eaa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103eac:	f04f 33ff 	mov.w	r3, #4294967295
 8103eb0:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 8103eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103eb6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103eb8:	2390      	movs	r3, #144	@ 0x90
 8103eba:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103ebc:	2302      	movs	r3, #2
 8103ebe:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8103ec0:	2300      	movs	r3, #0
 8103ec2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8103ec4:	2300      	movs	r3, #0
 8103ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103ec8:	68fb      	ldr	r3, [r7, #12]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	f107 0210 	add.w	r2, r7, #16
 8103ed0:	4611      	mov	r1, r2
 8103ed2:	4618      	mov	r0, r3
 8103ed4:	f005 fb24 	bl	8109520 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8103ed8:	68fb      	ldr	r3, [r7, #12]
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	68da      	ldr	r2, [r3, #12]
 8103ede:	68fb      	ldr	r3, [r7, #12]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8103ee6:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103ee8:	68fb      	ldr	r3, [r7, #12]
 8103eea:	681b      	ldr	r3, [r3, #0]
 8103eec:	2100      	movs	r1, #0
 8103eee:	4618      	mov	r0, r3
 8103ef0:	f005 fc70 	bl	81097d4 <SDMMC_CmdSendEXTCSD>
 8103ef4:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8103ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103ef8:	2b00      	cmp	r3, #0
 8103efa:	d045      	beq.n	8103f88 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103efc:	68fb      	ldr	r3, [r7, #12]
 8103efe:	681b      	ldr	r3, [r3, #0]
 8103f00:	4a52      	ldr	r2, [pc, #328]	@ (810404c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103f02:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8103f04:	68fb      	ldr	r3, [r7, #12]
 8103f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103f0a:	431a      	orrs	r2, r3
 8103f0c:	68fb      	ldr	r3, [r7, #12]
 8103f0e:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103f10:	68fb      	ldr	r3, [r7, #12]
 8103f12:	2201      	movs	r2, #1
 8103f14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8103f18:	2301      	movs	r3, #1
 8103f1a:	e092      	b.n	8104042 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8103f1c:	68fb      	ldr	r3, [r7, #12]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103f26:	2b00      	cmp	r3, #0
 8103f28:	d013      	beq.n	8103f52 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103f2a:	2300      	movs	r3, #0
 8103f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8103f2e:	e00d      	b.n	8103f4c <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	4618      	mov	r0, r3
 8103f36:	f005 fa7d 	bl	8109434 <SDMMC_ReadFIFO>
 8103f3a:	4602      	mov	r2, r0
 8103f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f3e:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8103f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f42:	3304      	adds	r3, #4
 8103f44:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103f48:	3301      	adds	r3, #1
 8103f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8103f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103f4e:	2b07      	cmp	r3, #7
 8103f50:	d9ee      	bls.n	8103f30 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8103f52:	f7fe f809 	bl	8101f68 <HAL_GetTick>
 8103f56:	4602      	mov	r2, r0
 8103f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103f5a:	1ad3      	subs	r3, r2, r3
 8103f5c:	687a      	ldr	r2, [r7, #4]
 8103f5e:	429a      	cmp	r2, r3
 8103f60:	d902      	bls.n	8103f68 <HAL_MMC_GetCardExtCSD+0x10c>
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d10f      	bne.n	8103f88 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	4a37      	ldr	r2, [pc, #220]	@ (810404c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103f6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8103f7c:	68fb      	ldr	r3, [r7, #12]
 8103f7e:	2201      	movs	r2, #1
 8103f80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8103f84:	2303      	movs	r3, #3
 8103f86:	e05c      	b.n	8104042 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8103f88:	68fb      	ldr	r3, [r7, #12]
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f8e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8103f92:	2b00      	cmp	r3, #0
 8103f94:	d0c2      	beq.n	8103f1c <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8103f96:	68fb      	ldr	r3, [r7, #12]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	68da      	ldr	r2, [r3, #12]
 8103f9c:	68fb      	ldr	r3, [r7, #12]
 8103f9e:	681b      	ldr	r3, [r3, #0]
 8103fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8103fa4:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103fa6:	68fb      	ldr	r3, [r7, #12]
 8103fa8:	681b      	ldr	r3, [r3, #0]
 8103faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103fac:	f003 0308 	and.w	r3, r3, #8
 8103fb0:	2b00      	cmp	r3, #0
 8103fb2:	d00f      	beq.n	8103fd4 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	4a24      	ldr	r2, [pc, #144]	@ (810404c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103fba:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103fbc:	68fb      	ldr	r3, [r7, #12]
 8103fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103fc0:	f043 0208 	orr.w	r2, r3, #8
 8103fc4:	68fb      	ldr	r3, [r7, #12]
 8103fc6:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103fc8:	68fb      	ldr	r3, [r7, #12]
 8103fca:	2201      	movs	r2, #1
 8103fcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8103fd0:	2301      	movs	r3, #1
 8103fd2:	e036      	b.n	8104042 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8103fd4:	68fb      	ldr	r3, [r7, #12]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103fda:	f003 0302 	and.w	r3, r3, #2
 8103fde:	2b00      	cmp	r3, #0
 8103fe0:	d00f      	beq.n	8104002 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103fe2:	68fb      	ldr	r3, [r7, #12]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	4a19      	ldr	r2, [pc, #100]	@ (810404c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103fe8:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103fea:	68fb      	ldr	r3, [r7, #12]
 8103fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103fee:	f043 0202 	orr.w	r2, r3, #2
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103ff6:	68fb      	ldr	r3, [r7, #12]
 8103ff8:	2201      	movs	r2, #1
 8103ffa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8103ffe:	2301      	movs	r3, #1
 8104000:	e01f      	b.n	8104042 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8104002:	68fb      	ldr	r3, [r7, #12]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104008:	f003 0320 	and.w	r3, r3, #32
 810400c:	2b00      	cmp	r3, #0
 810400e:	d00f      	beq.n	8104030 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8104010:	68fb      	ldr	r3, [r7, #12]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	4a0d      	ldr	r2, [pc, #52]	@ (810404c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8104016:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8104018:	68fb      	ldr	r3, [r7, #12]
 810401a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810401c:	f043 0220 	orr.w	r2, r3, #32
 8104020:	68fb      	ldr	r3, [r7, #12]
 8104022:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	2201      	movs	r2, #1
 8104028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 810402c:	2301      	movs	r3, #1
 810402e:	e008      	b.n	8104042 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8104030:	68fb      	ldr	r3, [r7, #12]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	4a06      	ldr	r2, [pc, #24]	@ (8104050 <HAL_MMC_GetCardExtCSD+0x1f4>)
 8104036:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	2201      	movs	r2, #1
 810403c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8104040:	2300      	movs	r3, #0
}
 8104042:	4618      	mov	r0, r3
 8104044:	3738      	adds	r7, #56	@ 0x38
 8104046:	46bd      	mov	sp, r7
 8104048:	bd80      	pop	{r7, pc}
 810404a:	bf00      	nop
 810404c:	1fe00fff 	.word	0x1fe00fff
 8104050:	18000f3a 	.word	0x18000f3a

08104054 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8104054:	b5b0      	push	{r4, r5, r7, lr}
 8104056:	b08c      	sub	sp, #48	@ 0x30
 8104058:	af02      	add	r7, sp, #8
 810405a:	6078      	str	r0, [r7, #4]
 810405c:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 810405e:	2300      	movs	r3, #0
 8104060:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	2203      	movs	r2, #3
 8104066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	685b      	ldr	r3, [r3, #4]
 8104070:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8104074:	2b00      	cmp	r3, #0
 8104076:	d014      	beq.n	81040a2 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	685b      	ldr	r3, [r3, #4]
 810407e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8104082:	2b00      	cmp	r3, #0
 8104084:	d006      	beq.n	8104094 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8104086:	2204      	movs	r2, #4
 8104088:	6839      	ldr	r1, [r7, #0]
 810408a:	6878      	ldr	r0, [r7, #4]
 810408c:	f000 faf0 	bl	8104670 <MMC_PwrClassUpdate>
 8104090:	6238      	str	r0, [r7, #32]
 8104092:	e00c      	b.n	81040ae <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8104094:	2202      	movs	r2, #2
 8104096:	6839      	ldr	r1, [r7, #0]
 8104098:	6878      	ldr	r0, [r7, #4]
 810409a:	f000 fae9 	bl	8104670 <MMC_PwrClassUpdate>
 810409e:	6238      	str	r0, [r7, #32]
 81040a0:	e005      	b.n	81040ae <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 81040a2:	2201      	movs	r2, #1
 81040a4:	6839      	ldr	r1, [r7, #0]
 81040a6:	6878      	ldr	r0, [r7, #4]
 81040a8:	f000 fae2 	bl	8104670 <MMC_PwrClassUpdate>
 81040ac:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 81040ae:	6a3b      	ldr	r3, [r7, #32]
 81040b0:	2b00      	cmp	r3, #0
 81040b2:	d17b      	bne.n	81041ac <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 81040b4:	683b      	ldr	r3, [r7, #0]
 81040b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81040ba:	d107      	bne.n	81040cc <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	681b      	ldr	r3, [r3, #0]
 81040c0:	4946      	ldr	r1, [pc, #280]	@ (81041dc <HAL_MMC_ConfigWideBusOperation+0x188>)
 81040c2:	4618      	mov	r0, r3
 81040c4:	f005 fb63 	bl	810978e <SDMMC_CmdSwitch>
 81040c8:	6238      	str	r0, [r7, #32]
 81040ca:	e019      	b.n	8104100 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 81040cc:	683b      	ldr	r3, [r7, #0]
 81040ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81040d2:	d107      	bne.n	81040e4 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	681b      	ldr	r3, [r3, #0]
 81040d8:	4941      	ldr	r1, [pc, #260]	@ (81041e0 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 81040da:	4618      	mov	r0, r3
 81040dc:	f005 fb57 	bl	810978e <SDMMC_CmdSwitch>
 81040e0:	6238      	str	r0, [r7, #32]
 81040e2:	e00d      	b.n	8104100 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 81040e4:	683b      	ldr	r3, [r7, #0]
 81040e6:	2b00      	cmp	r3, #0
 81040e8:	d107      	bne.n	81040fa <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	681b      	ldr	r3, [r3, #0]
 81040ee:	493d      	ldr	r1, [pc, #244]	@ (81041e4 <HAL_MMC_ConfigWideBusOperation+0x190>)
 81040f0:	4618      	mov	r0, r3
 81040f2:	f005 fb4c 	bl	810978e <SDMMC_CmdSwitch>
 81040f6:	6238      	str	r0, [r7, #32]
 81040f8:	e002      	b.n	8104100 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 81040fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 81040fe:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8104100:	6a3b      	ldr	r3, [r7, #32]
 8104102:	2b00      	cmp	r3, #0
 8104104:	d152      	bne.n	81041ac <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8104106:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 810410a:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	681a      	ldr	r2, [r3, #0]
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104114:	041b      	lsls	r3, r3, #16
 8104116:	4619      	mov	r1, r3
 8104118:	4610      	mov	r0, r2
 810411a:	f005 faf5 	bl	8109708 <SDMMC_CmdSendStatus>
 810411e:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8104120:	6a3b      	ldr	r3, [r7, #32]
 8104122:	2b00      	cmp	r3, #0
 8104124:	d112      	bne.n	810414c <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	2100      	movs	r1, #0
 810412c:	4618      	mov	r0, r3
 810412e:	f005 f9e4 	bl	81094fa <SDMMC_GetResponse>
 8104132:	61f8      	str	r0, [r7, #28]
        count--;
 8104134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104136:	3b01      	subs	r3, #1
 8104138:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 810413a:	69fb      	ldr	r3, [r7, #28]
 810413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104140:	2b00      	cmp	r3, #0
 8104142:	d104      	bne.n	810414e <HAL_MMC_ConfigWideBusOperation+0xfa>
 8104144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104146:	2b00      	cmp	r3, #0
 8104148:	d1e0      	bne.n	810410c <HAL_MMC_ConfigWideBusOperation+0xb8>
 810414a:	e000      	b.n	810414e <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 810414c:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 810414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104150:	2b00      	cmp	r3, #0
 8104152:	d025      	beq.n	81041a0 <HAL_MMC_ConfigWideBusOperation+0x14c>
 8104154:	6a3b      	ldr	r3, [r7, #32]
 8104156:	2b00      	cmp	r3, #0
 8104158:	d122      	bne.n	81041a0 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 810415a:	69fb      	ldr	r3, [r7, #28]
 810415c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104160:	2b00      	cmp	r3, #0
 8104162:	d003      	beq.n	810416c <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8104164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8104168:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 810416a:	e01f      	b.n	81041ac <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	f107 0408 	add.w	r4, r7, #8
 8104172:	1d1d      	adds	r5, r3, #4
 8104174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104178:	682b      	ldr	r3, [r5, #0]
 810417a:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 810417c:	683b      	ldr	r3, [r7, #0]
 810417e:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	681c      	ldr	r4, [r3, #0]
 8104184:	466a      	mov	r2, sp
 8104186:	f107 0314 	add.w	r3, r7, #20
 810418a:	e893 0003 	ldmia.w	r3, {r0, r1}
 810418e:	e882 0003 	stmia.w	r2, {r0, r1}
 8104192:	f107 0308 	add.w	r3, r7, #8
 8104196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104198:	4620      	mov	r0, r4
 810419a:	f005 f921 	bl	81093e0 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 810419e:	e005      	b.n	81041ac <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 81041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81041a2:	2b00      	cmp	r3, #0
 81041a4:	d102      	bne.n	81041ac <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 81041a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81041aa:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	2201      	movs	r2, #1
 81041b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 81041b4:	6a3b      	ldr	r3, [r7, #32]
 81041b6:	2b00      	cmp	r3, #0
 81041b8:	d00b      	beq.n	81041d2 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81041ba:	687b      	ldr	r3, [r7, #4]
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	4a0a      	ldr	r2, [pc, #40]	@ (81041e8 <HAL_MMC_ConfigWideBusOperation+0x194>)
 81041c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 81041c2:	687b      	ldr	r3, [r7, #4]
 81041c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81041c6:	6a3b      	ldr	r3, [r7, #32]
 81041c8:	431a      	orrs	r2, r3
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81041ce:	2301      	movs	r3, #1
 81041d0:	e000      	b.n	81041d4 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 81041d2:	2300      	movs	r3, #0
}
 81041d4:	4618      	mov	r0, r3
 81041d6:	3728      	adds	r7, #40	@ 0x28
 81041d8:	46bd      	mov	sp, r7
 81041da:	bdb0      	pop	{r4, r5, r7, pc}
 81041dc:	03b70200 	.word	0x03b70200
 81041e0:	03b70100 	.word	0x03b70100
 81041e4:	03b70000 	.word	0x03b70000
 81041e8:	1fe00fff 	.word	0x1fe00fff

081041ec <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 81041ec:	b5b0      	push	{r4, r5, r7, lr}
 81041ee:	b096      	sub	sp, #88	@ 0x58
 81041f0:	af02      	add	r7, sp, #8
 81041f2:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 81041f4:	2302      	movs	r3, #2
 81041f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	4618      	mov	r0, r3
 8104200:	f005 f936 	bl	8109470 <SDMMC_GetPowerState>
 8104204:	4603      	mov	r3, r0
 8104206:	2b00      	cmp	r3, #0
 8104208:	d102      	bne.n	8104210 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 810420a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 810420e:	e0e6      	b.n	81043de <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	681b      	ldr	r3, [r3, #0]
 8104214:	4618      	mov	r0, r3
 8104216:	f005 fa13 	bl	8109640 <SDMMC_CmdSendCID>
 810421a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 810421c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810421e:	2b00      	cmp	r3, #0
 8104220:	d001      	beq.n	8104226 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8104222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104224:	e0db      	b.n	81043de <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	2100      	movs	r1, #0
 810422c:	4618      	mov	r0, r3
 810422e:	f005 f964 	bl	81094fa <SDMMC_GetResponse>
 8104232:	4602      	mov	r2, r0
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	681b      	ldr	r3, [r3, #0]
 810423c:	2104      	movs	r1, #4
 810423e:	4618      	mov	r0, r3
 8104240:	f005 f95b 	bl	81094fa <SDMMC_GetResponse>
 8104244:	4602      	mov	r2, r0
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	681b      	ldr	r3, [r3, #0]
 810424e:	2108      	movs	r1, #8
 8104250:	4618      	mov	r0, r3
 8104252:	f005 f952 	bl	81094fa <SDMMC_GetResponse>
 8104256:	4602      	mov	r2, r0
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	681b      	ldr	r3, [r3, #0]
 8104260:	210c      	movs	r1, #12
 8104262:	4618      	mov	r0, r3
 8104264:	f005 f949 	bl	81094fa <SDMMC_GetResponse>
 8104268:	4602      	mov	r2, r0
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	681b      	ldr	r3, [r3, #0]
 8104272:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8104276:	4611      	mov	r1, r2
 8104278:	4618      	mov	r0, r3
 810427a:	f005 fa20 	bl	81096be <SDMMC_CmdSetRelAddMmc>
 810427e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8104280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104282:	2b00      	cmp	r3, #0
 8104284:	d001      	beq.n	810428a <MMC_InitCard+0x9e>
  {
    return errorstate;
 8104286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104288:	e0a9      	b.n	81043de <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 810428a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681a      	ldr	r2, [r3, #0]
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810429a:	041b      	lsls	r3, r3, #16
 810429c:	4619      	mov	r1, r3
 810429e:	4610      	mov	r0, r2
 81042a0:	f005 f9ed 	bl	810967e <SDMMC_CmdSendCSD>
 81042a4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 81042a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81042a8:	2b00      	cmp	r3, #0
 81042aa:	d001      	beq.n	81042b0 <MMC_InitCard+0xc4>
  {
    return errorstate;
 81042ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81042ae:	e096      	b.n	81043de <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	2100      	movs	r1, #0
 81042b6:	4618      	mov	r0, r3
 81042b8:	f005 f91f 	bl	81094fa <SDMMC_GetResponse>
 81042bc:	4602      	mov	r2, r0
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	2104      	movs	r1, #4
 81042c8:	4618      	mov	r0, r3
 81042ca:	f005 f916 	bl	81094fa <SDMMC_GetResponse>
 81042ce:	4602      	mov	r2, r0
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	2108      	movs	r1, #8
 81042da:	4618      	mov	r0, r3
 81042dc:	f005 f90d 	bl	81094fa <SDMMC_GetResponse>
 81042e0:	4602      	mov	r2, r0
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	210c      	movs	r1, #12
 81042ec:	4618      	mov	r0, r3
 81042ee:	f005 f904 	bl	81094fa <SDMMC_GetResponse>
 81042f2:	4602      	mov	r2, r0
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	2104      	movs	r1, #4
 81042fe:	4618      	mov	r0, r3
 8104300:	f005 f8fb 	bl	81094fa <SDMMC_GetResponse>
 8104304:	4603      	mov	r3, r0
 8104306:	0d1a      	lsrs	r2, r3, #20
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	681a      	ldr	r2, [r3, #0]
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104314:	041b      	lsls	r3, r3, #16
 8104316:	4619      	mov	r1, r3
 8104318:	4610      	mov	r0, r2
 810431a:	f005 f950 	bl	81095be <SDMMC_CmdSelDesel>
 810431e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8104320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104322:	2b00      	cmp	r3, #0
 8104324:	d001      	beq.n	810432a <MMC_InitCard+0x13e>
  {
    return errorstate;
 8104326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104328:	e059      	b.n	81043de <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 810432a:	f107 031c 	add.w	r3, r7, #28
 810432e:	4619      	mov	r1, r3
 8104330:	6878      	ldr	r0, [r7, #4]
 8104332:	f7ff fbef 	bl	8103b14 <HAL_MMC_GetCardCSD>
 8104336:	4603      	mov	r3, r0
 8104338:	2b00      	cmp	r3, #0
 810433a:	d002      	beq.n	8104342 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104340:	e04d      	b.n	81043de <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681a      	ldr	r2, [r3, #0]
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810434a:	041b      	lsls	r3, r3, #16
 810434c:	4619      	mov	r1, r3
 810434e:	4610      	mov	r0, r2
 8104350:	f005 f9da 	bl	8109708 <SDMMC_CmdSendStatus>
 8104354:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8104356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104358:	2b00      	cmp	r3, #0
 810435a:	d005      	beq.n	8104368 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104362:	431a      	orrs	r2, r3
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	3378      	adds	r3, #120	@ 0x78
 810436c:	f04f 32ff 	mov.w	r2, #4294967295
 8104370:	4619      	mov	r1, r3
 8104372:	6878      	ldr	r0, [r7, #4]
 8104374:	f7ff fd72 	bl	8103e5c <HAL_MMC_GetCardExtCSD>
 8104378:	4603      	mov	r3, r0
 810437a:	2b00      	cmp	r3, #0
 810437c:	d002      	beq.n	8104384 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104382:	e02c      	b.n	81043de <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681a      	ldr	r2, [r3, #0]
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810438c:	041b      	lsls	r3, r3, #16
 810438e:	4619      	mov	r1, r3
 8104390:	4610      	mov	r0, r2
 8104392:	f005 f9b9 	bl	8109708 <SDMMC_CmdSendStatus>
 8104396:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8104398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810439a:	2b00      	cmp	r3, #0
 810439c:	d005      	beq.n	81043aa <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81043a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81043a4:	431a      	orrs	r2, r3
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	f107 0408 	add.w	r4, r7, #8
 81043b0:	1d1d      	adds	r5, r3, #4
 81043b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81043b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81043b6:	682b      	ldr	r3, [r5, #0]
 81043b8:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 81043ba:	2300      	movs	r3, #0
 81043bc:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	681c      	ldr	r4, [r3, #0]
 81043c2:	466a      	mov	r2, sp
 81043c4:	f107 0314 	add.w	r3, r7, #20
 81043c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 81043cc:	e882 0003 	stmia.w	r2, {r0, r1}
 81043d0:	f107 0308 	add.w	r3, r7, #8
 81043d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 81043d6:	4620      	mov	r0, r4
 81043d8:	f005 f802 	bl	81093e0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 81043dc:	2300      	movs	r3, #0
}
 81043de:	4618      	mov	r0, r3
 81043e0:	3750      	adds	r7, #80	@ 0x50
 81043e2:	46bd      	mov	sp, r7
 81043e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

081043e8 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 81043e8:	b580      	push	{r7, lr}
 81043ea:	b086      	sub	sp, #24
 81043ec:	af00      	add	r7, sp, #0
 81043ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81043f0:	2300      	movs	r3, #0
 81043f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 81043f4:	2300      	movs	r3, #0
 81043f6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 81043f8:	2300      	movs	r3, #0
 81043fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4618      	mov	r0, r3
 8104402:	f005 f8ff 	bl	8109604 <SDMMC_CmdGoIdleState>
 8104406:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	2b00      	cmp	r3, #0
 810440c:	d027      	beq.n	810445e <MMC_PowerON+0x76>
  {
    return errorstate;
 810440e:	68fb      	ldr	r3, [r7, #12]
 8104410:	e034      	b.n	810447c <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8104412:	68bb      	ldr	r3, [r7, #8]
 8104414:	1c5a      	adds	r2, r3, #1
 8104416:	60ba      	str	r2, [r7, #8]
 8104418:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810441c:	4293      	cmp	r3, r2
 810441e:	d102      	bne.n	8104426 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8104420:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8104424:	e02a      	b.n	810447c <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4916      	ldr	r1, [pc, #88]	@ (8104484 <MMC_PowerON+0x9c>)
 810442c:	4618      	mov	r0, r3
 810442e:	f005 f98e 	bl	810974e <SDMMC_CmdOpCondition>
 8104432:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	2b00      	cmp	r3, #0
 8104438:	d002      	beq.n	8104440 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 810443a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810443e:	e01d      	b.n	810447c <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	2100      	movs	r1, #0
 8104446:	4618      	mov	r0, r3
 8104448:	f005 f857 	bl	81094fa <SDMMC_GetResponse>
 810444c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810444e:	697b      	ldr	r3, [r7, #20]
 8104450:	0fdb      	lsrs	r3, r3, #31
 8104452:	2b01      	cmp	r3, #1
 8104454:	d101      	bne.n	810445a <MMC_PowerON+0x72>
 8104456:	2301      	movs	r3, #1
 8104458:	e000      	b.n	810445c <MMC_PowerON+0x74>
 810445a:	2300      	movs	r3, #0
 810445c:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 810445e:	693b      	ldr	r3, [r7, #16]
 8104460:	2b00      	cmp	r3, #0
 8104462:	d0d6      	beq.n	8104412 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8104464:	697b      	ldr	r3, [r7, #20]
 8104466:	0e1b      	lsrs	r3, r3, #24
 8104468:	2bc0      	cmp	r3, #192	@ 0xc0
 810446a:	d103      	bne.n	8104474 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	2201      	movs	r2, #1
 8104470:	63da      	str	r2, [r3, #60]	@ 0x3c
 8104472:	e002      	b.n	810447a <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	2200      	movs	r2, #0
 8104478:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 810447a:	2300      	movs	r3, #0
}
 810447c:	4618      	mov	r0, r3
 810447e:	3718      	adds	r7, #24
 8104480:	46bd      	mov	sp, r7
 8104482:	bd80      	pop	{r7, pc}
 8104484:	c0ff8000 	.word	0xc0ff8000

08104488 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8104488:	b580      	push	{r7, lr}
 810448a:	b090      	sub	sp, #64	@ 0x40
 810448c:	af00      	add	r7, sp, #0
 810448e:	60f8      	str	r0, [r7, #12]
 8104490:	60b9      	str	r1, [r7, #8]
 8104492:	603b      	str	r3, [r7, #0]
 8104494:	4613      	mov	r3, r2
 8104496:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8104498:	f7fd fd66 	bl	8101f68 <HAL_GetTick>
 810449c:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 810449e:	2300      	movs	r3, #0
 81044a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 81044a2:	68fb      	ldr	r3, [r7, #12]
 81044a4:	2200      	movs	r2, #0
 81044a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 81044a8:	68fb      	ldr	r3, [r7, #12]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	2200      	movs	r2, #0
 81044ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81044b0:	f04f 33ff 	mov.w	r3, #4294967295
 81044b4:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 81044b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81044ba:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 81044bc:	2390      	movs	r3, #144	@ 0x90
 81044be:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81044c0:	2302      	movs	r3, #2
 81044c2:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81044c4:	2300      	movs	r3, #0
 81044c6:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81044c8:	2301      	movs	r3, #1
 81044ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 81044cc:	68fb      	ldr	r3, [r7, #12]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	f107 0214 	add.w	r2, r7, #20
 81044d4:	4611      	mov	r1, r2
 81044d6:	4618      	mov	r0, r3
 81044d8:	f005 f822 	bl	8109520 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 81044dc:	68fb      	ldr	r3, [r7, #12]
 81044de:	681b      	ldr	r3, [r3, #0]
 81044e0:	2100      	movs	r1, #0
 81044e2:	4618      	mov	r0, r3
 81044e4:	f005 f976 	bl	81097d4 <SDMMC_CmdSendEXTCSD>
 81044e8:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 81044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81044ec:	2b00      	cmp	r3, #0
 81044ee:	d04e      	beq.n	810458e <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81044f0:	68fb      	ldr	r3, [r7, #12]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	4a5c      	ldr	r2, [pc, #368]	@ (8104668 <MMC_ReadExtCSD+0x1e0>)
 81044f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81044fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81044fe:	431a      	orrs	r2, r3
 8104500:	68fb      	ldr	r3, [r7, #12]
 8104502:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8104504:	68fb      	ldr	r3, [r7, #12]
 8104506:	2201      	movs	r2, #1
 8104508:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 810450c:	2301      	movs	r3, #1
 810450e:	e0a6      	b.n	810465e <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8104510:	68fb      	ldr	r3, [r7, #12]
 8104512:	681b      	ldr	r3, [r3, #0]
 8104514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810451a:	2b00      	cmp	r3, #0
 810451c:	d01c      	beq.n	8104558 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 810451e:	2300      	movs	r3, #0
 8104520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104522:	e013      	b.n	810454c <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8104524:	68fb      	ldr	r3, [r7, #12]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	4618      	mov	r0, r3
 810452a:	f004 ff83 	bl	8109434 <SDMMC_ReadFIFO>
 810452e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8104530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8104532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104534:	4413      	add	r3, r2
 8104536:	88fa      	ldrh	r2, [r7, #6]
 8104538:	0892      	lsrs	r2, r2, #2
 810453a:	b292      	uxth	r2, r2
 810453c:	4293      	cmp	r3, r2
 810453e:	d102      	bne.n	8104546 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8104540:	68bb      	ldr	r3, [r7, #8]
 8104542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104544:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8104546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104548:	3301      	adds	r3, #1
 810454a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810454c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810454e:	2b07      	cmp	r3, #7
 8104550:	d9e8      	bls.n	8104524 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8104552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104554:	3308      	adds	r3, #8
 8104556:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8104558:	f7fd fd06 	bl	8101f68 <HAL_GetTick>
 810455c:	4602      	mov	r2, r0
 810455e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104560:	1ad3      	subs	r3, r2, r3
 8104562:	683a      	ldr	r2, [r7, #0]
 8104564:	429a      	cmp	r2, r3
 8104566:	d902      	bls.n	810456e <MMC_ReadExtCSD+0xe6>
 8104568:	683b      	ldr	r3, [r7, #0]
 810456a:	2b00      	cmp	r3, #0
 810456c:	d10f      	bne.n	810458e <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810456e:	68fb      	ldr	r3, [r7, #12]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	4a3d      	ldr	r2, [pc, #244]	@ (8104668 <MMC_ReadExtCSD+0x1e0>)
 8104574:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8104576:	68fb      	ldr	r3, [r7, #12]
 8104578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810457a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810457e:	68fb      	ldr	r3, [r7, #12]
 8104580:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8104582:	68fb      	ldr	r3, [r7, #12]
 8104584:	2201      	movs	r2, #1
 8104586:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 810458a:	2303      	movs	r3, #3
 810458c:	e067      	b.n	810465e <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 810458e:	68fb      	ldr	r3, [r7, #12]
 8104590:	681b      	ldr	r3, [r3, #0]
 8104592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104594:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8104598:	2b00      	cmp	r3, #0
 810459a:	d0b9      	beq.n	8104510 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 810459c:	68fb      	ldr	r3, [r7, #12]
 810459e:	681b      	ldr	r3, [r3, #0]
 81045a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045a2:	f003 0308 	and.w	r3, r3, #8
 81045a6:	2b00      	cmp	r3, #0
 81045a8:	d00f      	beq.n	81045ca <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	4a2e      	ldr	r2, [pc, #184]	@ (8104668 <MMC_ReadExtCSD+0x1e0>)
 81045b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 81045b2:	68fb      	ldr	r3, [r7, #12]
 81045b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045b6:	f043 0208 	orr.w	r2, r3, #8
 81045ba:	68fb      	ldr	r3, [r7, #12]
 81045bc:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 81045be:	68fb      	ldr	r3, [r7, #12]
 81045c0:	2201      	movs	r2, #1
 81045c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 81045c6:	2301      	movs	r3, #1
 81045c8:	e049      	b.n	810465e <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 81045ca:	68fb      	ldr	r3, [r7, #12]
 81045cc:	681b      	ldr	r3, [r3, #0]
 81045ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045d0:	f003 0302 	and.w	r3, r3, #2
 81045d4:	2b00      	cmp	r3, #0
 81045d6:	d00f      	beq.n	81045f8 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81045d8:	68fb      	ldr	r3, [r7, #12]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	4a22      	ldr	r2, [pc, #136]	@ (8104668 <MMC_ReadExtCSD+0x1e0>)
 81045de:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 81045e0:	68fb      	ldr	r3, [r7, #12]
 81045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045e4:	f043 0202 	orr.w	r2, r3, #2
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 81045ec:	68fb      	ldr	r3, [r7, #12]
 81045ee:	2201      	movs	r2, #1
 81045f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 81045f4:	2301      	movs	r3, #1
 81045f6:	e032      	b.n	810465e <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 81045f8:	68fb      	ldr	r3, [r7, #12]
 81045fa:	681b      	ldr	r3, [r3, #0]
 81045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045fe:	f003 0320 	and.w	r3, r3, #32
 8104602:	2b00      	cmp	r3, #0
 8104604:	d00f      	beq.n	8104626 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	4a17      	ldr	r2, [pc, #92]	@ (8104668 <MMC_ReadExtCSD+0x1e0>)
 810460c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 810460e:	68fb      	ldr	r3, [r7, #12]
 8104610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104612:	f043 0220 	orr.w	r2, r3, #32
 8104616:	68fb      	ldr	r3, [r7, #12]
 8104618:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 810461a:	68fb      	ldr	r3, [r7, #12]
 810461c:	2201      	movs	r2, #1
 810461e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8104622:	2301      	movs	r3, #1
 8104624:	e01b      	b.n	810465e <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8104626:	68fb      	ldr	r3, [r7, #12]
 8104628:	681a      	ldr	r2, [r3, #0]
 810462a:	68fb      	ldr	r3, [r7, #12]
 810462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810462e:	041b      	lsls	r3, r3, #16
 8104630:	4619      	mov	r1, r3
 8104632:	4610      	mov	r0, r2
 8104634:	f005 f868 	bl	8109708 <SDMMC_CmdSendStatus>
 8104638:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 810463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810463c:	2b00      	cmp	r3, #0
 810463e:	d005      	beq.n	810464c <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8104640:	68fb      	ldr	r3, [r7, #12]
 8104642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104646:	431a      	orrs	r2, r3
 8104648:	68fb      	ldr	r3, [r7, #12]
 810464a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 810464c:	68fb      	ldr	r3, [r7, #12]
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	4a06      	ldr	r2, [pc, #24]	@ (810466c <MMC_ReadExtCSD+0x1e4>)
 8104652:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	2201      	movs	r2, #1
 8104658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 810465c:	2300      	movs	r3, #0
}
 810465e:	4618      	mov	r0, r3
 8104660:	3740      	adds	r7, #64	@ 0x40
 8104662:	46bd      	mov	sp, r7
 8104664:	bd80      	pop	{r7, pc}
 8104666:	bf00      	nop
 8104668:	1fe00fff 	.word	0x1fe00fff
 810466c:	18000f3a 	.word	0x18000f3a

08104670 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8104670:	b580      	push	{r7, lr}
 8104672:	b08a      	sub	sp, #40	@ 0x28
 8104674:	af00      	add	r7, sp, #0
 8104676:	60f8      	str	r0, [r7, #12]
 8104678:	60b9      	str	r1, [r7, #8]
 810467a:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 810467c:	2300      	movs	r3, #0
 810467e:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8104680:	2300      	movs	r3, #0
 8104682:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8104684:	68bb      	ldr	r3, [r7, #8]
 8104686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810468a:	d004      	beq.n	8104696 <MMC_PwrClassUpdate+0x26>
 810468c:	68bb      	ldr	r3, [r7, #8]
 810468e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104692:	f040 8088 	bne.w	81047a6 <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8104696:	2300      	movs	r3, #0
 8104698:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 810469a:	f107 0114 	add.w	r1, r7, #20
 810469e:	f04f 33ff 	mov.w	r3, #4294967295
 81046a2:	22bb      	movs	r2, #187	@ 0xbb
 81046a4:	68f8      	ldr	r0, [r7, #12]
 81046a6:	f7ff feef 	bl	8104488 <MMC_ReadExtCSD>
 81046aa:	4603      	mov	r3, r0
 81046ac:	2b00      	cmp	r3, #0
 81046ae:	d003      	beq.n	81046b8 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 81046b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 81046b4:	61fb      	str	r3, [r7, #28]
 81046b6:	e002      	b.n	81046be <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 81046b8:	697b      	ldr	r3, [r7, #20]
 81046ba:	0e1b      	lsrs	r3, r3, #24
 81046bc:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 81046be:	687b      	ldr	r3, [r7, #4]
 81046c0:	2b04      	cmp	r3, #4
 81046c2:	d105      	bne.n	81046d0 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 81046c4:	68fb      	ldr	r3, [r7, #12]
 81046c6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 81046ca:	0e1b      	lsrs	r3, r3, #24
 81046cc:	61bb      	str	r3, [r7, #24]
 81046ce:	e00e      	b.n	81046ee <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	2b02      	cmp	r3, #2
 81046d4:	d106      	bne.n	81046e4 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 81046d6:	68fb      	ldr	r3, [r7, #12]
 81046d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 81046dc:	0c1b      	lsrs	r3, r3, #16
 81046de:	b2db      	uxtb	r3, r3
 81046e0:	61bb      	str	r3, [r7, #24]
 81046e2:	e004      	b.n	81046ee <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 81046e4:	68fb      	ldr	r3, [r7, #12]
 81046e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 81046ea:	0e1b      	lsrs	r3, r3, #24
 81046ec:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 81046ee:	69fb      	ldr	r3, [r7, #28]
 81046f0:	2b00      	cmp	r3, #0
 81046f2:	d158      	bne.n	81047a6 <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 81046f4:	68bb      	ldr	r3, [r7, #8]
 81046f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81046fa:	d102      	bne.n	8104702 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 81046fc:	69bb      	ldr	r3, [r7, #24]
 81046fe:	091b      	lsrs	r3, r3, #4
 8104700:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8104702:	697a      	ldr	r2, [r7, #20]
 8104704:	69bb      	ldr	r3, [r7, #24]
 8104706:	4053      	eors	r3, r2
 8104708:	f003 030f 	and.w	r3, r3, #15
 810470c:	2b00      	cmp	r3, #0
 810470e:	d04a      	beq.n	81047a6 <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8104710:	68fb      	ldr	r3, [r7, #12]
 8104712:	681a      	ldr	r2, [r3, #0]
 8104714:	69bb      	ldr	r3, [r7, #24]
 8104716:	021b      	lsls	r3, r3, #8
 8104718:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 810471c:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 8104720:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8104724:	4619      	mov	r1, r3
 8104726:	4610      	mov	r0, r2
 8104728:	f005 f831 	bl	810978e <SDMMC_CmdSwitch>
 810472c:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 810472e:	69fb      	ldr	r3, [r7, #28]
 8104730:	2b00      	cmp	r3, #0
 8104732:	d138      	bne.n	81047a6 <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8104734:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8104738:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 810473a:	68fb      	ldr	r3, [r7, #12]
 810473c:	681a      	ldr	r2, [r3, #0]
 810473e:	68fb      	ldr	r3, [r7, #12]
 8104740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104742:	041b      	lsls	r3, r3, #16
 8104744:	4619      	mov	r1, r3
 8104746:	4610      	mov	r0, r2
 8104748:	f004 ffde 	bl	8109708 <SDMMC_CmdSendStatus>
 810474c:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 810474e:	69fb      	ldr	r3, [r7, #28]
 8104750:	2b00      	cmp	r3, #0
 8104752:	d112      	bne.n	810477a <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	2100      	movs	r1, #0
 810475a:	4618      	mov	r0, r3
 810475c:	f004 fecd 	bl	81094fa <SDMMC_GetResponse>
 8104760:	6238      	str	r0, [r7, #32]
            count--;
 8104762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104764:	3b01      	subs	r3, #1
 8104766:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8104768:	6a3b      	ldr	r3, [r7, #32]
 810476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810476e:	2b00      	cmp	r3, #0
 8104770:	d104      	bne.n	810477c <MMC_PwrClassUpdate+0x10c>
 8104772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104774:	2b00      	cmp	r3, #0
 8104776:	d1e0      	bne.n	810473a <MMC_PwrClassUpdate+0xca>
 8104778:	e000      	b.n	810477c <MMC_PwrClassUpdate+0x10c>
              break;
 810477a:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 810477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810477e:	2b00      	cmp	r3, #0
 8104780:	d00b      	beq.n	810479a <MMC_PwrClassUpdate+0x12a>
 8104782:	69fb      	ldr	r3, [r7, #28]
 8104784:	2b00      	cmp	r3, #0
 8104786:	d108      	bne.n	810479a <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8104788:	6a3b      	ldr	r3, [r7, #32]
 810478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810478e:	2b00      	cmp	r3, #0
 8104790:	d009      	beq.n	81047a6 <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8104792:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8104796:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8104798:	e005      	b.n	81047a6 <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 810479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810479c:	2b00      	cmp	r3, #0
 810479e:	d102      	bne.n	81047a6 <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 81047a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81047a4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 81047a6:	69fb      	ldr	r3, [r7, #28]
}
 81047a8:	4618      	mov	r0, r3
 81047aa:	3728      	adds	r7, #40	@ 0x28
 81047ac:	46bd      	mov	sp, r7
 81047ae:	bd80      	pop	{r7, pc}

081047b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81047b0:	b580      	push	{r7, lr}
 81047b2:	b086      	sub	sp, #24
 81047b4:	af02      	add	r7, sp, #8
 81047b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	2b00      	cmp	r3, #0
 81047bc:	d101      	bne.n	81047c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81047be:	2301      	movs	r3, #1
 81047c0:	e0fe      	b.n	81049c0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 81047c8:	b2db      	uxtb	r3, r3
 81047ca:	2b00      	cmp	r3, #0
 81047cc:	d106      	bne.n	81047dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	2200      	movs	r2, #0
 81047d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 81047d6:	6878      	ldr	r0, [r7, #4]
 81047d8:	f7fd f8dc 	bl	8101994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	2203      	movs	r2, #3
 81047e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 81047e4:	687b      	ldr	r3, [r7, #4]
 81047e6:	681b      	ldr	r3, [r3, #0]
 81047e8:	4618      	mov	r0, r3
 81047ea:	f005 fa32 	bl	8109c52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	6818      	ldr	r0, [r3, #0]
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	7c1a      	ldrb	r2, [r3, #16]
 81047f6:	f88d 2000 	strb.w	r2, [sp]
 81047fa:	3304      	adds	r3, #4
 81047fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81047fe:	f005 f9b7 	bl	8109b70 <USB_CoreInit>
 8104802:	4603      	mov	r3, r0
 8104804:	2b00      	cmp	r3, #0
 8104806:	d005      	beq.n	8104814 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	2202      	movs	r2, #2
 810480c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8104810:	2301      	movs	r3, #1
 8104812:	e0d5      	b.n	81049c0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8104814:	687b      	ldr	r3, [r7, #4]
 8104816:	681b      	ldr	r3, [r3, #0]
 8104818:	2100      	movs	r1, #0
 810481a:	4618      	mov	r0, r3
 810481c:	f005 fa2a 	bl	8109c74 <USB_SetCurrentMode>
 8104820:	4603      	mov	r3, r0
 8104822:	2b00      	cmp	r3, #0
 8104824:	d005      	beq.n	8104832 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	2202      	movs	r2, #2
 810482a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810482e:	2301      	movs	r3, #1
 8104830:	e0c6      	b.n	81049c0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104832:	2300      	movs	r3, #0
 8104834:	73fb      	strb	r3, [r7, #15]
 8104836:	e04a      	b.n	81048ce <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8104838:	7bfa      	ldrb	r2, [r7, #15]
 810483a:	6879      	ldr	r1, [r7, #4]
 810483c:	4613      	mov	r3, r2
 810483e:	00db      	lsls	r3, r3, #3
 8104840:	4413      	add	r3, r2
 8104842:	009b      	lsls	r3, r3, #2
 8104844:	440b      	add	r3, r1
 8104846:	3315      	adds	r3, #21
 8104848:	2201      	movs	r2, #1
 810484a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 810484c:	7bfa      	ldrb	r2, [r7, #15]
 810484e:	6879      	ldr	r1, [r7, #4]
 8104850:	4613      	mov	r3, r2
 8104852:	00db      	lsls	r3, r3, #3
 8104854:	4413      	add	r3, r2
 8104856:	009b      	lsls	r3, r3, #2
 8104858:	440b      	add	r3, r1
 810485a:	3314      	adds	r3, #20
 810485c:	7bfa      	ldrb	r2, [r7, #15]
 810485e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8104860:	7bfa      	ldrb	r2, [r7, #15]
 8104862:	7bfb      	ldrb	r3, [r7, #15]
 8104864:	b298      	uxth	r0, r3
 8104866:	6879      	ldr	r1, [r7, #4]
 8104868:	4613      	mov	r3, r2
 810486a:	00db      	lsls	r3, r3, #3
 810486c:	4413      	add	r3, r2
 810486e:	009b      	lsls	r3, r3, #2
 8104870:	440b      	add	r3, r1
 8104872:	332e      	adds	r3, #46	@ 0x2e
 8104874:	4602      	mov	r2, r0
 8104876:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8104878:	7bfa      	ldrb	r2, [r7, #15]
 810487a:	6879      	ldr	r1, [r7, #4]
 810487c:	4613      	mov	r3, r2
 810487e:	00db      	lsls	r3, r3, #3
 8104880:	4413      	add	r3, r2
 8104882:	009b      	lsls	r3, r3, #2
 8104884:	440b      	add	r3, r1
 8104886:	3318      	adds	r3, #24
 8104888:	2200      	movs	r2, #0
 810488a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 810488c:	7bfa      	ldrb	r2, [r7, #15]
 810488e:	6879      	ldr	r1, [r7, #4]
 8104890:	4613      	mov	r3, r2
 8104892:	00db      	lsls	r3, r3, #3
 8104894:	4413      	add	r3, r2
 8104896:	009b      	lsls	r3, r3, #2
 8104898:	440b      	add	r3, r1
 810489a:	331c      	adds	r3, #28
 810489c:	2200      	movs	r2, #0
 810489e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81048a0:	7bfa      	ldrb	r2, [r7, #15]
 81048a2:	6879      	ldr	r1, [r7, #4]
 81048a4:	4613      	mov	r3, r2
 81048a6:	00db      	lsls	r3, r3, #3
 81048a8:	4413      	add	r3, r2
 81048aa:	009b      	lsls	r3, r3, #2
 81048ac:	440b      	add	r3, r1
 81048ae:	3320      	adds	r3, #32
 81048b0:	2200      	movs	r2, #0
 81048b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81048b4:	7bfa      	ldrb	r2, [r7, #15]
 81048b6:	6879      	ldr	r1, [r7, #4]
 81048b8:	4613      	mov	r3, r2
 81048ba:	00db      	lsls	r3, r3, #3
 81048bc:	4413      	add	r3, r2
 81048be:	009b      	lsls	r3, r3, #2
 81048c0:	440b      	add	r3, r1
 81048c2:	3324      	adds	r3, #36	@ 0x24
 81048c4:	2200      	movs	r2, #0
 81048c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81048c8:	7bfb      	ldrb	r3, [r7, #15]
 81048ca:	3301      	adds	r3, #1
 81048cc:	73fb      	strb	r3, [r7, #15]
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	791b      	ldrb	r3, [r3, #4]
 81048d2:	7bfa      	ldrb	r2, [r7, #15]
 81048d4:	429a      	cmp	r2, r3
 81048d6:	d3af      	bcc.n	8104838 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81048d8:	2300      	movs	r3, #0
 81048da:	73fb      	strb	r3, [r7, #15]
 81048dc:	e044      	b.n	8104968 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 81048de:	7bfa      	ldrb	r2, [r7, #15]
 81048e0:	6879      	ldr	r1, [r7, #4]
 81048e2:	4613      	mov	r3, r2
 81048e4:	00db      	lsls	r3, r3, #3
 81048e6:	4413      	add	r3, r2
 81048e8:	009b      	lsls	r3, r3, #2
 81048ea:	440b      	add	r3, r1
 81048ec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 81048f0:	2200      	movs	r2, #0
 81048f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 81048f4:	7bfa      	ldrb	r2, [r7, #15]
 81048f6:	6879      	ldr	r1, [r7, #4]
 81048f8:	4613      	mov	r3, r2
 81048fa:	00db      	lsls	r3, r3, #3
 81048fc:	4413      	add	r3, r2
 81048fe:	009b      	lsls	r3, r3, #2
 8104900:	440b      	add	r3, r1
 8104902:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8104906:	7bfa      	ldrb	r2, [r7, #15]
 8104908:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 810490a:	7bfa      	ldrb	r2, [r7, #15]
 810490c:	6879      	ldr	r1, [r7, #4]
 810490e:	4613      	mov	r3, r2
 8104910:	00db      	lsls	r3, r3, #3
 8104912:	4413      	add	r3, r2
 8104914:	009b      	lsls	r3, r3, #2
 8104916:	440b      	add	r3, r1
 8104918:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 810491c:	2200      	movs	r2, #0
 810491e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8104920:	7bfa      	ldrb	r2, [r7, #15]
 8104922:	6879      	ldr	r1, [r7, #4]
 8104924:	4613      	mov	r3, r2
 8104926:	00db      	lsls	r3, r3, #3
 8104928:	4413      	add	r3, r2
 810492a:	009b      	lsls	r3, r3, #2
 810492c:	440b      	add	r3, r1
 810492e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8104932:	2200      	movs	r2, #0
 8104934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8104936:	7bfa      	ldrb	r2, [r7, #15]
 8104938:	6879      	ldr	r1, [r7, #4]
 810493a:	4613      	mov	r3, r2
 810493c:	00db      	lsls	r3, r3, #3
 810493e:	4413      	add	r3, r2
 8104940:	009b      	lsls	r3, r3, #2
 8104942:	440b      	add	r3, r1
 8104944:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8104948:	2200      	movs	r2, #0
 810494a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 810494c:	7bfa      	ldrb	r2, [r7, #15]
 810494e:	6879      	ldr	r1, [r7, #4]
 8104950:	4613      	mov	r3, r2
 8104952:	00db      	lsls	r3, r3, #3
 8104954:	4413      	add	r3, r2
 8104956:	009b      	lsls	r3, r3, #2
 8104958:	440b      	add	r3, r1
 810495a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 810495e:	2200      	movs	r2, #0
 8104960:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104962:	7bfb      	ldrb	r3, [r7, #15]
 8104964:	3301      	adds	r3, #1
 8104966:	73fb      	strb	r3, [r7, #15]
 8104968:	687b      	ldr	r3, [r7, #4]
 810496a:	791b      	ldrb	r3, [r3, #4]
 810496c:	7bfa      	ldrb	r2, [r7, #15]
 810496e:	429a      	cmp	r2, r3
 8104970:	d3b5      	bcc.n	81048de <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8104972:	687b      	ldr	r3, [r7, #4]
 8104974:	6818      	ldr	r0, [r3, #0]
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	7c1a      	ldrb	r2, [r3, #16]
 810497a:	f88d 2000 	strb.w	r2, [sp]
 810497e:	3304      	adds	r3, #4
 8104980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104982:	f005 f9c3 	bl	8109d0c <USB_DevInit>
 8104986:	4603      	mov	r3, r0
 8104988:	2b00      	cmp	r3, #0
 810498a:	d005      	beq.n	8104998 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 810498c:	687b      	ldr	r3, [r7, #4]
 810498e:	2202      	movs	r2, #2
 8104990:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8104994:	2301      	movs	r3, #1
 8104996:	e013      	b.n	81049c0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8104998:	687b      	ldr	r3, [r7, #4]
 810499a:	2200      	movs	r2, #0
 810499c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	2201      	movs	r2, #1
 81049a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	7b1b      	ldrb	r3, [r3, #12]
 81049aa:	2b01      	cmp	r3, #1
 81049ac:	d102      	bne.n	81049b4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 81049ae:	6878      	ldr	r0, [r7, #4]
 81049b0:	f000 f80a 	bl	81049c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	4618      	mov	r0, r3
 81049ba:	f005 fb7e 	bl	810a0ba <USB_DevDisconnect>

  return HAL_OK;
 81049be:	2300      	movs	r3, #0
}
 81049c0:	4618      	mov	r0, r3
 81049c2:	3710      	adds	r7, #16
 81049c4:	46bd      	mov	sp, r7
 81049c6:	bd80      	pop	{r7, pc}

081049c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 81049c8:	b480      	push	{r7}
 81049ca:	b085      	sub	sp, #20
 81049cc:	af00      	add	r7, sp, #0
 81049ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	681b      	ldr	r3, [r3, #0]
 81049d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	2201      	movs	r2, #1
 81049da:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	2200      	movs	r2, #0
 81049e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	699b      	ldr	r3, [r3, #24]
 81049ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81049ee:	68fb      	ldr	r3, [r7, #12]
 81049f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 81049f2:	68fb      	ldr	r3, [r7, #12]
 81049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81049f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81049fa:	f043 0303 	orr.w	r3, r3, #3
 81049fe:	68fa      	ldr	r2, [r7, #12]
 8104a00:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8104a02:	2300      	movs	r3, #0
}
 8104a04:	4618      	mov	r0, r3
 8104a06:	3714      	adds	r7, #20
 8104a08:	46bd      	mov	sp, r7
 8104a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a0e:	4770      	bx	lr

08104a10 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104a10:	b580      	push	{r7, lr}
 8104a12:	b084      	sub	sp, #16
 8104a14:	af00      	add	r7, sp, #0
 8104a16:	60f8      	str	r0, [r7, #12]
 8104a18:	460b      	mov	r3, r1
 8104a1a:	607a      	str	r2, [r7, #4]
 8104a1c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104a1e:	4b37      	ldr	r3, [pc, #220]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104a20:	681b      	ldr	r3, [r3, #0]
 8104a22:	f023 0201 	bic.w	r2, r3, #1
 8104a26:	4935      	ldr	r1, [pc, #212]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	4313      	orrs	r3, r2
 8104a2c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	2b00      	cmp	r3, #0
 8104a32:	d123      	bne.n	8104a7c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104a34:	f7fd fbcc 	bl	81021d0 <HAL_GetCurrentCPUID>
 8104a38:	4603      	mov	r3, r0
 8104a3a:	2b03      	cmp	r3, #3
 8104a3c:	d158      	bne.n	8104af0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104a40:	691b      	ldr	r3, [r3, #16]
 8104a42:	4a2e      	ldr	r2, [pc, #184]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104a44:	f023 0301 	bic.w	r3, r3, #1
 8104a48:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8104b00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104a4c:	691b      	ldr	r3, [r3, #16]
 8104a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8104b00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104a50:	f043 0304 	orr.w	r3, r3, #4
 8104a54:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8104a56:	f3bf 8f4f 	dsb	sy
}
 8104a5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104a5c:	f3bf 8f6f 	isb	sy
}
 8104a60:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104a62:	7afb      	ldrb	r3, [r7, #11]
 8104a64:	2b01      	cmp	r3, #1
 8104a66:	d101      	bne.n	8104a6c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104a68:	bf30      	wfi
 8104a6a:	e000      	b.n	8104a6e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104a6c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104a6e:	4b24      	ldr	r3, [pc, #144]	@ (8104b00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104a70:	691b      	ldr	r3, [r3, #16]
 8104a72:	4a23      	ldr	r2, [pc, #140]	@ (8104b00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104a74:	f023 0304 	bic.w	r3, r3, #4
 8104a78:	6113      	str	r3, [r2, #16]
 8104a7a:	e03c      	b.n	8104af6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	2b01      	cmp	r3, #1
 8104a80:	d123      	bne.n	8104aca <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104a82:	f7fd fba5 	bl	81021d0 <HAL_GetCurrentCPUID>
 8104a86:	4603      	mov	r3, r0
 8104a88:	2b01      	cmp	r3, #1
 8104a8a:	d133      	bne.n	8104af4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104a8e:	695b      	ldr	r3, [r3, #20]
 8104a90:	4a1a      	ldr	r2, [pc, #104]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104a92:	f023 0302 	bic.w	r3, r3, #2
 8104a96:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104a98:	4b19      	ldr	r3, [pc, #100]	@ (8104b00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104a9a:	691b      	ldr	r3, [r3, #16]
 8104a9c:	4a18      	ldr	r2, [pc, #96]	@ (8104b00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104a9e:	f043 0304 	orr.w	r3, r3, #4
 8104aa2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104aa4:	f3bf 8f4f 	dsb	sy
}
 8104aa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104aaa:	f3bf 8f6f 	isb	sy
}
 8104aae:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104ab0:	7afb      	ldrb	r3, [r7, #11]
 8104ab2:	2b01      	cmp	r3, #1
 8104ab4:	d101      	bne.n	8104aba <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104ab6:	bf30      	wfi
 8104ab8:	e000      	b.n	8104abc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104aba:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104abc:	4b10      	ldr	r3, [pc, #64]	@ (8104b00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104abe:	691b      	ldr	r3, [r3, #16]
 8104ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8104b00 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104ac2:	f023 0304 	bic.w	r3, r3, #4
 8104ac6:	6113      	str	r3, [r2, #16]
 8104ac8:	e015      	b.n	8104af6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104aca:	f7fd fb81 	bl	81021d0 <HAL_GetCurrentCPUID>
 8104ace:	4603      	mov	r3, r0
 8104ad0:	2b03      	cmp	r3, #3
 8104ad2:	d106      	bne.n	8104ae2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104ad4:	4b09      	ldr	r3, [pc, #36]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104ad6:	691b      	ldr	r3, [r3, #16]
 8104ad8:	4a08      	ldr	r2, [pc, #32]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104ada:	f023 0304 	bic.w	r3, r3, #4
 8104ade:	6113      	str	r3, [r2, #16]
 8104ae0:	e009      	b.n	8104af6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104ae2:	4b06      	ldr	r3, [pc, #24]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104ae4:	695b      	ldr	r3, [r3, #20]
 8104ae6:	4a05      	ldr	r2, [pc, #20]	@ (8104afc <HAL_PWREx_EnterSTOPMode+0xec>)
 8104ae8:	f023 0304 	bic.w	r3, r3, #4
 8104aec:	6153      	str	r3, [r2, #20]
 8104aee:	e002      	b.n	8104af6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104af0:	bf00      	nop
 8104af2:	e000      	b.n	8104af6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104af4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104af6:	3710      	adds	r7, #16
 8104af8:	46bd      	mov	sp, r7
 8104afa:	bd80      	pop	{r7, pc}
 8104afc:	58024800 	.word	0x58024800
 8104b00:	e000ed00 	.word	0xe000ed00

08104b04 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104b04:	b580      	push	{r7, lr}
 8104b06:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104b08:	f7fd fb62 	bl	81021d0 <HAL_GetCurrentCPUID>
 8104b0c:	4603      	mov	r3, r0
 8104b0e:	2b03      	cmp	r3, #3
 8104b10:	d101      	bne.n	8104b16 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104b12:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104b14:	e001      	b.n	8104b1a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104b16:	bf40      	sev
    __WFE ();
 8104b18:	bf20      	wfe
}
 8104b1a:	bf00      	nop
 8104b1c:	bd80      	pop	{r7, pc}
	...

08104b20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8104b20:	b480      	push	{r7}
 8104b22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8104b24:	4b05      	ldr	r3, [pc, #20]	@ (8104b3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8104b26:	68db      	ldr	r3, [r3, #12]
 8104b28:	4a04      	ldr	r2, [pc, #16]	@ (8104b3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8104b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104b2e:	60d3      	str	r3, [r2, #12]
}
 8104b30:	bf00      	nop
 8104b32:	46bd      	mov	sp, r7
 8104b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b38:	4770      	bx	lr
 8104b3a:	bf00      	nop
 8104b3c:	58024800 	.word	0x58024800

08104b40 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8104b40:	b580      	push	{r7, lr}
 8104b42:	b086      	sub	sp, #24
 8104b44:	af02      	add	r7, sp, #8
 8104b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8104b48:	f7fd fa0e 	bl	8101f68 <HAL_GetTick>
 8104b4c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	2b00      	cmp	r3, #0
 8104b52:	d101      	bne.n	8104b58 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8104b54:	2301      	movs	r3, #1
 8104b56:	e061      	b.n	8104c1c <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104b5e:	b2db      	uxtb	r3, r3
 8104b60:	2b00      	cmp	r3, #0
 8104b62:	d107      	bne.n	8104b74 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8104b64:	6878      	ldr	r0, [r7, #4]
 8104b66:	f7fc fd29 	bl	81015bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8104b6a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8104b6e:	6878      	ldr	r0, [r7, #4]
 8104b70:	f000 f85a 	bl	8104c28 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	689b      	ldr	r3, [r3, #8]
 8104b82:	3b01      	subs	r3, #1
 8104b84:	021a      	lsls	r2, r3, #8
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	681b      	ldr	r3, [r3, #0]
 8104b8a:	430a      	orrs	r2, r1
 8104b8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8104b8e:	687b      	ldr	r3, [r7, #4]
 8104b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104b92:	9300      	str	r3, [sp, #0]
 8104b94:	68fb      	ldr	r3, [r7, #12]
 8104b96:	2200      	movs	r2, #0
 8104b98:	2120      	movs	r1, #32
 8104b9a:	6878      	ldr	r0, [r7, #4]
 8104b9c:	f000 f852 	bl	8104c44 <QSPI_WaitFlagStateUntilTimeout>
 8104ba0:	4603      	mov	r3, r0
 8104ba2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8104ba4:	7afb      	ldrb	r3, [r7, #11]
 8104ba6:	2b00      	cmp	r3, #0
 8104ba8:	d137      	bne.n	8104c1a <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	681b      	ldr	r3, [r3, #0]
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8104bb4:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8104bb8:	687a      	ldr	r2, [r7, #4]
 8104bba:	6852      	ldr	r2, [r2, #4]
 8104bbc:	0611      	lsls	r1, r2, #24
 8104bbe:	687a      	ldr	r2, [r7, #4]
 8104bc0:	68d2      	ldr	r2, [r2, #12]
 8104bc2:	4311      	orrs	r1, r2
 8104bc4:	687a      	ldr	r2, [r7, #4]
 8104bc6:	69d2      	ldr	r2, [r2, #28]
 8104bc8:	4311      	orrs	r1, r2
 8104bca:	687a      	ldr	r2, [r7, #4]
 8104bcc:	6a12      	ldr	r2, [r2, #32]
 8104bce:	4311      	orrs	r1, r2
 8104bd0:	687a      	ldr	r2, [r7, #4]
 8104bd2:	6812      	ldr	r2, [r2, #0]
 8104bd4:	430b      	orrs	r3, r1
 8104bd6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8104bd8:	687b      	ldr	r3, [r7, #4]
 8104bda:	681b      	ldr	r3, [r3, #0]
 8104bdc:	685a      	ldr	r2, [r3, #4]
 8104bde:	4b11      	ldr	r3, [pc, #68]	@ (8104c24 <HAL_QSPI_Init+0xe4>)
 8104be0:	4013      	ands	r3, r2
 8104be2:	687a      	ldr	r2, [r7, #4]
 8104be4:	6912      	ldr	r2, [r2, #16]
 8104be6:	0411      	lsls	r1, r2, #16
 8104be8:	687a      	ldr	r2, [r7, #4]
 8104bea:	6952      	ldr	r2, [r2, #20]
 8104bec:	4311      	orrs	r1, r2
 8104bee:	687a      	ldr	r2, [r7, #4]
 8104bf0:	6992      	ldr	r2, [r2, #24]
 8104bf2:	4311      	orrs	r1, r2
 8104bf4:	687a      	ldr	r2, [r7, #4]
 8104bf6:	6812      	ldr	r2, [r2, #0]
 8104bf8:	430b      	orrs	r3, r1
 8104bfa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	681a      	ldr	r2, [r3, #0]
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	f042 0201 	orr.w	r2, r2, #1
 8104c0a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	2200      	movs	r2, #0
 8104c10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	2201      	movs	r2, #1
 8104c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8104c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8104c1c:	4618      	mov	r0, r3
 8104c1e:	3710      	adds	r7, #16
 8104c20:	46bd      	mov	sp, r7
 8104c22:	bd80      	pop	{r7, pc}
 8104c24:	ffe0f8fe 	.word	0xffe0f8fe

08104c28 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8104c28:	b480      	push	{r7}
 8104c2a:	b083      	sub	sp, #12
 8104c2c:	af00      	add	r7, sp, #0
 8104c2e:	6078      	str	r0, [r7, #4]
 8104c30:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	683a      	ldr	r2, [r7, #0]
 8104c36:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8104c38:	bf00      	nop
 8104c3a:	370c      	adds	r7, #12
 8104c3c:	46bd      	mov	sp, r7
 8104c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c42:	4770      	bx	lr

08104c44 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8104c44:	b580      	push	{r7, lr}
 8104c46:	b084      	sub	sp, #16
 8104c48:	af00      	add	r7, sp, #0
 8104c4a:	60f8      	str	r0, [r7, #12]
 8104c4c:	60b9      	str	r1, [r7, #8]
 8104c4e:	603b      	str	r3, [r7, #0]
 8104c50:	4613      	mov	r3, r2
 8104c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8104c54:	e01a      	b.n	8104c8c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104c56:	69bb      	ldr	r3, [r7, #24]
 8104c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104c5c:	d016      	beq.n	8104c8c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104c5e:	f7fd f983 	bl	8101f68 <HAL_GetTick>
 8104c62:	4602      	mov	r2, r0
 8104c64:	683b      	ldr	r3, [r7, #0]
 8104c66:	1ad3      	subs	r3, r2, r3
 8104c68:	69ba      	ldr	r2, [r7, #24]
 8104c6a:	429a      	cmp	r2, r3
 8104c6c:	d302      	bcc.n	8104c74 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8104c6e:	69bb      	ldr	r3, [r7, #24]
 8104c70:	2b00      	cmp	r3, #0
 8104c72:	d10b      	bne.n	8104c8c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8104c74:	68fb      	ldr	r3, [r7, #12]
 8104c76:	2204      	movs	r2, #4
 8104c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8104c7c:	68fb      	ldr	r3, [r7, #12]
 8104c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104c80:	f043 0201 	orr.w	r2, r3, #1
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8104c88:	2301      	movs	r3, #1
 8104c8a:	e00e      	b.n	8104caa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8104c8c:	68fb      	ldr	r3, [r7, #12]
 8104c8e:	681b      	ldr	r3, [r3, #0]
 8104c90:	689a      	ldr	r2, [r3, #8]
 8104c92:	68bb      	ldr	r3, [r7, #8]
 8104c94:	4013      	ands	r3, r2
 8104c96:	2b00      	cmp	r3, #0
 8104c98:	bf14      	ite	ne
 8104c9a:	2301      	movne	r3, #1
 8104c9c:	2300      	moveq	r3, #0
 8104c9e:	b2db      	uxtb	r3, r3
 8104ca0:	461a      	mov	r2, r3
 8104ca2:	79fb      	ldrb	r3, [r7, #7]
 8104ca4:	429a      	cmp	r2, r3
 8104ca6:	d1d6      	bne.n	8104c56 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8104ca8:	2300      	movs	r3, #0
}
 8104caa:	4618      	mov	r0, r3
 8104cac:	3710      	adds	r7, #16
 8104cae:	46bd      	mov	sp, r7
 8104cb0:	bd80      	pop	{r7, pc}
	...

08104cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104cb4:	b480      	push	{r7}
 8104cb6:	b089      	sub	sp, #36	@ 0x24
 8104cb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104cba:	4bb3      	ldr	r3, [pc, #716]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104cbc:	691b      	ldr	r3, [r3, #16]
 8104cbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8104cc2:	2b18      	cmp	r3, #24
 8104cc4:	f200 8155 	bhi.w	8104f72 <HAL_RCC_GetSysClockFreq+0x2be>
 8104cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8104cd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104cce:	bf00      	nop
 8104cd0:	08104d35 	.word	0x08104d35
 8104cd4:	08104f73 	.word	0x08104f73
 8104cd8:	08104f73 	.word	0x08104f73
 8104cdc:	08104f73 	.word	0x08104f73
 8104ce0:	08104f73 	.word	0x08104f73
 8104ce4:	08104f73 	.word	0x08104f73
 8104ce8:	08104f73 	.word	0x08104f73
 8104cec:	08104f73 	.word	0x08104f73
 8104cf0:	08104d5b 	.word	0x08104d5b
 8104cf4:	08104f73 	.word	0x08104f73
 8104cf8:	08104f73 	.word	0x08104f73
 8104cfc:	08104f73 	.word	0x08104f73
 8104d00:	08104f73 	.word	0x08104f73
 8104d04:	08104f73 	.word	0x08104f73
 8104d08:	08104f73 	.word	0x08104f73
 8104d0c:	08104f73 	.word	0x08104f73
 8104d10:	08104d61 	.word	0x08104d61
 8104d14:	08104f73 	.word	0x08104f73
 8104d18:	08104f73 	.word	0x08104f73
 8104d1c:	08104f73 	.word	0x08104f73
 8104d20:	08104f73 	.word	0x08104f73
 8104d24:	08104f73 	.word	0x08104f73
 8104d28:	08104f73 	.word	0x08104f73
 8104d2c:	08104f73 	.word	0x08104f73
 8104d30:	08104d67 	.word	0x08104d67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104d34:	4b94      	ldr	r3, [pc, #592]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	f003 0320 	and.w	r3, r3, #32
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d009      	beq.n	8104d54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104d40:	4b91      	ldr	r3, [pc, #580]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	08db      	lsrs	r3, r3, #3
 8104d46:	f003 0303 	and.w	r3, r3, #3
 8104d4a:	4a90      	ldr	r2, [pc, #576]	@ (8104f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8104d50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8104d52:	e111      	b.n	8104f78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104d54:	4b8d      	ldr	r3, [pc, #564]	@ (8104f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104d56:	61bb      	str	r3, [r7, #24]
      break;
 8104d58:	e10e      	b.n	8104f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8104d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8104f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104d5c:	61bb      	str	r3, [r7, #24]
      break;
 8104d5e:	e10b      	b.n	8104f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8104d60:	4b8c      	ldr	r3, [pc, #560]	@ (8104f94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104d62:	61bb      	str	r3, [r7, #24]
      break;
 8104d64:	e108      	b.n	8104f78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104d66:	4b88      	ldr	r3, [pc, #544]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104d6a:	f003 0303 	and.w	r3, r3, #3
 8104d6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104d70:	4b85      	ldr	r3, [pc, #532]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104d74:	091b      	lsrs	r3, r3, #4
 8104d76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104d7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104d7c:	4b82      	ldr	r3, [pc, #520]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d80:	f003 0301 	and.w	r3, r3, #1
 8104d84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104d86:	4b80      	ldr	r3, [pc, #512]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104d8a:	08db      	lsrs	r3, r3, #3
 8104d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104d90:	68fa      	ldr	r2, [r7, #12]
 8104d92:	fb02 f303 	mul.w	r3, r2, r3
 8104d96:	ee07 3a90 	vmov	s15, r3
 8104d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8104da2:	693b      	ldr	r3, [r7, #16]
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	f000 80e1 	beq.w	8104f6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8104daa:	697b      	ldr	r3, [r7, #20]
 8104dac:	2b02      	cmp	r3, #2
 8104dae:	f000 8083 	beq.w	8104eb8 <HAL_RCC_GetSysClockFreq+0x204>
 8104db2:	697b      	ldr	r3, [r7, #20]
 8104db4:	2b02      	cmp	r3, #2
 8104db6:	f200 80a1 	bhi.w	8104efc <HAL_RCC_GetSysClockFreq+0x248>
 8104dba:	697b      	ldr	r3, [r7, #20]
 8104dbc:	2b00      	cmp	r3, #0
 8104dbe:	d003      	beq.n	8104dc8 <HAL_RCC_GetSysClockFreq+0x114>
 8104dc0:	697b      	ldr	r3, [r7, #20]
 8104dc2:	2b01      	cmp	r3, #1
 8104dc4:	d056      	beq.n	8104e74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104dc6:	e099      	b.n	8104efc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104dca:	681b      	ldr	r3, [r3, #0]
 8104dcc:	f003 0320 	and.w	r3, r3, #32
 8104dd0:	2b00      	cmp	r3, #0
 8104dd2:	d02d      	beq.n	8104e30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	08db      	lsrs	r3, r3, #3
 8104dda:	f003 0303 	and.w	r3, r3, #3
 8104dde:	4a6b      	ldr	r2, [pc, #428]	@ (8104f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104de0:	fa22 f303 	lsr.w	r3, r2, r3
 8104de4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104de6:	687b      	ldr	r3, [r7, #4]
 8104de8:	ee07 3a90 	vmov	s15, r3
 8104dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104df0:	693b      	ldr	r3, [r7, #16]
 8104df2:	ee07 3a90 	vmov	s15, r3
 8104df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104dfe:	4b62      	ldr	r3, [pc, #392]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e06:	ee07 3a90 	vmov	s15, r3
 8104e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104e12:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8104f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8104e2e:	e087      	b.n	8104f40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104e30:	693b      	ldr	r3, [r7, #16]
 8104e32:	ee07 3a90 	vmov	s15, r3
 8104e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8104f9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8104e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e42:	4b51      	ldr	r3, [pc, #324]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e4a:	ee07 3a90 	vmov	s15, r3
 8104e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8104e56:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8104f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104e72:	e065      	b.n	8104f40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104e74:	693b      	ldr	r3, [r7, #16]
 8104e76:	ee07 3a90 	vmov	s15, r3
 8104e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e7e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8104fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e86:	4b40      	ldr	r3, [pc, #256]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e8e:	ee07 3a90 	vmov	s15, r3
 8104e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8104e9a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8104f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104eb6:	e043      	b.n	8104f40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104eb8:	693b      	ldr	r3, [r7, #16]
 8104eba:	ee07 3a90 	vmov	s15, r3
 8104ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ec2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8104fa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104eca:	4b2f      	ldr	r3, [pc, #188]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ed2:	ee07 3a90 	vmov	s15, r3
 8104ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ede:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8104f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104efa:	e021      	b.n	8104f40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104efc:	693b      	ldr	r3, [r7, #16]
 8104efe:	ee07 3a90 	vmov	s15, r3
 8104f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8104fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f16:	ee07 3a90 	vmov	s15, r3
 8104f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104f22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8104f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104f3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104f40:	4b11      	ldr	r3, [pc, #68]	@ (8104f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104f44:	0a5b      	lsrs	r3, r3, #9
 8104f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104f4a:	3301      	adds	r3, #1
 8104f4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104f4e:	683b      	ldr	r3, [r7, #0]
 8104f50:	ee07 3a90 	vmov	s15, r3
 8104f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f64:	ee17 3a90 	vmov	r3, s15
 8104f68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104f6a:	e005      	b.n	8104f78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104f6c:	2300      	movs	r3, #0
 8104f6e:	61bb      	str	r3, [r7, #24]
      break;
 8104f70:	e002      	b.n	8104f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8104f72:	4b07      	ldr	r3, [pc, #28]	@ (8104f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104f74:	61bb      	str	r3, [r7, #24]
      break;
 8104f76:	bf00      	nop
  }

  return sysclockfreq;
 8104f78:	69bb      	ldr	r3, [r7, #24]
}
 8104f7a:	4618      	mov	r0, r3
 8104f7c:	3724      	adds	r7, #36	@ 0x24
 8104f7e:	46bd      	mov	sp, r7
 8104f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f84:	4770      	bx	lr
 8104f86:	bf00      	nop
 8104f88:	58024400 	.word	0x58024400
 8104f8c:	03d09000 	.word	0x03d09000
 8104f90:	003d0900 	.word	0x003d0900
 8104f94:	017d7840 	.word	0x017d7840
 8104f98:	46000000 	.word	0x46000000
 8104f9c:	4c742400 	.word	0x4c742400
 8104fa0:	4a742400 	.word	0x4a742400
 8104fa4:	4bbebc20 	.word	0x4bbebc20

08104fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104fa8:	b580      	push	{r7, lr}
 8104faa:	b082      	sub	sp, #8
 8104fac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104fae:	f7ff fe81 	bl	8104cb4 <HAL_RCC_GetSysClockFreq>
 8104fb2:	4602      	mov	r2, r0
 8104fb4:	4b11      	ldr	r3, [pc, #68]	@ (8104ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8104fb6:	699b      	ldr	r3, [r3, #24]
 8104fb8:	0a1b      	lsrs	r3, r3, #8
 8104fba:	f003 030f 	and.w	r3, r3, #15
 8104fbe:	4910      	ldr	r1, [pc, #64]	@ (8105000 <HAL_RCC_GetHCLKFreq+0x58>)
 8104fc0:	5ccb      	ldrb	r3, [r1, r3]
 8104fc2:	f003 031f 	and.w	r3, r3, #31
 8104fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8104fca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8104ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8104fce:	699b      	ldr	r3, [r3, #24]
 8104fd0:	f003 030f 	and.w	r3, r3, #15
 8104fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8105000 <HAL_RCC_GetHCLKFreq+0x58>)
 8104fd6:	5cd3      	ldrb	r3, [r2, r3]
 8104fd8:	f003 031f 	and.w	r3, r3, #31
 8104fdc:	687a      	ldr	r2, [r7, #4]
 8104fde:	fa22 f303 	lsr.w	r3, r2, r3
 8104fe2:	4a08      	ldr	r2, [pc, #32]	@ (8105004 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104fe4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104fe6:	4b07      	ldr	r3, [pc, #28]	@ (8105004 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104fe8:	681b      	ldr	r3, [r3, #0]
 8104fea:	4a07      	ldr	r2, [pc, #28]	@ (8105008 <HAL_RCC_GetHCLKFreq+0x60>)
 8104fec:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104fee:	4b05      	ldr	r3, [pc, #20]	@ (8105004 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104ff0:	681b      	ldr	r3, [r3, #0]
}
 8104ff2:	4618      	mov	r0, r3
 8104ff4:	3708      	adds	r7, #8
 8104ff6:	46bd      	mov	sp, r7
 8104ff8:	bd80      	pop	{r7, pc}
 8104ffa:	bf00      	nop
 8104ffc:	58024400 	.word	0x58024400
 8105000:	0810a254 	.word	0x0810a254
 8105004:	10000004 	.word	0x10000004
 8105008:	10000000 	.word	0x10000000

0810500c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810500c:	b580      	push	{r7, lr}
 810500e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105010:	f7ff ffca 	bl	8104fa8 <HAL_RCC_GetHCLKFreq>
 8105014:	4602      	mov	r2, r0
 8105016:	4b06      	ldr	r3, [pc, #24]	@ (8105030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105018:	69db      	ldr	r3, [r3, #28]
 810501a:	091b      	lsrs	r3, r3, #4
 810501c:	f003 0307 	and.w	r3, r3, #7
 8105020:	4904      	ldr	r1, [pc, #16]	@ (8105034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105022:	5ccb      	ldrb	r3, [r1, r3]
 8105024:	f003 031f 	and.w	r3, r3, #31
 8105028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810502c:	4618      	mov	r0, r3
 810502e:	bd80      	pop	{r7, pc}
 8105030:	58024400 	.word	0x58024400
 8105034:	0810a254 	.word	0x0810a254

08105038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105038:	b580      	push	{r7, lr}
 810503a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810503c:	f7ff ffb4 	bl	8104fa8 <HAL_RCC_GetHCLKFreq>
 8105040:	4602      	mov	r2, r0
 8105042:	4b06      	ldr	r3, [pc, #24]	@ (810505c <HAL_RCC_GetPCLK2Freq+0x24>)
 8105044:	69db      	ldr	r3, [r3, #28]
 8105046:	0a1b      	lsrs	r3, r3, #8
 8105048:	f003 0307 	and.w	r3, r3, #7
 810504c:	4904      	ldr	r1, [pc, #16]	@ (8105060 <HAL_RCC_GetPCLK2Freq+0x28>)
 810504e:	5ccb      	ldrb	r3, [r1, r3]
 8105050:	f003 031f 	and.w	r3, r3, #31
 8105054:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105058:	4618      	mov	r0, r3
 810505a:	bd80      	pop	{r7, pc}
 810505c:	58024400 	.word	0x58024400
 8105060:	0810a254 	.word	0x0810a254

08105064 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105068:	b0ca      	sub	sp, #296	@ 0x128
 810506a:	af00      	add	r7, sp, #0
 810506c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105070:	2300      	movs	r3, #0
 8105072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105076:	2300      	movs	r3, #0
 8105078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810507c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105084:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8105088:	2500      	movs	r5, #0
 810508a:	ea54 0305 	orrs.w	r3, r4, r5
 810508e:	d049      	beq.n	8105124 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105096:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810509a:	d02f      	beq.n	81050fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 810509c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81050a0:	d828      	bhi.n	81050f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81050a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81050a6:	d01a      	beq.n	81050de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81050a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81050ac:	d822      	bhi.n	81050f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81050ae:	2b00      	cmp	r3, #0
 81050b0:	d003      	beq.n	81050ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 81050b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81050b6:	d007      	beq.n	81050c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81050b8:	e01c      	b.n	81050f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81050ba:	4bb8      	ldr	r3, [pc, #736]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81050be:	4ab7      	ldr	r2, [pc, #732]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81050c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81050c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81050c6:	e01a      	b.n	81050fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81050c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050cc:	3308      	adds	r3, #8
 81050ce:	2102      	movs	r1, #2
 81050d0:	4618      	mov	r0, r3
 81050d2:	f002 fb61 	bl	8107798 <RCCEx_PLL2_Config>
 81050d6:	4603      	mov	r3, r0
 81050d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81050dc:	e00f      	b.n	81050fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81050de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050e2:	3328      	adds	r3, #40	@ 0x28
 81050e4:	2102      	movs	r1, #2
 81050e6:	4618      	mov	r0, r3
 81050e8:	f002 fc08 	bl	81078fc <RCCEx_PLL3_Config>
 81050ec:	4603      	mov	r3, r0
 81050ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81050f2:	e004      	b.n	81050fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81050f4:	2301      	movs	r3, #1
 81050f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81050fa:	e000      	b.n	81050fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81050fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81050fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105102:	2b00      	cmp	r3, #0
 8105104:	d10a      	bne.n	810511c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105106:	4ba5      	ldr	r3, [pc, #660]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810510a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105112:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105114:	4aa1      	ldr	r2, [pc, #644]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105116:	430b      	orrs	r3, r1
 8105118:	6513      	str	r3, [r2, #80]	@ 0x50
 810511a:	e003      	b.n	8105124 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810511c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105128:	e9d3 2300 	ldrd	r2, r3, [r3]
 810512c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8105130:	f04f 0900 	mov.w	r9, #0
 8105134:	ea58 0309 	orrs.w	r3, r8, r9
 8105138:	d047      	beq.n	81051ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810513e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105140:	2b04      	cmp	r3, #4
 8105142:	d82a      	bhi.n	810519a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105144:	a201      	add	r2, pc, #4	@ (adr r2, 810514c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810514a:	bf00      	nop
 810514c:	08105161 	.word	0x08105161
 8105150:	0810516f 	.word	0x0810516f
 8105154:	08105185 	.word	0x08105185
 8105158:	081051a3 	.word	0x081051a3
 810515c:	081051a3 	.word	0x081051a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105160:	4b8e      	ldr	r3, [pc, #568]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105164:	4a8d      	ldr	r2, [pc, #564]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810516a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810516c:	e01a      	b.n	81051a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105172:	3308      	adds	r3, #8
 8105174:	2100      	movs	r1, #0
 8105176:	4618      	mov	r0, r3
 8105178:	f002 fb0e 	bl	8107798 <RCCEx_PLL2_Config>
 810517c:	4603      	mov	r3, r0
 810517e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105182:	e00f      	b.n	81051a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105188:	3328      	adds	r3, #40	@ 0x28
 810518a:	2100      	movs	r1, #0
 810518c:	4618      	mov	r0, r3
 810518e:	f002 fbb5 	bl	81078fc <RCCEx_PLL3_Config>
 8105192:	4603      	mov	r3, r0
 8105194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105198:	e004      	b.n	81051a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810519a:	2301      	movs	r3, #1
 810519c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81051a0:	e000      	b.n	81051a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81051a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81051a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81051a8:	2b00      	cmp	r3, #0
 81051aa:	d10a      	bne.n	81051c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81051ac:	4b7b      	ldr	r3, [pc, #492]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81051ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81051b0:	f023 0107 	bic.w	r1, r3, #7
 81051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81051ba:	4a78      	ldr	r2, [pc, #480]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81051bc:	430b      	orrs	r3, r1
 81051be:	6513      	str	r3, [r2, #80]	@ 0x50
 81051c0:	e003      	b.n	81051ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81051c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051d2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81051d6:	f04f 0b00 	mov.w	fp, #0
 81051da:	ea5a 030b 	orrs.w	r3, sl, fp
 81051de:	d04c      	beq.n	810527a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81051e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81051ea:	d030      	beq.n	810524e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81051ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81051f0:	d829      	bhi.n	8105246 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81051f2:	2bc0      	cmp	r3, #192	@ 0xc0
 81051f4:	d02d      	beq.n	8105252 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81051f6:	2bc0      	cmp	r3, #192	@ 0xc0
 81051f8:	d825      	bhi.n	8105246 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81051fa:	2b80      	cmp	r3, #128	@ 0x80
 81051fc:	d018      	beq.n	8105230 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81051fe:	2b80      	cmp	r3, #128	@ 0x80
 8105200:	d821      	bhi.n	8105246 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105202:	2b00      	cmp	r3, #0
 8105204:	d002      	beq.n	810520c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105206:	2b40      	cmp	r3, #64	@ 0x40
 8105208:	d007      	beq.n	810521a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810520a:	e01c      	b.n	8105246 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810520c:	4b63      	ldr	r3, [pc, #396]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105210:	4a62      	ldr	r2, [pc, #392]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105216:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105218:	e01c      	b.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810521a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810521e:	3308      	adds	r3, #8
 8105220:	2100      	movs	r1, #0
 8105222:	4618      	mov	r0, r3
 8105224:	f002 fab8 	bl	8107798 <RCCEx_PLL2_Config>
 8105228:	4603      	mov	r3, r0
 810522a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810522e:	e011      	b.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105234:	3328      	adds	r3, #40	@ 0x28
 8105236:	2100      	movs	r1, #0
 8105238:	4618      	mov	r0, r3
 810523a:	f002 fb5f 	bl	81078fc <RCCEx_PLL3_Config>
 810523e:	4603      	mov	r3, r0
 8105240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105244:	e006      	b.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105246:	2301      	movs	r3, #1
 8105248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810524c:	e002      	b.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810524e:	bf00      	nop
 8105250:	e000      	b.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105258:	2b00      	cmp	r3, #0
 810525a:	d10a      	bne.n	8105272 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810525c:	4b4f      	ldr	r3, [pc, #316]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810525e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105260:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8105264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810526a:	4a4c      	ldr	r2, [pc, #304]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810526c:	430b      	orrs	r3, r1
 810526e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105270:	e003      	b.n	810527a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105282:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8105286:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810528a:	2300      	movs	r3, #0
 810528c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8105290:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8105294:	460b      	mov	r3, r1
 8105296:	4313      	orrs	r3, r2
 8105298:	d053      	beq.n	8105342 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810529e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81052a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81052a6:	d035      	beq.n	8105314 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81052a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81052ac:	d82e      	bhi.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81052ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81052b2:	d031      	beq.n	8105318 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81052b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81052b8:	d828      	bhi.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81052ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81052be:	d01a      	beq.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81052c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81052c4:	d822      	bhi.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81052c6:	2b00      	cmp	r3, #0
 81052c8:	d003      	beq.n	81052d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81052ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81052ce:	d007      	beq.n	81052e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81052d0:	e01c      	b.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81052d2:	4b32      	ldr	r3, [pc, #200]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81052d6:	4a31      	ldr	r2, [pc, #196]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81052d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81052dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81052de:	e01c      	b.n	810531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052e4:	3308      	adds	r3, #8
 81052e6:	2100      	movs	r1, #0
 81052e8:	4618      	mov	r0, r3
 81052ea:	f002 fa55 	bl	8107798 <RCCEx_PLL2_Config>
 81052ee:	4603      	mov	r3, r0
 81052f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81052f4:	e011      	b.n	810531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052fa:	3328      	adds	r3, #40	@ 0x28
 81052fc:	2100      	movs	r1, #0
 81052fe:	4618      	mov	r0, r3
 8105300:	f002 fafc 	bl	81078fc <RCCEx_PLL3_Config>
 8105304:	4603      	mov	r3, r0
 8105306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810530a:	e006      	b.n	810531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810530c:	2301      	movs	r3, #1
 810530e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105312:	e002      	b.n	810531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105314:	bf00      	nop
 8105316:	e000      	b.n	810531a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105318:	bf00      	nop
    }

    if (ret == HAL_OK)
 810531a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810531e:	2b00      	cmp	r3, #0
 8105320:	d10b      	bne.n	810533a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105322:	4b1e      	ldr	r3, [pc, #120]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105326:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810532e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8105332:	4a1a      	ldr	r2, [pc, #104]	@ (810539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105334:	430b      	orrs	r3, r1
 8105336:	6593      	str	r3, [r2, #88]	@ 0x58
 8105338:	e003      	b.n	8105342 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810533a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810533e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105346:	e9d3 2300 	ldrd	r2, r3, [r3]
 810534a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810534e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8105352:	2300      	movs	r3, #0
 8105354:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8105358:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810535c:	460b      	mov	r3, r1
 810535e:	4313      	orrs	r3, r2
 8105360:	d056      	beq.n	8105410 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8105362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810536a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810536e:	d038      	beq.n	81053e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8105370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105374:	d831      	bhi.n	81053da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105376:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810537a:	d034      	beq.n	81053e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810537c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105380:	d82b      	bhi.n	81053da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105382:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105386:	d01d      	beq.n	81053c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105388:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810538c:	d825      	bhi.n	81053da <HAL_RCCEx_PeriphCLKConfig+0x376>
 810538e:	2b00      	cmp	r3, #0
 8105390:	d006      	beq.n	81053a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105392:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105396:	d00a      	beq.n	81053ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105398:	e01f      	b.n	81053da <HAL_RCCEx_PeriphCLKConfig+0x376>
 810539a:	bf00      	nop
 810539c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81053a0:	4ba2      	ldr	r3, [pc, #648]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81053a4:	4aa1      	ldr	r2, [pc, #644]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81053a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81053aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81053ac:	e01c      	b.n	81053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81053ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053b2:	3308      	adds	r3, #8
 81053b4:	2100      	movs	r1, #0
 81053b6:	4618      	mov	r0, r3
 81053b8:	f002 f9ee 	bl	8107798 <RCCEx_PLL2_Config>
 81053bc:	4603      	mov	r3, r0
 81053be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81053c2:	e011      	b.n	81053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81053c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053c8:	3328      	adds	r3, #40	@ 0x28
 81053ca:	2100      	movs	r1, #0
 81053cc:	4618      	mov	r0, r3
 81053ce:	f002 fa95 	bl	81078fc <RCCEx_PLL3_Config>
 81053d2:	4603      	mov	r3, r0
 81053d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81053d8:	e006      	b.n	81053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81053da:	2301      	movs	r3, #1
 81053dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81053e0:	e002      	b.n	81053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81053e2:	bf00      	nop
 81053e4:	e000      	b.n	81053e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81053e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81053e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81053ec:	2b00      	cmp	r3, #0
 81053ee:	d10b      	bne.n	8105408 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81053f0:	4b8e      	ldr	r3, [pc, #568]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81053f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81053f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105400:	4a8a      	ldr	r2, [pc, #552]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105402:	430b      	orrs	r3, r1
 8105404:	6593      	str	r3, [r2, #88]	@ 0x58
 8105406:	e003      	b.n	8105410 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810540c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105418:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810541c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8105420:	2300      	movs	r3, #0
 8105422:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8105426:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810542a:	460b      	mov	r3, r1
 810542c:	4313      	orrs	r3, r2
 810542e:	d03a      	beq.n	81054a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105436:	2b30      	cmp	r3, #48	@ 0x30
 8105438:	d01f      	beq.n	810547a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810543a:	2b30      	cmp	r3, #48	@ 0x30
 810543c:	d819      	bhi.n	8105472 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810543e:	2b20      	cmp	r3, #32
 8105440:	d00c      	beq.n	810545c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8105442:	2b20      	cmp	r3, #32
 8105444:	d815      	bhi.n	8105472 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105446:	2b00      	cmp	r3, #0
 8105448:	d019      	beq.n	810547e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810544a:	2b10      	cmp	r3, #16
 810544c:	d111      	bne.n	8105472 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810544e:	4b77      	ldr	r3, [pc, #476]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105452:	4a76      	ldr	r2, [pc, #472]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810545a:	e011      	b.n	8105480 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105460:	3308      	adds	r3, #8
 8105462:	2102      	movs	r1, #2
 8105464:	4618      	mov	r0, r3
 8105466:	f002 f997 	bl	8107798 <RCCEx_PLL2_Config>
 810546a:	4603      	mov	r3, r0
 810546c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105470:	e006      	b.n	8105480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105472:	2301      	movs	r3, #1
 8105474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105478:	e002      	b.n	8105480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810547a:	bf00      	nop
 810547c:	e000      	b.n	8105480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810547e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105484:	2b00      	cmp	r3, #0
 8105486:	d10a      	bne.n	810549e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105488:	4b68      	ldr	r3, [pc, #416]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810548a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810548c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8105490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105496:	4a65      	ldr	r2, [pc, #404]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105498:	430b      	orrs	r3, r1
 810549a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810549c:	e003      	b.n	81054a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810549e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81054a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81054b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81054b6:	2300      	movs	r3, #0
 81054b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81054bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81054c0:	460b      	mov	r3, r1
 81054c2:	4313      	orrs	r3, r2
 81054c4:	d051      	beq.n	810556a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81054cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81054d0:	d035      	beq.n	810553e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81054d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81054d6:	d82e      	bhi.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81054d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81054dc:	d031      	beq.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81054de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81054e2:	d828      	bhi.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81054e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81054e8:	d01a      	beq.n	8105520 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81054ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81054ee:	d822      	bhi.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81054f0:	2b00      	cmp	r3, #0
 81054f2:	d003      	beq.n	81054fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 81054f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81054f8:	d007      	beq.n	810550a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81054fa:	e01c      	b.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81054fc:	4b4b      	ldr	r3, [pc, #300]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105500:	4a4a      	ldr	r2, [pc, #296]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105508:	e01c      	b.n	8105544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810550e:	3308      	adds	r3, #8
 8105510:	2100      	movs	r1, #0
 8105512:	4618      	mov	r0, r3
 8105514:	f002 f940 	bl	8107798 <RCCEx_PLL2_Config>
 8105518:	4603      	mov	r3, r0
 810551a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810551e:	e011      	b.n	8105544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105524:	3328      	adds	r3, #40	@ 0x28
 8105526:	2100      	movs	r1, #0
 8105528:	4618      	mov	r0, r3
 810552a:	f002 f9e7 	bl	81078fc <RCCEx_PLL3_Config>
 810552e:	4603      	mov	r3, r0
 8105530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105534:	e006      	b.n	8105544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105536:	2301      	movs	r3, #1
 8105538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810553c:	e002      	b.n	8105544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810553e:	bf00      	nop
 8105540:	e000      	b.n	8105544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105548:	2b00      	cmp	r3, #0
 810554a:	d10a      	bne.n	8105562 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810554c:	4b37      	ldr	r3, [pc, #220]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810554e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105550:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8105554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810555a:	4a34      	ldr	r2, [pc, #208]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810555c:	430b      	orrs	r3, r1
 810555e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105560:	e003      	b.n	810556a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105572:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8105576:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810557a:	2300      	movs	r3, #0
 810557c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8105580:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8105584:	460b      	mov	r3, r1
 8105586:	4313      	orrs	r3, r2
 8105588:	d056      	beq.n	8105638 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810558e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105594:	d033      	beq.n	81055fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105596:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810559a:	d82c      	bhi.n	81055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810559c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81055a0:	d02f      	beq.n	8105602 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81055a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81055a6:	d826      	bhi.n	81055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81055a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81055ac:	d02b      	beq.n	8105606 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81055ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81055b2:	d820      	bhi.n	81055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81055b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81055b8:	d012      	beq.n	81055e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81055ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81055be:	d81a      	bhi.n	81055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81055c0:	2b00      	cmp	r3, #0
 81055c2:	d022      	beq.n	810560a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81055c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81055c8:	d115      	bne.n	81055f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055ce:	3308      	adds	r3, #8
 81055d0:	2101      	movs	r1, #1
 81055d2:	4618      	mov	r0, r3
 81055d4:	f002 f8e0 	bl	8107798 <RCCEx_PLL2_Config>
 81055d8:	4603      	mov	r3, r0
 81055da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81055de:	e015      	b.n	810560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81055e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055e4:	3328      	adds	r3, #40	@ 0x28
 81055e6:	2101      	movs	r1, #1
 81055e8:	4618      	mov	r0, r3
 81055ea:	f002 f987 	bl	81078fc <RCCEx_PLL3_Config>
 81055ee:	4603      	mov	r3, r0
 81055f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81055f4:	e00a      	b.n	810560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81055f6:	2301      	movs	r3, #1
 81055f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81055fc:	e006      	b.n	810560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81055fe:	bf00      	nop
 8105600:	e004      	b.n	810560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105602:	bf00      	nop
 8105604:	e002      	b.n	810560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105606:	bf00      	nop
 8105608:	e000      	b.n	810560c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810560a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810560c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105610:	2b00      	cmp	r3, #0
 8105612:	d10d      	bne.n	8105630 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105614:	4b05      	ldr	r3, [pc, #20]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105618:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105622:	4a02      	ldr	r2, [pc, #8]	@ (810562c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105624:	430b      	orrs	r3, r1
 8105626:	6513      	str	r3, [r2, #80]	@ 0x50
 8105628:	e006      	b.n	8105638 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810562a:	bf00      	nop
 810562c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105634:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105640:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8105644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8105648:	2300      	movs	r3, #0
 810564a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810564e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8105652:	460b      	mov	r3, r1
 8105654:	4313      	orrs	r3, r2
 8105656:	d055      	beq.n	8105704 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8105658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810565c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105664:	d033      	beq.n	81056ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8105666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810566a:	d82c      	bhi.n	81056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810566c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105670:	d02f      	beq.n	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8105672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105676:	d826      	bhi.n	81056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105678:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810567c:	d02b      	beq.n	81056d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810567e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105682:	d820      	bhi.n	81056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105688:	d012      	beq.n	81056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810568a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810568e:	d81a      	bhi.n	81056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105690:	2b00      	cmp	r3, #0
 8105692:	d022      	beq.n	81056da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8105694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105698:	d115      	bne.n	81056c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810569e:	3308      	adds	r3, #8
 81056a0:	2101      	movs	r1, #1
 81056a2:	4618      	mov	r0, r3
 81056a4:	f002 f878 	bl	8107798 <RCCEx_PLL2_Config>
 81056a8:	4603      	mov	r3, r0
 81056aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81056ae:	e015      	b.n	81056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056b4:	3328      	adds	r3, #40	@ 0x28
 81056b6:	2101      	movs	r1, #1
 81056b8:	4618      	mov	r0, r3
 81056ba:	f002 f91f 	bl	81078fc <RCCEx_PLL3_Config>
 81056be:	4603      	mov	r3, r0
 81056c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81056c4:	e00a      	b.n	81056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81056c6:	2301      	movs	r3, #1
 81056c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81056cc:	e006      	b.n	81056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81056ce:	bf00      	nop
 81056d0:	e004      	b.n	81056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81056d2:	bf00      	nop
 81056d4:	e002      	b.n	81056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81056d6:	bf00      	nop
 81056d8:	e000      	b.n	81056dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81056da:	bf00      	nop
    }

    if (ret == HAL_OK)
 81056dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81056e0:	2b00      	cmp	r3, #0
 81056e2:	d10b      	bne.n	81056fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81056e4:	4ba4      	ldr	r3, [pc, #656]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81056e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81056e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81056f4:	4aa0      	ldr	r2, [pc, #640]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81056f6:	430b      	orrs	r3, r1
 81056f8:	6593      	str	r3, [r2, #88]	@ 0x58
 81056fa:	e003      	b.n	8105704 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105708:	e9d3 2300 	ldrd	r2, r3, [r3]
 810570c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8105710:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8105714:	2300      	movs	r3, #0
 8105716:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810571a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810571e:	460b      	mov	r3, r1
 8105720:	4313      	orrs	r3, r2
 8105722:	d037      	beq.n	8105794 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8105724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810572a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810572e:	d00e      	beq.n	810574e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8105730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105734:	d816      	bhi.n	8105764 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8105736:	2b00      	cmp	r3, #0
 8105738:	d018      	beq.n	810576c <HAL_RCCEx_PeriphCLKConfig+0x708>
 810573a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810573e:	d111      	bne.n	8105764 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105740:	4b8d      	ldr	r3, [pc, #564]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105744:	4a8c      	ldr	r2, [pc, #560]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810574a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810574c:	e00f      	b.n	810576e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105752:	3308      	adds	r3, #8
 8105754:	2101      	movs	r1, #1
 8105756:	4618      	mov	r0, r3
 8105758:	f002 f81e 	bl	8107798 <RCCEx_PLL2_Config>
 810575c:	4603      	mov	r3, r0
 810575e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105762:	e004      	b.n	810576e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105764:	2301      	movs	r3, #1
 8105766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810576a:	e000      	b.n	810576e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810576c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810576e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105772:	2b00      	cmp	r3, #0
 8105774:	d10a      	bne.n	810578c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105776:	4b80      	ldr	r3, [pc, #512]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810577a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105784:	4a7c      	ldr	r2, [pc, #496]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105786:	430b      	orrs	r3, r1
 8105788:	6513      	str	r3, [r2, #80]	@ 0x50
 810578a:	e003      	b.n	8105794 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810578c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105798:	e9d3 2300 	ldrd	r2, r3, [r3]
 810579c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81057a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81057a4:	2300      	movs	r3, #0
 81057a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81057aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81057ae:	460b      	mov	r3, r1
 81057b0:	4313      	orrs	r3, r2
 81057b2:	d039      	beq.n	8105828 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81057ba:	2b03      	cmp	r3, #3
 81057bc:	d81c      	bhi.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81057be:	a201      	add	r2, pc, #4	@ (adr r2, 81057c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057c4:	08105801 	.word	0x08105801
 81057c8:	081057d5 	.word	0x081057d5
 81057cc:	081057e3 	.word	0x081057e3
 81057d0:	08105801 	.word	0x08105801
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81057d4:	4b68      	ldr	r3, [pc, #416]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057d8:	4a67      	ldr	r2, [pc, #412]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81057da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81057de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81057e0:	e00f      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057e6:	3308      	adds	r3, #8
 81057e8:	2102      	movs	r1, #2
 81057ea:	4618      	mov	r0, r3
 81057ec:	f001 ffd4 	bl	8107798 <RCCEx_PLL2_Config>
 81057f0:	4603      	mov	r3, r0
 81057f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81057f6:	e004      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81057f8:	2301      	movs	r3, #1
 81057fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81057fe:	e000      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105806:	2b00      	cmp	r3, #0
 8105808:	d10a      	bne.n	8105820 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810580a:	4b5b      	ldr	r3, [pc, #364]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810580c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810580e:	f023 0103 	bic.w	r1, r3, #3
 8105812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105818:	4a57      	ldr	r2, [pc, #348]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810581a:	430b      	orrs	r3, r1
 810581c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810581e:	e003      	b.n	8105828 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105830:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8105834:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8105838:	2300      	movs	r3, #0
 810583a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810583e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8105842:	460b      	mov	r3, r1
 8105844:	4313      	orrs	r3, r2
 8105846:	f000 809f 	beq.w	8105988 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810584a:	4b4c      	ldr	r3, [pc, #304]	@ (810597c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	4a4b      	ldr	r2, [pc, #300]	@ (810597c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105854:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105856:	f7fc fb87 	bl	8101f68 <HAL_GetTick>
 810585a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810585e:	e00b      	b.n	8105878 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105860:	f7fc fb82 	bl	8101f68 <HAL_GetTick>
 8105864:	4602      	mov	r2, r0
 8105866:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810586a:	1ad3      	subs	r3, r2, r3
 810586c:	2b64      	cmp	r3, #100	@ 0x64
 810586e:	d903      	bls.n	8105878 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8105870:	2303      	movs	r3, #3
 8105872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105876:	e005      	b.n	8105884 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105878:	4b40      	ldr	r3, [pc, #256]	@ (810597c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810587a:	681b      	ldr	r3, [r3, #0]
 810587c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105880:	2b00      	cmp	r3, #0
 8105882:	d0ed      	beq.n	8105860 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8105884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105888:	2b00      	cmp	r3, #0
 810588a:	d179      	bne.n	8105980 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810588c:	4b3a      	ldr	r3, [pc, #232]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810588e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105898:	4053      	eors	r3, r2
 810589a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d015      	beq.n	81058ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81058a2:	4b35      	ldr	r3, [pc, #212]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81058a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81058a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81058aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81058ae:	4b32      	ldr	r3, [pc, #200]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81058b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81058b2:	4a31      	ldr	r2, [pc, #196]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81058b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81058b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81058ba:	4b2f      	ldr	r3, [pc, #188]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81058bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81058be:	4a2e      	ldr	r2, [pc, #184]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81058c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81058c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81058c6:	4a2c      	ldr	r2, [pc, #176]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81058c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81058cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81058d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81058da:	d118      	bne.n	810590e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81058dc:	f7fc fb44 	bl	8101f68 <HAL_GetTick>
 81058e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81058e4:	e00d      	b.n	8105902 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81058e6:	f7fc fb3f 	bl	8101f68 <HAL_GetTick>
 81058ea:	4602      	mov	r2, r0
 81058ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81058f0:	1ad2      	subs	r2, r2, r3
 81058f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 81058f6:	429a      	cmp	r2, r3
 81058f8:	d903      	bls.n	8105902 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81058fa:	2303      	movs	r3, #3
 81058fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8105900:	e005      	b.n	810590e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105902:	4b1d      	ldr	r3, [pc, #116]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105906:	f003 0302 	and.w	r3, r3, #2
 810590a:	2b00      	cmp	r3, #0
 810590c:	d0eb      	beq.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810590e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105912:	2b00      	cmp	r3, #0
 8105914:	d12b      	bne.n	810596e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810591a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810591e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105926:	d110      	bne.n	810594a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105928:	4b13      	ldr	r3, [pc, #76]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810592a:	691b      	ldr	r3, [r3, #16]
 810592c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105938:	091b      	lsrs	r3, r3, #4
 810593a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810593e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8105942:	4a0d      	ldr	r2, [pc, #52]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105944:	430b      	orrs	r3, r1
 8105946:	6113      	str	r3, [r2, #16]
 8105948:	e005      	b.n	8105956 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810594a:	4b0b      	ldr	r3, [pc, #44]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810594c:	691b      	ldr	r3, [r3, #16]
 810594e:	4a0a      	ldr	r2, [pc, #40]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105950:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8105954:	6113      	str	r3, [r2, #16]
 8105956:	4b08      	ldr	r3, [pc, #32]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105958:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810595e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105966:	4a04      	ldr	r2, [pc, #16]	@ (8105978 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105968:	430b      	orrs	r3, r1
 810596a:	6713      	str	r3, [r2, #112]	@ 0x70
 810596c:	e00c      	b.n	8105988 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810596e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8105976:	e007      	b.n	8105988 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8105978:	58024400 	.word	0x58024400
 810597c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105990:	f002 0301 	and.w	r3, r2, #1
 8105994:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8105998:	2300      	movs	r3, #0
 810599a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810599e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81059a2:	460b      	mov	r3, r1
 81059a4:	4313      	orrs	r3, r2
 81059a6:	f000 8089 	beq.w	8105abc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81059b0:	2b28      	cmp	r3, #40	@ 0x28
 81059b2:	d86b      	bhi.n	8105a8c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81059b4:	a201      	add	r2, pc, #4	@ (adr r2, 81059bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059ba:	bf00      	nop
 81059bc:	08105a95 	.word	0x08105a95
 81059c0:	08105a8d 	.word	0x08105a8d
 81059c4:	08105a8d 	.word	0x08105a8d
 81059c8:	08105a8d 	.word	0x08105a8d
 81059cc:	08105a8d 	.word	0x08105a8d
 81059d0:	08105a8d 	.word	0x08105a8d
 81059d4:	08105a8d 	.word	0x08105a8d
 81059d8:	08105a8d 	.word	0x08105a8d
 81059dc:	08105a61 	.word	0x08105a61
 81059e0:	08105a8d 	.word	0x08105a8d
 81059e4:	08105a8d 	.word	0x08105a8d
 81059e8:	08105a8d 	.word	0x08105a8d
 81059ec:	08105a8d 	.word	0x08105a8d
 81059f0:	08105a8d 	.word	0x08105a8d
 81059f4:	08105a8d 	.word	0x08105a8d
 81059f8:	08105a8d 	.word	0x08105a8d
 81059fc:	08105a77 	.word	0x08105a77
 8105a00:	08105a8d 	.word	0x08105a8d
 8105a04:	08105a8d 	.word	0x08105a8d
 8105a08:	08105a8d 	.word	0x08105a8d
 8105a0c:	08105a8d 	.word	0x08105a8d
 8105a10:	08105a8d 	.word	0x08105a8d
 8105a14:	08105a8d 	.word	0x08105a8d
 8105a18:	08105a8d 	.word	0x08105a8d
 8105a1c:	08105a95 	.word	0x08105a95
 8105a20:	08105a8d 	.word	0x08105a8d
 8105a24:	08105a8d 	.word	0x08105a8d
 8105a28:	08105a8d 	.word	0x08105a8d
 8105a2c:	08105a8d 	.word	0x08105a8d
 8105a30:	08105a8d 	.word	0x08105a8d
 8105a34:	08105a8d 	.word	0x08105a8d
 8105a38:	08105a8d 	.word	0x08105a8d
 8105a3c:	08105a95 	.word	0x08105a95
 8105a40:	08105a8d 	.word	0x08105a8d
 8105a44:	08105a8d 	.word	0x08105a8d
 8105a48:	08105a8d 	.word	0x08105a8d
 8105a4c:	08105a8d 	.word	0x08105a8d
 8105a50:	08105a8d 	.word	0x08105a8d
 8105a54:	08105a8d 	.word	0x08105a8d
 8105a58:	08105a8d 	.word	0x08105a8d
 8105a5c:	08105a95 	.word	0x08105a95
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a64:	3308      	adds	r3, #8
 8105a66:	2101      	movs	r1, #1
 8105a68:	4618      	mov	r0, r3
 8105a6a:	f001 fe95 	bl	8107798 <RCCEx_PLL2_Config>
 8105a6e:	4603      	mov	r3, r0
 8105a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105a74:	e00f      	b.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a7a:	3328      	adds	r3, #40	@ 0x28
 8105a7c:	2101      	movs	r1, #1
 8105a7e:	4618      	mov	r0, r3
 8105a80:	f001 ff3c 	bl	81078fc <RCCEx_PLL3_Config>
 8105a84:	4603      	mov	r3, r0
 8105a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105a8a:	e004      	b.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105a8c:	2301      	movs	r3, #1
 8105a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105a92:	e000      	b.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8105a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a9a:	2b00      	cmp	r3, #0
 8105a9c:	d10a      	bne.n	8105ab4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105a9e:	4bbf      	ldr	r3, [pc, #764]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105aa2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8105aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105aaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8105aac:	4abb      	ldr	r2, [pc, #748]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105aae:	430b      	orrs	r3, r1
 8105ab0:	6553      	str	r3, [r2, #84]	@ 0x54
 8105ab2:	e003      	b.n	8105abc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ac4:	f002 0302 	and.w	r3, r2, #2
 8105ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8105acc:	2300      	movs	r3, #0
 8105ace:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8105ad2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8105ad6:	460b      	mov	r3, r1
 8105ad8:	4313      	orrs	r3, r2
 8105ada:	d041      	beq.n	8105b60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105ae2:	2b05      	cmp	r3, #5
 8105ae4:	d824      	bhi.n	8105b30 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8105ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8105aec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105aec:	08105b39 	.word	0x08105b39
 8105af0:	08105b05 	.word	0x08105b05
 8105af4:	08105b1b 	.word	0x08105b1b
 8105af8:	08105b39 	.word	0x08105b39
 8105afc:	08105b39 	.word	0x08105b39
 8105b00:	08105b39 	.word	0x08105b39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b08:	3308      	adds	r3, #8
 8105b0a:	2101      	movs	r1, #1
 8105b0c:	4618      	mov	r0, r3
 8105b0e:	f001 fe43 	bl	8107798 <RCCEx_PLL2_Config>
 8105b12:	4603      	mov	r3, r0
 8105b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105b18:	e00f      	b.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b1e:	3328      	adds	r3, #40	@ 0x28
 8105b20:	2101      	movs	r1, #1
 8105b22:	4618      	mov	r0, r3
 8105b24:	f001 feea 	bl	81078fc <RCCEx_PLL3_Config>
 8105b28:	4603      	mov	r3, r0
 8105b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105b2e:	e004      	b.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b30:	2301      	movs	r3, #1
 8105b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105b36:	e000      	b.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b3e:	2b00      	cmp	r3, #0
 8105b40:	d10a      	bne.n	8105b58 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105b42:	4b96      	ldr	r3, [pc, #600]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b46:	f023 0107 	bic.w	r1, r3, #7
 8105b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105b50:	4a92      	ldr	r2, [pc, #584]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105b52:	430b      	orrs	r3, r1
 8105b54:	6553      	str	r3, [r2, #84]	@ 0x54
 8105b56:	e003      	b.n	8105b60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b68:	f002 0304 	and.w	r3, r2, #4
 8105b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8105b70:	2300      	movs	r3, #0
 8105b72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8105b76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8105b7a:	460b      	mov	r3, r1
 8105b7c:	4313      	orrs	r3, r2
 8105b7e:	d044      	beq.n	8105c0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105b88:	2b05      	cmp	r3, #5
 8105b8a:	d825      	bhi.n	8105bd8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8105b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8105b94 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8105b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b92:	bf00      	nop
 8105b94:	08105be1 	.word	0x08105be1
 8105b98:	08105bad 	.word	0x08105bad
 8105b9c:	08105bc3 	.word	0x08105bc3
 8105ba0:	08105be1 	.word	0x08105be1
 8105ba4:	08105be1 	.word	0x08105be1
 8105ba8:	08105be1 	.word	0x08105be1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bb0:	3308      	adds	r3, #8
 8105bb2:	2101      	movs	r1, #1
 8105bb4:	4618      	mov	r0, r3
 8105bb6:	f001 fdef 	bl	8107798 <RCCEx_PLL2_Config>
 8105bba:	4603      	mov	r3, r0
 8105bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105bc0:	e00f      	b.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bc6:	3328      	adds	r3, #40	@ 0x28
 8105bc8:	2101      	movs	r1, #1
 8105bca:	4618      	mov	r0, r3
 8105bcc:	f001 fe96 	bl	81078fc <RCCEx_PLL3_Config>
 8105bd0:	4603      	mov	r3, r0
 8105bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105bd6:	e004      	b.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105bd8:	2301      	movs	r3, #1
 8105bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105bde:	e000      	b.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105be6:	2b00      	cmp	r3, #0
 8105be8:	d10b      	bne.n	8105c02 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105bea:	4b6c      	ldr	r3, [pc, #432]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105bee:	f023 0107 	bic.w	r1, r3, #7
 8105bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105bfa:	4a68      	ldr	r2, [pc, #416]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105bfc:	430b      	orrs	r3, r1
 8105bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8105c00:	e003      	b.n	8105c0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c12:	f002 0320 	and.w	r3, r2, #32
 8105c16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8105c1a:	2300      	movs	r3, #0
 8105c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8105c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8105c24:	460b      	mov	r3, r1
 8105c26:	4313      	orrs	r3, r2
 8105c28:	d055      	beq.n	8105cd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105c36:	d033      	beq.n	8105ca0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105c3c:	d82c      	bhi.n	8105c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105c42:	d02f      	beq.n	8105ca4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8105c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105c48:	d826      	bhi.n	8105c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105c4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105c4e:	d02b      	beq.n	8105ca8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8105c50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105c54:	d820      	bhi.n	8105c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105c5a:	d012      	beq.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8105c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105c60:	d81a      	bhi.n	8105c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105c62:	2b00      	cmp	r3, #0
 8105c64:	d022      	beq.n	8105cac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8105c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105c6a:	d115      	bne.n	8105c98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c70:	3308      	adds	r3, #8
 8105c72:	2100      	movs	r1, #0
 8105c74:	4618      	mov	r0, r3
 8105c76:	f001 fd8f 	bl	8107798 <RCCEx_PLL2_Config>
 8105c7a:	4603      	mov	r3, r0
 8105c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105c80:	e015      	b.n	8105cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c86:	3328      	adds	r3, #40	@ 0x28
 8105c88:	2102      	movs	r1, #2
 8105c8a:	4618      	mov	r0, r3
 8105c8c:	f001 fe36 	bl	81078fc <RCCEx_PLL3_Config>
 8105c90:	4603      	mov	r3, r0
 8105c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105c96:	e00a      	b.n	8105cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105c98:	2301      	movs	r3, #1
 8105c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105c9e:	e006      	b.n	8105cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105ca0:	bf00      	nop
 8105ca2:	e004      	b.n	8105cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105ca4:	bf00      	nop
 8105ca6:	e002      	b.n	8105cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105ca8:	bf00      	nop
 8105caa:	e000      	b.n	8105cae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105cb2:	2b00      	cmp	r3, #0
 8105cb4:	d10b      	bne.n	8105cce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105cb6:	4b39      	ldr	r3, [pc, #228]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105cba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8105cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105cc6:	4a35      	ldr	r2, [pc, #212]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105cc8:	430b      	orrs	r3, r1
 8105cca:	6553      	str	r3, [r2, #84]	@ 0x54
 8105ccc:	e003      	b.n	8105cd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105cde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8105ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8105ce6:	2300      	movs	r3, #0
 8105ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8105cec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8105cf0:	460b      	mov	r3, r1
 8105cf2:	4313      	orrs	r3, r2
 8105cf4:	d058      	beq.n	8105da8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105cfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105d02:	d033      	beq.n	8105d6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8105d04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105d08:	d82c      	bhi.n	8105d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105d0e:	d02f      	beq.n	8105d70 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105d14:	d826      	bhi.n	8105d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105d16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105d1a:	d02b      	beq.n	8105d74 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8105d1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105d20:	d820      	bhi.n	8105d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105d26:	d012      	beq.n	8105d4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8105d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105d2c:	d81a      	bhi.n	8105d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105d2e:	2b00      	cmp	r3, #0
 8105d30:	d022      	beq.n	8105d78 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8105d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105d36:	d115      	bne.n	8105d64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d3c:	3308      	adds	r3, #8
 8105d3e:	2100      	movs	r1, #0
 8105d40:	4618      	mov	r0, r3
 8105d42:	f001 fd29 	bl	8107798 <RCCEx_PLL2_Config>
 8105d46:	4603      	mov	r3, r0
 8105d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105d4c:	e015      	b.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d52:	3328      	adds	r3, #40	@ 0x28
 8105d54:	2102      	movs	r1, #2
 8105d56:	4618      	mov	r0, r3
 8105d58:	f001 fdd0 	bl	81078fc <RCCEx_PLL3_Config>
 8105d5c:	4603      	mov	r3, r0
 8105d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105d62:	e00a      	b.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105d64:	2301      	movs	r3, #1
 8105d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105d6a:	e006      	b.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105d6c:	bf00      	nop
 8105d6e:	e004      	b.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105d70:	bf00      	nop
 8105d72:	e002      	b.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105d74:	bf00      	nop
 8105d76:	e000      	b.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d7e:	2b00      	cmp	r3, #0
 8105d80:	d10e      	bne.n	8105da0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105d82:	4b06      	ldr	r3, [pc, #24]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105d86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8105d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105d92:	4a02      	ldr	r2, [pc, #8]	@ (8105d9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105d94:	430b      	orrs	r3, r1
 8105d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8105d98:	e006      	b.n	8105da8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8105d9a:	bf00      	nop
 8105d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105da4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105db0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8105db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8105db8:	2300      	movs	r3, #0
 8105dba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8105dbe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8105dc2:	460b      	mov	r3, r1
 8105dc4:	4313      	orrs	r3, r2
 8105dc6:	d055      	beq.n	8105e74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105dd0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8105dd4:	d033      	beq.n	8105e3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8105dd6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8105dda:	d82c      	bhi.n	8105e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105de0:	d02f      	beq.n	8105e42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8105de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105de6:	d826      	bhi.n	8105e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105de8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8105dec:	d02b      	beq.n	8105e46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8105dee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8105df2:	d820      	bhi.n	8105e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105df8:	d012      	beq.n	8105e20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8105dfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105dfe:	d81a      	bhi.n	8105e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105e00:	2b00      	cmp	r3, #0
 8105e02:	d022      	beq.n	8105e4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8105e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105e08:	d115      	bne.n	8105e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e0e:	3308      	adds	r3, #8
 8105e10:	2100      	movs	r1, #0
 8105e12:	4618      	mov	r0, r3
 8105e14:	f001 fcc0 	bl	8107798 <RCCEx_PLL2_Config>
 8105e18:	4603      	mov	r3, r0
 8105e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105e1e:	e015      	b.n	8105e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e24:	3328      	adds	r3, #40	@ 0x28
 8105e26:	2102      	movs	r1, #2
 8105e28:	4618      	mov	r0, r3
 8105e2a:	f001 fd67 	bl	81078fc <RCCEx_PLL3_Config>
 8105e2e:	4603      	mov	r3, r0
 8105e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105e34:	e00a      	b.n	8105e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e36:	2301      	movs	r3, #1
 8105e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105e3c:	e006      	b.n	8105e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105e3e:	bf00      	nop
 8105e40:	e004      	b.n	8105e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105e42:	bf00      	nop
 8105e44:	e002      	b.n	8105e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105e46:	bf00      	nop
 8105e48:	e000      	b.n	8105e4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e50:	2b00      	cmp	r3, #0
 8105e52:	d10b      	bne.n	8105e6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105e54:	4ba1      	ldr	r3, [pc, #644]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105e58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8105e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105e64:	4a9d      	ldr	r2, [pc, #628]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105e66:	430b      	orrs	r3, r1
 8105e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8105e6a:	e003      	b.n	8105e74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e7c:	f002 0308 	and.w	r3, r2, #8
 8105e80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8105e84:	2300      	movs	r3, #0
 8105e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8105e8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8105e8e:	460b      	mov	r3, r1
 8105e90:	4313      	orrs	r3, r2
 8105e92:	d01e      	beq.n	8105ed2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8105e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105ea0:	d10c      	bne.n	8105ebc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ea6:	3328      	adds	r3, #40	@ 0x28
 8105ea8:	2102      	movs	r1, #2
 8105eaa:	4618      	mov	r0, r3
 8105eac:	f001 fd26 	bl	81078fc <RCCEx_PLL3_Config>
 8105eb0:	4603      	mov	r3, r0
 8105eb2:	2b00      	cmp	r3, #0
 8105eb4:	d002      	beq.n	8105ebc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8105eb6:	2301      	movs	r3, #1
 8105eb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105ebc:	4b87      	ldr	r3, [pc, #540]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105ec0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8105ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105ecc:	4a83      	ldr	r2, [pc, #524]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ece:	430b      	orrs	r3, r1
 8105ed0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105eda:	f002 0310 	and.w	r3, r2, #16
 8105ede:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8105ee2:	2300      	movs	r3, #0
 8105ee4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8105ee8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8105eec:	460b      	mov	r3, r1
 8105eee:	4313      	orrs	r3, r2
 8105ef0:	d01e      	beq.n	8105f30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8105efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105efe:	d10c      	bne.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f04:	3328      	adds	r3, #40	@ 0x28
 8105f06:	2102      	movs	r1, #2
 8105f08:	4618      	mov	r0, r3
 8105f0a:	f001 fcf7 	bl	81078fc <RCCEx_PLL3_Config>
 8105f0e:	4603      	mov	r3, r0
 8105f10:	2b00      	cmp	r3, #0
 8105f12:	d002      	beq.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8105f14:	2301      	movs	r3, #1
 8105f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105f1a:	4b70      	ldr	r3, [pc, #448]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105f1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8105f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8105f2a:	4a6c      	ldr	r2, [pc, #432]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105f2c:	430b      	orrs	r3, r1
 8105f2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8105f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8105f40:	2300      	movs	r3, #0
 8105f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8105f46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8105f4a:	460b      	mov	r3, r1
 8105f4c:	4313      	orrs	r3, r2
 8105f4e:	d03e      	beq.n	8105fce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8105f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105f5c:	d022      	beq.n	8105fa4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8105f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105f62:	d81b      	bhi.n	8105f9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8105f64:	2b00      	cmp	r3, #0
 8105f66:	d003      	beq.n	8105f70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8105f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105f6c:	d00b      	beq.n	8105f86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8105f6e:	e015      	b.n	8105f9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f74:	3308      	adds	r3, #8
 8105f76:	2100      	movs	r1, #0
 8105f78:	4618      	mov	r0, r3
 8105f7a:	f001 fc0d 	bl	8107798 <RCCEx_PLL2_Config>
 8105f7e:	4603      	mov	r3, r0
 8105f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105f84:	e00f      	b.n	8105fa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f8a:	3328      	adds	r3, #40	@ 0x28
 8105f8c:	2102      	movs	r1, #2
 8105f8e:	4618      	mov	r0, r3
 8105f90:	f001 fcb4 	bl	81078fc <RCCEx_PLL3_Config>
 8105f94:	4603      	mov	r3, r0
 8105f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105f9a:	e004      	b.n	8105fa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f9c:	2301      	movs	r3, #1
 8105f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105fa2:	e000      	b.n	8105fa6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8105fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105faa:	2b00      	cmp	r3, #0
 8105fac:	d10b      	bne.n	8105fc6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105fae:	4b4b      	ldr	r3, [pc, #300]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105fb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8105fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8105fbe:	4a47      	ldr	r2, [pc, #284]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105fc0:	430b      	orrs	r3, r1
 8105fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8105fc4:	e003      	b.n	8105fce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8105fda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8105fdc:	2300      	movs	r3, #0
 8105fde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8105fe0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8105fe4:	460b      	mov	r3, r1
 8105fe6:	4313      	orrs	r3, r2
 8105fe8:	d03b      	beq.n	8106062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8105fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105ff2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105ff6:	d01f      	beq.n	8106038 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105ff8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105ffc:	d818      	bhi.n	8106030 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8105ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106002:	d003      	beq.n	810600c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8106004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106008:	d007      	beq.n	810601a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810600a:	e011      	b.n	8106030 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810600c:	4b33      	ldr	r3, [pc, #204]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106010:	4a32      	ldr	r2, [pc, #200]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106018:	e00f      	b.n	810603a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810601e:	3328      	adds	r3, #40	@ 0x28
 8106020:	2101      	movs	r1, #1
 8106022:	4618      	mov	r0, r3
 8106024:	f001 fc6a 	bl	81078fc <RCCEx_PLL3_Config>
 8106028:	4603      	mov	r3, r0
 810602a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810602e:	e004      	b.n	810603a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106030:	2301      	movs	r3, #1
 8106032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106036:	e000      	b.n	810603a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8106038:	bf00      	nop
    }

    if (ret == HAL_OK)
 810603a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810603e:	2b00      	cmp	r3, #0
 8106040:	d10b      	bne.n	810605a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106042:	4b26      	ldr	r3, [pc, #152]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106046:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106052:	4a22      	ldr	r2, [pc, #136]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106054:	430b      	orrs	r3, r1
 8106056:	6553      	str	r3, [r2, #84]	@ 0x54
 8106058:	e003      	b.n	8106062 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810605a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810605e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106066:	e9d3 2300 	ldrd	r2, r3, [r3]
 810606a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810606e:	673b      	str	r3, [r7, #112]	@ 0x70
 8106070:	2300      	movs	r3, #0
 8106072:	677b      	str	r3, [r7, #116]	@ 0x74
 8106074:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8106078:	460b      	mov	r3, r1
 810607a:	4313      	orrs	r3, r2
 810607c:	d034      	beq.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106084:	2b00      	cmp	r3, #0
 8106086:	d003      	beq.n	8106090 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8106088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810608c:	d007      	beq.n	810609e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810608e:	e011      	b.n	81060b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106090:	4b12      	ldr	r3, [pc, #72]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106094:	4a11      	ldr	r2, [pc, #68]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810609a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810609c:	e00e      	b.n	81060bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060a2:	3308      	adds	r3, #8
 81060a4:	2102      	movs	r1, #2
 81060a6:	4618      	mov	r0, r3
 81060a8:	f001 fb76 	bl	8107798 <RCCEx_PLL2_Config>
 81060ac:	4603      	mov	r3, r0
 81060ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81060b2:	e003      	b.n	81060bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81060b4:	2301      	movs	r3, #1
 81060b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81060ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060c0:	2b00      	cmp	r3, #0
 81060c2:	d10d      	bne.n	81060e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81060c4:	4b05      	ldr	r3, [pc, #20]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81060c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81060c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81060d2:	4a02      	ldr	r2, [pc, #8]	@ (81060dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81060d4:	430b      	orrs	r3, r1
 81060d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81060d8:	e006      	b.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81060da:	bf00      	nop
 81060dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81060f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 81060f6:	2300      	movs	r3, #0
 81060f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81060fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81060fe:	460b      	mov	r3, r1
 8106100:	4313      	orrs	r3, r2
 8106102:	d00c      	beq.n	810611e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106108:	3328      	adds	r3, #40	@ 0x28
 810610a:	2102      	movs	r1, #2
 810610c:	4618      	mov	r0, r3
 810610e:	f001 fbf5 	bl	81078fc <RCCEx_PLL3_Config>
 8106112:	4603      	mov	r3, r0
 8106114:	2b00      	cmp	r3, #0
 8106116:	d002      	beq.n	810611e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106118:	2301      	movs	r3, #1
 810611a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106126:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810612a:	663b      	str	r3, [r7, #96]	@ 0x60
 810612c:	2300      	movs	r3, #0
 810612e:	667b      	str	r3, [r7, #100]	@ 0x64
 8106130:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8106134:	460b      	mov	r3, r1
 8106136:	4313      	orrs	r3, r2
 8106138:	d038      	beq.n	81061ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810613e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106142:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106146:	d018      	beq.n	810617a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8106148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810614c:	d811      	bhi.n	8106172 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810614e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106152:	d014      	beq.n	810617e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8106154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106158:	d80b      	bhi.n	8106172 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810615a:	2b00      	cmp	r3, #0
 810615c:	d011      	beq.n	8106182 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810615e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106162:	d106      	bne.n	8106172 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106164:	4bc3      	ldr	r3, [pc, #780]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106168:	4ac2      	ldr	r2, [pc, #776]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810616a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810616e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8106170:	e008      	b.n	8106184 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106172:	2301      	movs	r3, #1
 8106174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106178:	e004      	b.n	8106184 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810617a:	bf00      	nop
 810617c:	e002      	b.n	8106184 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810617e:	bf00      	nop
 8106180:	e000      	b.n	8106184 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106188:	2b00      	cmp	r3, #0
 810618a:	d10b      	bne.n	81061a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810618c:	4bb9      	ldr	r3, [pc, #740]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810618e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106190:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810619c:	4ab5      	ldr	r2, [pc, #724]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810619e:	430b      	orrs	r3, r1
 81061a0:	6553      	str	r3, [r2, #84]	@ 0x54
 81061a2:	e003      	b.n	81061ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81061a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81061b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 81061ba:	2300      	movs	r3, #0
 81061bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81061be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81061c2:	460b      	mov	r3, r1
 81061c4:	4313      	orrs	r3, r2
 81061c6:	d009      	beq.n	81061dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81061c8:	4baa      	ldr	r3, [pc, #680]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81061ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81061cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81061d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81061d6:	4aa7      	ldr	r2, [pc, #668]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81061d8:	430b      	orrs	r3, r1
 81061da:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81061e8:	653b      	str	r3, [r7, #80]	@ 0x50
 81061ea:	2300      	movs	r3, #0
 81061ec:	657b      	str	r3, [r7, #84]	@ 0x54
 81061ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81061f2:	460b      	mov	r3, r1
 81061f4:	4313      	orrs	r3, r2
 81061f6:	d00a      	beq.n	810620e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81061f8:	4b9e      	ldr	r3, [pc, #632]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81061fa:	691b      	ldr	r3, [r3, #16]
 81061fc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8106200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106204:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106208:	4a9a      	ldr	r2, [pc, #616]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810620a:	430b      	orrs	r3, r1
 810620c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106216:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810621a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810621c:	2300      	movs	r3, #0
 810621e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106220:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8106224:	460b      	mov	r3, r1
 8106226:	4313      	orrs	r3, r2
 8106228:	d009      	beq.n	810623e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810622a:	4b92      	ldr	r3, [pc, #584]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810622c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810622e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8106232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106238:	4a8e      	ldr	r2, [pc, #568]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810623a:	430b      	orrs	r3, r1
 810623c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106246:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810624a:	643b      	str	r3, [r7, #64]	@ 0x40
 810624c:	2300      	movs	r3, #0
 810624e:	647b      	str	r3, [r7, #68]	@ 0x44
 8106250:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8106254:	460b      	mov	r3, r1
 8106256:	4313      	orrs	r3, r2
 8106258:	d00e      	beq.n	8106278 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810625a:	4b86      	ldr	r3, [pc, #536]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810625c:	691b      	ldr	r3, [r3, #16]
 810625e:	4a85      	ldr	r2, [pc, #532]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106260:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8106264:	6113      	str	r3, [r2, #16]
 8106266:	4b83      	ldr	r3, [pc, #524]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106268:	6919      	ldr	r1, [r3, #16]
 810626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810626e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8106272:	4a80      	ldr	r2, [pc, #512]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106274:	430b      	orrs	r3, r1
 8106276:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106280:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8106284:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106286:	2300      	movs	r3, #0
 8106288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810628a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810628e:	460b      	mov	r3, r1
 8106290:	4313      	orrs	r3, r2
 8106292:	d009      	beq.n	81062a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106294:	4b77      	ldr	r3, [pc, #476]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106298:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81062a2:	4a74      	ldr	r2, [pc, #464]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81062a4:	430b      	orrs	r3, r1
 81062a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062b0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81062b4:	633b      	str	r3, [r7, #48]	@ 0x30
 81062b6:	2300      	movs	r3, #0
 81062b8:	637b      	str	r3, [r7, #52]	@ 0x34
 81062ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81062be:	460b      	mov	r3, r1
 81062c0:	4313      	orrs	r3, r2
 81062c2:	d00a      	beq.n	81062da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81062c4:	4b6b      	ldr	r3, [pc, #428]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81062c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81062c8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81062d4:	4a67      	ldr	r2, [pc, #412]	@ (8106474 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81062d6:	430b      	orrs	r3, r1
 81062d8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062e2:	2100      	movs	r1, #0
 81062e4:	62b9      	str	r1, [r7, #40]	@ 0x28
 81062e6:	f003 0301 	and.w	r3, r3, #1
 81062ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81062ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81062f0:	460b      	mov	r3, r1
 81062f2:	4313      	orrs	r3, r2
 81062f4:	d011      	beq.n	810631a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062fa:	3308      	adds	r3, #8
 81062fc:	2100      	movs	r1, #0
 81062fe:	4618      	mov	r0, r3
 8106300:	f001 fa4a 	bl	8107798 <RCCEx_PLL2_Config>
 8106304:	4603      	mov	r3, r0
 8106306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810630a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810630e:	2b00      	cmp	r3, #0
 8106310:	d003      	beq.n	810631a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106322:	2100      	movs	r1, #0
 8106324:	6239      	str	r1, [r7, #32]
 8106326:	f003 0302 	and.w	r3, r3, #2
 810632a:	627b      	str	r3, [r7, #36]	@ 0x24
 810632c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106330:	460b      	mov	r3, r1
 8106332:	4313      	orrs	r3, r2
 8106334:	d011      	beq.n	810635a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810633a:	3308      	adds	r3, #8
 810633c:	2101      	movs	r1, #1
 810633e:	4618      	mov	r0, r3
 8106340:	f001 fa2a 	bl	8107798 <RCCEx_PLL2_Config>
 8106344:	4603      	mov	r3, r0
 8106346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810634a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810634e:	2b00      	cmp	r3, #0
 8106350:	d003      	beq.n	810635a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106362:	2100      	movs	r1, #0
 8106364:	61b9      	str	r1, [r7, #24]
 8106366:	f003 0304 	and.w	r3, r3, #4
 810636a:	61fb      	str	r3, [r7, #28]
 810636c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8106370:	460b      	mov	r3, r1
 8106372:	4313      	orrs	r3, r2
 8106374:	d011      	beq.n	810639a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810637a:	3308      	adds	r3, #8
 810637c:	2102      	movs	r1, #2
 810637e:	4618      	mov	r0, r3
 8106380:	f001 fa0a 	bl	8107798 <RCCEx_PLL2_Config>
 8106384:	4603      	mov	r3, r0
 8106386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810638a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810638e:	2b00      	cmp	r3, #0
 8106390:	d003      	beq.n	810639a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063a2:	2100      	movs	r1, #0
 81063a4:	6139      	str	r1, [r7, #16]
 81063a6:	f003 0308 	and.w	r3, r3, #8
 81063aa:	617b      	str	r3, [r7, #20]
 81063ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81063b0:	460b      	mov	r3, r1
 81063b2:	4313      	orrs	r3, r2
 81063b4:	d011      	beq.n	81063da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063ba:	3328      	adds	r3, #40	@ 0x28
 81063bc:	2100      	movs	r1, #0
 81063be:	4618      	mov	r0, r3
 81063c0:	f001 fa9c 	bl	81078fc <RCCEx_PLL3_Config>
 81063c4:	4603      	mov	r3, r0
 81063c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81063ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063ce:	2b00      	cmp	r3, #0
 81063d0:	d003      	beq.n	81063da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063e2:	2100      	movs	r1, #0
 81063e4:	60b9      	str	r1, [r7, #8]
 81063e6:	f003 0310 	and.w	r3, r3, #16
 81063ea:	60fb      	str	r3, [r7, #12]
 81063ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81063f0:	460b      	mov	r3, r1
 81063f2:	4313      	orrs	r3, r2
 81063f4:	d011      	beq.n	810641a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063fa:	3328      	adds	r3, #40	@ 0x28
 81063fc:	2101      	movs	r1, #1
 81063fe:	4618      	mov	r0, r3
 8106400:	f001 fa7c 	bl	81078fc <RCCEx_PLL3_Config>
 8106404:	4603      	mov	r3, r0
 8106406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810640a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810640e:	2b00      	cmp	r3, #0
 8106410:	d003      	beq.n	810641a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106422:	2100      	movs	r1, #0
 8106424:	6039      	str	r1, [r7, #0]
 8106426:	f003 0320 	and.w	r3, r3, #32
 810642a:	607b      	str	r3, [r7, #4]
 810642c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106430:	460b      	mov	r3, r1
 8106432:	4313      	orrs	r3, r2
 8106434:	d011      	beq.n	810645a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810643a:	3328      	adds	r3, #40	@ 0x28
 810643c:	2102      	movs	r1, #2
 810643e:	4618      	mov	r0, r3
 8106440:	f001 fa5c 	bl	81078fc <RCCEx_PLL3_Config>
 8106444:	4603      	mov	r3, r0
 8106446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810644a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810644e:	2b00      	cmp	r3, #0
 8106450:	d003      	beq.n	810645a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810645a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810645e:	2b00      	cmp	r3, #0
 8106460:	d101      	bne.n	8106466 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8106462:	2300      	movs	r3, #0
 8106464:	e000      	b.n	8106468 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8106466:	2301      	movs	r3, #1
}
 8106468:	4618      	mov	r0, r3
 810646a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810646e:	46bd      	mov	sp, r7
 8106470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8106474:	58024400 	.word	0x58024400

08106478 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8106478:	b580      	push	{r7, lr}
 810647a:	b090      	sub	sp, #64	@ 0x40
 810647c:	af00      	add	r7, sp, #0
 810647e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106486:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810648a:	430b      	orrs	r3, r1
 810648c:	f040 8094 	bne.w	81065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106490:	4b9e      	ldr	r3, [pc, #632]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106494:	f003 0307 	and.w	r3, r3, #7
 8106498:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810649c:	2b04      	cmp	r3, #4
 810649e:	f200 8087 	bhi.w	81065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81064a2:	a201      	add	r2, pc, #4	@ (adr r2, 81064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064a8:	081064bd 	.word	0x081064bd
 81064ac:	081064e5 	.word	0x081064e5
 81064b0:	0810650d 	.word	0x0810650d
 81064b4:	081065a9 	.word	0x081065a9
 81064b8:	08106535 	.word	0x08106535
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81064bc:	4b93      	ldr	r3, [pc, #588]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81064be:	681b      	ldr	r3, [r3, #0]
 81064c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81064c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81064c8:	d108      	bne.n	81064dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81064ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81064ce:	4618      	mov	r0, r3
 81064d0:	f001 f810 	bl	81074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81064d8:	f000 bd45 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81064dc:	2300      	movs	r3, #0
 81064de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81064e0:	f000 bd41 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81064e4:	4b89      	ldr	r3, [pc, #548]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81064e6:	681b      	ldr	r3, [r3, #0]
 81064e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81064ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81064f0:	d108      	bne.n	8106504 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81064f2:	f107 0318 	add.w	r3, r7, #24
 81064f6:	4618      	mov	r0, r3
 81064f8:	f000 fd54 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81064fc:	69bb      	ldr	r3, [r7, #24]
 81064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106500:	f000 bd31 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106504:	2300      	movs	r3, #0
 8106506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106508:	f000 bd2d 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810650c:	4b7f      	ldr	r3, [pc, #508]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810650e:	681b      	ldr	r3, [r3, #0]
 8106510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106518:	d108      	bne.n	810652c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810651a:	f107 030c 	add.w	r3, r7, #12
 810651e:	4618      	mov	r0, r3
 8106520:	f000 fe94 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106524:	68fb      	ldr	r3, [r7, #12]
 8106526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106528:	f000 bd1d 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810652c:	2300      	movs	r3, #0
 810652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106530:	f000 bd19 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106534:	4b75      	ldr	r3, [pc, #468]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106538:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810653c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810653e:	4b73      	ldr	r3, [pc, #460]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106540:	681b      	ldr	r3, [r3, #0]
 8106542:	f003 0304 	and.w	r3, r3, #4
 8106546:	2b04      	cmp	r3, #4
 8106548:	d10c      	bne.n	8106564 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810654a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810654c:	2b00      	cmp	r3, #0
 810654e:	d109      	bne.n	8106564 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106550:	4b6e      	ldr	r3, [pc, #440]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106552:	681b      	ldr	r3, [r3, #0]
 8106554:	08db      	lsrs	r3, r3, #3
 8106556:	f003 0303 	and.w	r3, r3, #3
 810655a:	4a6d      	ldr	r2, [pc, #436]	@ (8106710 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810655c:	fa22 f303 	lsr.w	r3, r2, r3
 8106560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106562:	e01f      	b.n	81065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106564:	4b69      	ldr	r3, [pc, #420]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810656c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106570:	d106      	bne.n	8106580 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8106572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106578:	d102      	bne.n	8106580 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810657a:	4b66      	ldr	r3, [pc, #408]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810657e:	e011      	b.n	81065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106580:	4b62      	ldr	r3, [pc, #392]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810658c:	d106      	bne.n	810659c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810658e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106594:	d102      	bne.n	810659c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106596:	4b60      	ldr	r3, [pc, #384]	@ (8106718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810659a:	e003      	b.n	81065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810659c:	2300      	movs	r3, #0
 810659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81065a0:	f000 bce1 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81065a4:	f000 bcdf 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81065a8:	4b5c      	ldr	r3, [pc, #368]	@ (810671c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81065aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81065ac:	f000 bcdb 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81065b0:	2300      	movs	r3, #0
 81065b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81065b4:	f000 bcd7 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81065b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81065bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 81065c0:	430b      	orrs	r3, r1
 81065c2:	f040 80ad 	bne.w	8106720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81065c6:	4b51      	ldr	r3, [pc, #324]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81065c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81065ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 81065ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81065d6:	d056      	beq.n	8106686 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81065de:	f200 8090 	bhi.w	8106702 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065e4:	2bc0      	cmp	r3, #192	@ 0xc0
 81065e6:	f000 8088 	beq.w	81066fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065ec:	2bc0      	cmp	r3, #192	@ 0xc0
 81065ee:	f200 8088 	bhi.w	8106702 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065f4:	2b80      	cmp	r3, #128	@ 0x80
 81065f6:	d032      	beq.n	810665e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81065f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065fa:	2b80      	cmp	r3, #128	@ 0x80
 81065fc:	f200 8081 	bhi.w	8106702 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106602:	2b00      	cmp	r3, #0
 8106604:	d003      	beq.n	810660e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8106606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106608:	2b40      	cmp	r3, #64	@ 0x40
 810660a:	d014      	beq.n	8106636 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810660c:	e079      	b.n	8106702 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810660e:	4b3f      	ldr	r3, [pc, #252]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106610:	681b      	ldr	r3, [r3, #0]
 8106612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810661a:	d108      	bne.n	810662e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810661c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106620:	4618      	mov	r0, r3
 8106622:	f000 ff67 	bl	81074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810662a:	f000 bc9c 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810662e:	2300      	movs	r3, #0
 8106630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106632:	f000 bc98 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106636:	4b35      	ldr	r3, [pc, #212]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106638:	681b      	ldr	r3, [r3, #0]
 810663a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810663e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106642:	d108      	bne.n	8106656 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106644:	f107 0318 	add.w	r3, r7, #24
 8106648:	4618      	mov	r0, r3
 810664a:	f000 fcab 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810664e:	69bb      	ldr	r3, [r7, #24]
 8106650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106652:	f000 bc88 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106656:	2300      	movs	r3, #0
 8106658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810665a:	f000 bc84 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810665e:	4b2b      	ldr	r3, [pc, #172]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810666a:	d108      	bne.n	810667e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810666c:	f107 030c 	add.w	r3, r7, #12
 8106670:	4618      	mov	r0, r3
 8106672:	f000 fdeb 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810667a:	f000 bc74 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810667e:	2300      	movs	r3, #0
 8106680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106682:	f000 bc70 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106686:	4b21      	ldr	r3, [pc, #132]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810668a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810668e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106690:	4b1e      	ldr	r3, [pc, #120]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106692:	681b      	ldr	r3, [r3, #0]
 8106694:	f003 0304 	and.w	r3, r3, #4
 8106698:	2b04      	cmp	r3, #4
 810669a:	d10c      	bne.n	81066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810669c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810669e:	2b00      	cmp	r3, #0
 81066a0:	d109      	bne.n	81066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81066a2:	4b1a      	ldr	r3, [pc, #104]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	08db      	lsrs	r3, r3, #3
 81066a8:	f003 0303 	and.w	r3, r3, #3
 81066ac:	4a18      	ldr	r2, [pc, #96]	@ (8106710 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81066ae:	fa22 f303 	lsr.w	r3, r2, r3
 81066b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81066b4:	e01f      	b.n	81066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81066b6:	4b15      	ldr	r3, [pc, #84]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81066b8:	681b      	ldr	r3, [r3, #0]
 81066ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81066be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81066c2:	d106      	bne.n	81066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81066c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81066c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81066ca:	d102      	bne.n	81066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81066cc:	4b11      	ldr	r3, [pc, #68]	@ (8106714 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81066d0:	e011      	b.n	81066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81066d2:	4b0e      	ldr	r3, [pc, #56]	@ (810670c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81066da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81066de:	d106      	bne.n	81066ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81066e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81066e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81066e6:	d102      	bne.n	81066ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81066e8:	4b0b      	ldr	r3, [pc, #44]	@ (8106718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81066ec:	e003      	b.n	81066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81066ee:	2300      	movs	r3, #0
 81066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81066f2:	f000 bc38 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81066f6:	f000 bc36 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81066fa:	4b08      	ldr	r3, [pc, #32]	@ (810671c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81066fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81066fe:	f000 bc32 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106702:	2300      	movs	r3, #0
 8106704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106706:	f000 bc2e 	b.w	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810670a:	bf00      	nop
 810670c:	58024400 	.word	0x58024400
 8106710:	03d09000 	.word	0x03d09000
 8106714:	003d0900 	.word	0x003d0900
 8106718:	017d7840 	.word	0x017d7840
 810671c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106724:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8106728:	430b      	orrs	r3, r1
 810672a:	f040 809c 	bne.w	8106866 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810672e:	4b9e      	ldr	r3, [pc, #632]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106732:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8106736:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810673a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810673e:	d054      	beq.n	81067ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8106740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106742:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106746:	f200 808b 	bhi.w	8106860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810674c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106750:	f000 8083 	beq.w	810685a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8106754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106756:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810675a:	f200 8081 	bhi.w	8106860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106764:	d02f      	beq.n	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8106766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810676c:	d878      	bhi.n	8106860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106770:	2b00      	cmp	r3, #0
 8106772:	d004      	beq.n	810677e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8106774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106776:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810677a:	d012      	beq.n	81067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810677c:	e070      	b.n	8106860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810677e:	4b8a      	ldr	r3, [pc, #552]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106780:	681b      	ldr	r3, [r3, #0]
 8106782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810678a:	d107      	bne.n	810679c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810678c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106790:	4618      	mov	r0, r3
 8106792:	f000 feaf 	bl	81074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810679a:	e3e4      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810679c:	2300      	movs	r3, #0
 810679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067a0:	e3e1      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81067a2:	4b81      	ldr	r3, [pc, #516]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81067a4:	681b      	ldr	r3, [r3, #0]
 81067a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81067aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81067ae:	d107      	bne.n	81067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81067b0:	f107 0318 	add.w	r3, r7, #24
 81067b4:	4618      	mov	r0, r3
 81067b6:	f000 fbf5 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81067ba:	69bb      	ldr	r3, [r7, #24]
 81067bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81067be:	e3d2      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81067c0:	2300      	movs	r3, #0
 81067c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067c4:	e3cf      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81067c6:	4b78      	ldr	r3, [pc, #480]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81067c8:	681b      	ldr	r3, [r3, #0]
 81067ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81067ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81067d2:	d107      	bne.n	81067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81067d4:	f107 030c 	add.w	r3, r7, #12
 81067d8:	4618      	mov	r0, r3
 81067da:	f000 fd37 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81067de:	68fb      	ldr	r3, [r7, #12]
 81067e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81067e2:	e3c0      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81067e4:	2300      	movs	r3, #0
 81067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067e8:	e3bd      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81067ea:	4b6f      	ldr	r3, [pc, #444]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81067ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81067ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81067f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81067f4:	4b6c      	ldr	r3, [pc, #432]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81067f6:	681b      	ldr	r3, [r3, #0]
 81067f8:	f003 0304 	and.w	r3, r3, #4
 81067fc:	2b04      	cmp	r3, #4
 81067fe:	d10c      	bne.n	810681a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8106800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106802:	2b00      	cmp	r3, #0
 8106804:	d109      	bne.n	810681a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106806:	4b68      	ldr	r3, [pc, #416]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106808:	681b      	ldr	r3, [r3, #0]
 810680a:	08db      	lsrs	r3, r3, #3
 810680c:	f003 0303 	and.w	r3, r3, #3
 8106810:	4a66      	ldr	r2, [pc, #408]	@ (81069ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8106812:	fa22 f303 	lsr.w	r3, r2, r3
 8106816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106818:	e01e      	b.n	8106858 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810681a:	4b63      	ldr	r3, [pc, #396]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106826:	d106      	bne.n	8106836 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8106828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810682a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810682e:	d102      	bne.n	8106836 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106830:	4b5f      	ldr	r3, [pc, #380]	@ (81069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8106832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106834:	e010      	b.n	8106858 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106836:	4b5c      	ldr	r3, [pc, #368]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810683e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106842:	d106      	bne.n	8106852 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8106844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810684a:	d102      	bne.n	8106852 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810684c:	4b59      	ldr	r3, [pc, #356]	@ (81069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106850:	e002      	b.n	8106858 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106852:	2300      	movs	r3, #0
 8106854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106856:	e386      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106858:	e385      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810685a:	4b57      	ldr	r3, [pc, #348]	@ (81069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810685e:	e382      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106860:	2300      	movs	r3, #0
 8106862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106864:	e37f      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106866:	e9d7 2300 	ldrd	r2, r3, [r7]
 810686a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810686e:	430b      	orrs	r3, r1
 8106870:	f040 80a7 	bne.w	81069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8106874:	4b4c      	ldr	r3, [pc, #304]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106878:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810687c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106884:	d055      	beq.n	8106932 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8106886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810688c:	f200 8096 	bhi.w	81069bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106892:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106896:	f000 8084 	beq.w	81069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810689c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81068a0:	f200 808c 	bhi.w	81069bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81068a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81068aa:	d030      	beq.n	810690e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81068ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81068b2:	f200 8083 	bhi.w	81069bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81068b8:	2b00      	cmp	r3, #0
 81068ba:	d004      	beq.n	81068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81068bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81068be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81068c2:	d012      	beq.n	81068ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81068c4:	e07a      	b.n	81069bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81068c6:	4b38      	ldr	r3, [pc, #224]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81068c8:	681b      	ldr	r3, [r3, #0]
 81068ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81068ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81068d2:	d107      	bne.n	81068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81068d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81068d8:	4618      	mov	r0, r3
 81068da:	f000 fe0b 	bl	81074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81068e2:	e340      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81068e4:	2300      	movs	r3, #0
 81068e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81068e8:	e33d      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81068ea:	4b2f      	ldr	r3, [pc, #188]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81068ec:	681b      	ldr	r3, [r3, #0]
 81068ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81068f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81068f6:	d107      	bne.n	8106908 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81068f8:	f107 0318 	add.w	r3, r7, #24
 81068fc:	4618      	mov	r0, r3
 81068fe:	f000 fb51 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106902:	69bb      	ldr	r3, [r7, #24]
 8106904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106906:	e32e      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106908:	2300      	movs	r3, #0
 810690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810690c:	e32b      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810690e:	4b26      	ldr	r3, [pc, #152]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106910:	681b      	ldr	r3, [r3, #0]
 8106912:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810691a:	d107      	bne.n	810692c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810691c:	f107 030c 	add.w	r3, r7, #12
 8106920:	4618      	mov	r0, r3
 8106922:	f000 fc93 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106926:	68fb      	ldr	r3, [r7, #12]
 8106928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810692a:	e31c      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810692c:	2300      	movs	r3, #0
 810692e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106930:	e319      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106932:	4b1d      	ldr	r3, [pc, #116]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106936:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810693a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810693c:	4b1a      	ldr	r3, [pc, #104]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810693e:	681b      	ldr	r3, [r3, #0]
 8106940:	f003 0304 	and.w	r3, r3, #4
 8106944:	2b04      	cmp	r3, #4
 8106946:	d10c      	bne.n	8106962 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8106948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810694a:	2b00      	cmp	r3, #0
 810694c:	d109      	bne.n	8106962 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810694e:	4b16      	ldr	r3, [pc, #88]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106950:	681b      	ldr	r3, [r3, #0]
 8106952:	08db      	lsrs	r3, r3, #3
 8106954:	f003 0303 	and.w	r3, r3, #3
 8106958:	4a14      	ldr	r2, [pc, #80]	@ (81069ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810695a:	fa22 f303 	lsr.w	r3, r2, r3
 810695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106960:	e01e      	b.n	81069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106962:	4b11      	ldr	r3, [pc, #68]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106964:	681b      	ldr	r3, [r3, #0]
 8106966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810696a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810696e:	d106      	bne.n	810697e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8106970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106976:	d102      	bne.n	810697e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106978:	4b0d      	ldr	r3, [pc, #52]	@ (81069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810697c:	e010      	b.n	81069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810697e:	4b0a      	ldr	r3, [pc, #40]	@ (81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106980:	681b      	ldr	r3, [r3, #0]
 8106982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810698a:	d106      	bne.n	810699a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810698c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810698e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106992:	d102      	bne.n	810699a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106994:	4b07      	ldr	r3, [pc, #28]	@ (81069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8106996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106998:	e002      	b.n	81069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810699a:	2300      	movs	r3, #0
 810699c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810699e:	e2e2      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81069a0:	e2e1      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81069a2:	4b05      	ldr	r3, [pc, #20]	@ (81069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81069a6:	e2de      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81069a8:	58024400 	.word	0x58024400
 81069ac:	03d09000 	.word	0x03d09000
 81069b0:	003d0900 	.word	0x003d0900
 81069b4:	017d7840 	.word	0x017d7840
 81069b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 81069bc:	2300      	movs	r3, #0
 81069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81069c0:	e2d1      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81069c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81069c6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 81069ca:	430b      	orrs	r3, r1
 81069cc:	f040 809c 	bne.w	8106b08 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81069d0:	4b93      	ldr	r3, [pc, #588]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81069d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81069d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81069d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81069da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81069dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81069e0:	d054      	beq.n	8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81069e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81069e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81069e8:	f200 808b 	bhi.w	8106b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81069ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81069f2:	f000 8083 	beq.w	8106afc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81069f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81069fc:	f200 8081 	bhi.w	8106b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106a06:	d02f      	beq.n	8106a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8106a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106a0e:	d878      	bhi.n	8106b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a12:	2b00      	cmp	r3, #0
 8106a14:	d004      	beq.n	8106a20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8106a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106a1c:	d012      	beq.n	8106a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8106a1e:	e070      	b.n	8106b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106a20:	4b7f      	ldr	r3, [pc, #508]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106a28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106a2c:	d107      	bne.n	8106a3e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106a32:	4618      	mov	r0, r3
 8106a34:	f000 fd5e 	bl	81074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106a3c:	e293      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106a3e:	2300      	movs	r3, #0
 8106a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106a42:	e290      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106a44:	4b76      	ldr	r3, [pc, #472]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106a46:	681b      	ldr	r3, [r3, #0]
 8106a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106a4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106a50:	d107      	bne.n	8106a62 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106a52:	f107 0318 	add.w	r3, r7, #24
 8106a56:	4618      	mov	r0, r3
 8106a58:	f000 faa4 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106a5c:	69bb      	ldr	r3, [r7, #24]
 8106a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106a60:	e281      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106a62:	2300      	movs	r3, #0
 8106a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106a66:	e27e      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106a68:	4b6d      	ldr	r3, [pc, #436]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106a74:	d107      	bne.n	8106a86 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106a76:	f107 030c 	add.w	r3, r7, #12
 8106a7a:	4618      	mov	r0, r3
 8106a7c:	f000 fbe6 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106a80:	68fb      	ldr	r3, [r7, #12]
 8106a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106a84:	e26f      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106a86:	2300      	movs	r3, #0
 8106a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106a8a:	e26c      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106a8c:	4b64      	ldr	r3, [pc, #400]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106a94:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106a96:	4b62      	ldr	r3, [pc, #392]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106a98:	681b      	ldr	r3, [r3, #0]
 8106a9a:	f003 0304 	and.w	r3, r3, #4
 8106a9e:	2b04      	cmp	r3, #4
 8106aa0:	d10c      	bne.n	8106abc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8106aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106aa4:	2b00      	cmp	r3, #0
 8106aa6:	d109      	bne.n	8106abc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106aaa:	681b      	ldr	r3, [r3, #0]
 8106aac:	08db      	lsrs	r3, r3, #3
 8106aae:	f003 0303 	and.w	r3, r3, #3
 8106ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8106c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8106ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106aba:	e01e      	b.n	8106afa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106abc:	4b58      	ldr	r3, [pc, #352]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106abe:	681b      	ldr	r3, [r3, #0]
 8106ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106ac8:	d106      	bne.n	8106ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8106aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106acc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106ad0:	d102      	bne.n	8106ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106ad2:	4b55      	ldr	r3, [pc, #340]	@ (8106c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106ad6:	e010      	b.n	8106afa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106ad8:	4b51      	ldr	r3, [pc, #324]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106ada:	681b      	ldr	r3, [r3, #0]
 8106adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106ae4:	d106      	bne.n	8106af4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8106ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106aec:	d102      	bne.n	8106af4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106aee:	4b4f      	ldr	r3, [pc, #316]	@ (8106c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106af2:	e002      	b.n	8106afa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106af4:	2300      	movs	r3, #0
 8106af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106af8:	e235      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106afa:	e234      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106afc:	4b4c      	ldr	r3, [pc, #304]	@ (8106c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8106afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b00:	e231      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106b02:	2300      	movs	r3, #0
 8106b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b06:	e22e      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8106b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106b0c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8106b10:	430b      	orrs	r3, r1
 8106b12:	f040 808f 	bne.w	8106c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8106b16:	4b42      	ldr	r3, [pc, #264]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b1a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8106b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8106b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106b26:	d06b      	beq.n	8106c00 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8106b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106b2e:	d874      	bhi.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106b36:	d056      	beq.n	8106be6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8106b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106b3e:	d86c      	bhi.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106b46:	d03b      	beq.n	8106bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8106b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106b4e:	d864      	bhi.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106b56:	d021      	beq.n	8106b9c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8106b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106b5e:	d85c      	bhi.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b62:	2b00      	cmp	r3, #0
 8106b64:	d004      	beq.n	8106b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8106b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106b6c:	d004      	beq.n	8106b78 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8106b6e:	e054      	b.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8106b70:	f7fe fa4c 	bl	810500c <HAL_RCC_GetPCLK1Freq>
 8106b74:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8106b76:	e1f6      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106b78:	4b29      	ldr	r3, [pc, #164]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106b7a:	681b      	ldr	r3, [r3, #0]
 8106b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106b80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106b84:	d107      	bne.n	8106b96 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106b86:	f107 0318 	add.w	r3, r7, #24
 8106b8a:	4618      	mov	r0, r3
 8106b8c:	f000 fa0a 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106b90:	69fb      	ldr	r3, [r7, #28]
 8106b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106b94:	e1e7      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106b96:	2300      	movs	r3, #0
 8106b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b9a:	e1e4      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106b9c:	4b20      	ldr	r3, [pc, #128]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106b9e:	681b      	ldr	r3, [r3, #0]
 8106ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ba8:	d107      	bne.n	8106bba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106baa:	f107 030c 	add.w	r3, r7, #12
 8106bae:	4618      	mov	r0, r3
 8106bb0:	f000 fb4c 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106bb4:	693b      	ldr	r3, [r7, #16]
 8106bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106bb8:	e1d5      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106bba:	2300      	movs	r3, #0
 8106bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106bbe:	e1d2      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106bc0:	4b17      	ldr	r3, [pc, #92]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	f003 0304 	and.w	r3, r3, #4
 8106bc8:	2b04      	cmp	r3, #4
 8106bca:	d109      	bne.n	8106be0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106bcc:	4b14      	ldr	r3, [pc, #80]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106bce:	681b      	ldr	r3, [r3, #0]
 8106bd0:	08db      	lsrs	r3, r3, #3
 8106bd2:	f003 0303 	and.w	r3, r3, #3
 8106bd6:	4a13      	ldr	r2, [pc, #76]	@ (8106c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8106bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106bde:	e1c2      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106be0:	2300      	movs	r3, #0
 8106be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106be4:	e1bf      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106be6:	4b0e      	ldr	r3, [pc, #56]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106be8:	681b      	ldr	r3, [r3, #0]
 8106bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106bf2:	d102      	bne.n	8106bfa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8106bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8106c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106bf8:	e1b5      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106bfa:	2300      	movs	r3, #0
 8106bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106bfe:	e1b2      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106c00:	4b07      	ldr	r3, [pc, #28]	@ (8106c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106c02:	681b      	ldr	r3, [r3, #0]
 8106c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c0c:	d102      	bne.n	8106c14 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8106c0e:	4b07      	ldr	r3, [pc, #28]	@ (8106c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c12:	e1a8      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c14:	2300      	movs	r3, #0
 8106c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c18:	e1a5      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106c1a:	2300      	movs	r3, #0
 8106c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c1e:	e1a2      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106c20:	58024400 	.word	0x58024400
 8106c24:	03d09000 	.word	0x03d09000
 8106c28:	003d0900 	.word	0x003d0900
 8106c2c:	017d7840 	.word	0x017d7840
 8106c30:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106c38:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8106c3c:	430b      	orrs	r3, r1
 8106c3e:	d173      	bne.n	8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8106c40:	4b9c      	ldr	r3, [pc, #624]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106c48:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c50:	d02f      	beq.n	8106cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8106c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c58:	d863      	bhi.n	8106d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8106c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106c5c:	2b00      	cmp	r3, #0
 8106c5e:	d004      	beq.n	8106c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8106c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106c66:	d012      	beq.n	8106c8e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8106c68:	e05b      	b.n	8106d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106c6a:	4b92      	ldr	r3, [pc, #584]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106c6c:	681b      	ldr	r3, [r3, #0]
 8106c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106c76:	d107      	bne.n	8106c88 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c78:	f107 0318 	add.w	r3, r7, #24
 8106c7c:	4618      	mov	r0, r3
 8106c7e:	f000 f991 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106c82:	69bb      	ldr	r3, [r7, #24]
 8106c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c86:	e16e      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c88:	2300      	movs	r3, #0
 8106c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c8c:	e16b      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106c8e:	4b89      	ldr	r3, [pc, #548]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106c90:	681b      	ldr	r3, [r3, #0]
 8106c92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c9a:	d107      	bne.n	8106cac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106c9c:	f107 030c 	add.w	r3, r7, #12
 8106ca0:	4618      	mov	r0, r3
 8106ca2:	f000 fad3 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8106ca6:	697b      	ldr	r3, [r7, #20]
 8106ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106caa:	e15c      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106cac:	2300      	movs	r3, #0
 8106cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106cb0:	e159      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106cb2:	4b80      	ldr	r3, [pc, #512]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106cb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106cba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106cbc:	4b7d      	ldr	r3, [pc, #500]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	f003 0304 	and.w	r3, r3, #4
 8106cc4:	2b04      	cmp	r3, #4
 8106cc6:	d10c      	bne.n	8106ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8106cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106cca:	2b00      	cmp	r3, #0
 8106ccc:	d109      	bne.n	8106ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106cce:	4b79      	ldr	r3, [pc, #484]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106cd0:	681b      	ldr	r3, [r3, #0]
 8106cd2:	08db      	lsrs	r3, r3, #3
 8106cd4:	f003 0303 	and.w	r3, r3, #3
 8106cd8:	4a77      	ldr	r2, [pc, #476]	@ (8106eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8106cda:	fa22 f303 	lsr.w	r3, r2, r3
 8106cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106ce0:	e01e      	b.n	8106d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ce2:	4b74      	ldr	r3, [pc, #464]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106ce4:	681b      	ldr	r3, [r3, #0]
 8106ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106cee:	d106      	bne.n	8106cfe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8106cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106cf6:	d102      	bne.n	8106cfe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106cf8:	4b70      	ldr	r3, [pc, #448]	@ (8106ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8106cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106cfc:	e010      	b.n	8106d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106d00:	681b      	ldr	r3, [r3, #0]
 8106d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106d0a:	d106      	bne.n	8106d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8106d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106d12:	d102      	bne.n	8106d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106d14:	4b6a      	ldr	r3, [pc, #424]	@ (8106ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8106d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106d18:	e002      	b.n	8106d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106d1a:	2300      	movs	r3, #0
 8106d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106d1e:	e122      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106d20:	e121      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106d22:	2300      	movs	r3, #0
 8106d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106d26:	e11e      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106d2c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8106d30:	430b      	orrs	r3, r1
 8106d32:	d133      	bne.n	8106d9c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8106d34:	4b5f      	ldr	r3, [pc, #380]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106d3c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106d40:	2b00      	cmp	r3, #0
 8106d42:	d004      	beq.n	8106d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8106d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106d4a:	d012      	beq.n	8106d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8106d4c:	e023      	b.n	8106d96 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106d4e:	4b59      	ldr	r3, [pc, #356]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106d50:	681b      	ldr	r3, [r3, #0]
 8106d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106d56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106d5a:	d107      	bne.n	8106d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106d60:	4618      	mov	r0, r3
 8106d62:	f000 fbc7 	bl	81074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106d6a:	e0fc      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106d6c:	2300      	movs	r3, #0
 8106d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106d70:	e0f9      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106d72:	4b50      	ldr	r3, [pc, #320]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106d74:	681b      	ldr	r3, [r3, #0]
 8106d76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106d7e:	d107      	bne.n	8106d90 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106d80:	f107 0318 	add.w	r3, r7, #24
 8106d84:	4618      	mov	r0, r3
 8106d86:	f000 f90d 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106d8a:	6a3b      	ldr	r3, [r7, #32]
 8106d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106d8e:	e0ea      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106d90:	2300      	movs	r3, #0
 8106d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106d94:	e0e7      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106d96:	2300      	movs	r3, #0
 8106d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106d9a:	e0e4      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106da0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8106da4:	430b      	orrs	r3, r1
 8106da6:	f040 808d 	bne.w	8106ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8106daa:	4b42      	ldr	r3, [pc, #264]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106dae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8106db2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106dba:	d06b      	beq.n	8106e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8106dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106dc2:	d874      	bhi.n	8106eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106dca:	d056      	beq.n	8106e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8106dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106dd2:	d86c      	bhi.n	8106eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106dd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106dda:	d03b      	beq.n	8106e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8106ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106dde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106de2:	d864      	bhi.n	8106eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106dea:	d021      	beq.n	8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8106dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106df2:	d85c      	bhi.n	8106eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106df6:	2b00      	cmp	r3, #0
 8106df8:	d004      	beq.n	8106e04 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8106dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106e00:	d004      	beq.n	8106e0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8106e02:	e054      	b.n	8106eae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8106e04:	f000 f8b8 	bl	8106f78 <HAL_RCCEx_GetD3PCLK1Freq>
 8106e08:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8106e0a:	e0ac      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106e0c:	4b29      	ldr	r3, [pc, #164]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106e0e:	681b      	ldr	r3, [r3, #0]
 8106e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106e18:	d107      	bne.n	8106e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106e1a:	f107 0318 	add.w	r3, r7, #24
 8106e1e:	4618      	mov	r0, r3
 8106e20:	f000 f8c0 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106e24:	69fb      	ldr	r3, [r7, #28]
 8106e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106e28:	e09d      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106e2a:	2300      	movs	r3, #0
 8106e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e2e:	e09a      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106e30:	4b20      	ldr	r3, [pc, #128]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106e32:	681b      	ldr	r3, [r3, #0]
 8106e34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106e3c:	d107      	bne.n	8106e4e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e3e:	f107 030c 	add.w	r3, r7, #12
 8106e42:	4618      	mov	r0, r3
 8106e44:	f000 fa02 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106e48:	693b      	ldr	r3, [r7, #16]
 8106e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106e4c:	e08b      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106e4e:	2300      	movs	r3, #0
 8106e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e52:	e088      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106e54:	4b17      	ldr	r3, [pc, #92]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106e56:	681b      	ldr	r3, [r3, #0]
 8106e58:	f003 0304 	and.w	r3, r3, #4
 8106e5c:	2b04      	cmp	r3, #4
 8106e5e:	d109      	bne.n	8106e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106e60:	4b14      	ldr	r3, [pc, #80]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106e62:	681b      	ldr	r3, [r3, #0]
 8106e64:	08db      	lsrs	r3, r3, #3
 8106e66:	f003 0303 	and.w	r3, r3, #3
 8106e6a:	4a13      	ldr	r2, [pc, #76]	@ (8106eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8106e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8106e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106e72:	e078      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106e74:	2300      	movs	r3, #0
 8106e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e78:	e075      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106e7c:	681b      	ldr	r3, [r3, #0]
 8106e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106e86:	d102      	bne.n	8106e8e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8106e88:	4b0c      	ldr	r3, [pc, #48]	@ (8106ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8106e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106e8c:	e06b      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106e8e:	2300      	movs	r3, #0
 8106e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e92:	e068      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106e94:	4b07      	ldr	r3, [pc, #28]	@ (8106eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106e96:	681b      	ldr	r3, [r3, #0]
 8106e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106ea0:	d102      	bne.n	8106ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8106ea2:	4b07      	ldr	r3, [pc, #28]	@ (8106ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8106ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ea6:	e05e      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ea8:	2300      	movs	r3, #0
 8106eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106eac:	e05b      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8106eae:	2300      	movs	r3, #0
 8106eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106eb2:	e058      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106eb4:	58024400 	.word	0x58024400
 8106eb8:	03d09000 	.word	0x03d09000
 8106ebc:	003d0900 	.word	0x003d0900
 8106ec0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8106ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106ec8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8106ecc:	430b      	orrs	r3, r1
 8106ece:	d148      	bne.n	8106f62 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8106ed0:	4b27      	ldr	r3, [pc, #156]	@ (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106ed4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106ed8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ee0:	d02a      	beq.n	8106f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8106ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ee8:	d838      	bhi.n	8106f5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8106eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106eec:	2b00      	cmp	r3, #0
 8106eee:	d004      	beq.n	8106efa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8106ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106ef6:	d00d      	beq.n	8106f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8106ef8:	e030      	b.n	8106f5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106efa:	4b1d      	ldr	r3, [pc, #116]	@ (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106efc:	681b      	ldr	r3, [r3, #0]
 8106efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106f06:	d102      	bne.n	8106f0e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8106f08:	4b1a      	ldr	r3, [pc, #104]	@ (8106f74 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8106f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f0c:	e02b      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f0e:	2300      	movs	r3, #0
 8106f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f12:	e028      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106f14:	4b16      	ldr	r3, [pc, #88]	@ (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106f16:	681b      	ldr	r3, [r3, #0]
 8106f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106f1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106f20:	d107      	bne.n	8106f32 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106f26:	4618      	mov	r0, r3
 8106f28:	f000 fae4 	bl	81074f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f30:	e019      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f32:	2300      	movs	r3, #0
 8106f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f36:	e016      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106f38:	4b0d      	ldr	r3, [pc, #52]	@ (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106f3a:	681b      	ldr	r3, [r3, #0]
 8106f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106f44:	d107      	bne.n	8106f56 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f46:	f107 0318 	add.w	r3, r7, #24
 8106f4a:	4618      	mov	r0, r3
 8106f4c:	f000 f82a 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106f50:	69fb      	ldr	r3, [r7, #28]
 8106f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f54:	e007      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f56:	2300      	movs	r3, #0
 8106f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f5a:	e004      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106f5c:	2300      	movs	r3, #0
 8106f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f60:	e001      	b.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8106f62:	2300      	movs	r3, #0
 8106f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8106f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8106f68:	4618      	mov	r0, r3
 8106f6a:	3740      	adds	r7, #64	@ 0x40
 8106f6c:	46bd      	mov	sp, r7
 8106f6e:	bd80      	pop	{r7, pc}
 8106f70:	58024400 	.word	0x58024400
 8106f74:	017d7840 	.word	0x017d7840

08106f78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106f78:	b580      	push	{r7, lr}
 8106f7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106f7c:	f7fe f814 	bl	8104fa8 <HAL_RCC_GetHCLKFreq>
 8106f80:	4602      	mov	r2, r0
 8106f82:	4b06      	ldr	r3, [pc, #24]	@ (8106f9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106f84:	6a1b      	ldr	r3, [r3, #32]
 8106f86:	091b      	lsrs	r3, r3, #4
 8106f88:	f003 0307 	and.w	r3, r3, #7
 8106f8c:	4904      	ldr	r1, [pc, #16]	@ (8106fa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106f8e:	5ccb      	ldrb	r3, [r1, r3]
 8106f90:	f003 031f 	and.w	r3, r3, #31
 8106f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106f98:	4618      	mov	r0, r3
 8106f9a:	bd80      	pop	{r7, pc}
 8106f9c:	58024400 	.word	0x58024400
 8106fa0:	0810a254 	.word	0x0810a254

08106fa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8106fa4:	b480      	push	{r7}
 8106fa6:	b089      	sub	sp, #36	@ 0x24
 8106fa8:	af00      	add	r7, sp, #0
 8106faa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106fac:	4ba1      	ldr	r3, [pc, #644]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106fb0:	f003 0303 	and.w	r3, r3, #3
 8106fb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8106fb6:	4b9f      	ldr	r3, [pc, #636]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106fba:	0b1b      	lsrs	r3, r3, #12
 8106fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106fc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106fc2:	4b9c      	ldr	r3, [pc, #624]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106fc6:	091b      	lsrs	r3, r3, #4
 8106fc8:	f003 0301 	and.w	r3, r3, #1
 8106fcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8106fce:	4b99      	ldr	r3, [pc, #612]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106fd2:	08db      	lsrs	r3, r3, #3
 8106fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106fd8:	693a      	ldr	r2, [r7, #16]
 8106fda:	fb02 f303 	mul.w	r3, r2, r3
 8106fde:	ee07 3a90 	vmov	s15, r3
 8106fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106fe6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106fea:	697b      	ldr	r3, [r7, #20]
 8106fec:	2b00      	cmp	r3, #0
 8106fee:	f000 8111 	beq.w	8107214 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106ff2:	69bb      	ldr	r3, [r7, #24]
 8106ff4:	2b02      	cmp	r3, #2
 8106ff6:	f000 8083 	beq.w	8107100 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106ffa:	69bb      	ldr	r3, [r7, #24]
 8106ffc:	2b02      	cmp	r3, #2
 8106ffe:	f200 80a1 	bhi.w	8107144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107002:	69bb      	ldr	r3, [r7, #24]
 8107004:	2b00      	cmp	r3, #0
 8107006:	d003      	beq.n	8107010 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107008:	69bb      	ldr	r3, [r7, #24]
 810700a:	2b01      	cmp	r3, #1
 810700c:	d056      	beq.n	81070bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810700e:	e099      	b.n	8107144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107010:	4b88      	ldr	r3, [pc, #544]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107012:	681b      	ldr	r3, [r3, #0]
 8107014:	f003 0320 	and.w	r3, r3, #32
 8107018:	2b00      	cmp	r3, #0
 810701a:	d02d      	beq.n	8107078 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810701c:	4b85      	ldr	r3, [pc, #532]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810701e:	681b      	ldr	r3, [r3, #0]
 8107020:	08db      	lsrs	r3, r3, #3
 8107022:	f003 0303 	and.w	r3, r3, #3
 8107026:	4a84      	ldr	r2, [pc, #528]	@ (8107238 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107028:	fa22 f303 	lsr.w	r3, r2, r3
 810702c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810702e:	68bb      	ldr	r3, [r7, #8]
 8107030:	ee07 3a90 	vmov	s15, r3
 8107034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107038:	697b      	ldr	r3, [r7, #20]
 810703a:	ee07 3a90 	vmov	s15, r3
 810703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107046:	4b7b      	ldr	r3, [pc, #492]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810704e:	ee07 3a90 	vmov	s15, r3
 8107052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107056:	ed97 6a03 	vldr	s12, [r7, #12]
 810705a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810705e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810706a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810706e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107072:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107076:	e087      	b.n	8107188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107078:	697b      	ldr	r3, [r7, #20]
 810707a:	ee07 3a90 	vmov	s15, r3
 810707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107082:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107240 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810708a:	4b6a      	ldr	r3, [pc, #424]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810708e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107092:	ee07 3a90 	vmov	s15, r3
 8107096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810709a:	ed97 6a03 	vldr	s12, [r7, #12]
 810709e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81070a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81070a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81070aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81070ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81070b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81070b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81070ba:	e065      	b.n	8107188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81070bc:	697b      	ldr	r3, [r7, #20]
 81070be:	ee07 3a90 	vmov	s15, r3
 81070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81070c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81070ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81070ce:	4b59      	ldr	r3, [pc, #356]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81070d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81070d6:	ee07 3a90 	vmov	s15, r3
 81070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81070de:	ed97 6a03 	vldr	s12, [r7, #12]
 81070e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81070e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81070ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81070ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81070f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81070fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81070fe:	e043      	b.n	8107188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107100:	697b      	ldr	r3, [r7, #20]
 8107102:	ee07 3a90 	vmov	s15, r3
 8107106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810710a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810710e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107112:	4b48      	ldr	r3, [pc, #288]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810711a:	ee07 3a90 	vmov	s15, r3
 810711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107122:	ed97 6a03 	vldr	s12, [r7, #12]
 8107126:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810712a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810712e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810713a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810713e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107142:	e021      	b.n	8107188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107144:	697b      	ldr	r3, [r7, #20]
 8107146:	ee07 3a90 	vmov	s15, r3
 810714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810714e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107156:	4b37      	ldr	r3, [pc, #220]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810715e:	ee07 3a90 	vmov	s15, r3
 8107162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107166:	ed97 6a03 	vldr	s12, [r7, #12]
 810716a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810723c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107186:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107188:	4b2a      	ldr	r3, [pc, #168]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810718c:	0a5b      	lsrs	r3, r3, #9
 810718e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107192:	ee07 3a90 	vmov	s15, r3
 8107196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810719a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810719e:	ee37 7a87 	vadd.f32	s14, s15, s14
 81071a2:	edd7 6a07 	vldr	s13, [r7, #28]
 81071a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81071aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81071ae:	ee17 2a90 	vmov	r2, s15
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81071b6:	4b1f      	ldr	r3, [pc, #124]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81071ba:	0c1b      	lsrs	r3, r3, #16
 81071bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81071c0:	ee07 3a90 	vmov	s15, r3
 81071c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81071cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81071d0:	edd7 6a07 	vldr	s13, [r7, #28]
 81071d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81071d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81071dc:	ee17 2a90 	vmov	r2, s15
 81071e0:	687b      	ldr	r3, [r7, #4]
 81071e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81071e4:	4b13      	ldr	r3, [pc, #76]	@ (8107234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81071e8:	0e1b      	lsrs	r3, r3, #24
 81071ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81071ee:	ee07 3a90 	vmov	s15, r3
 81071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81071fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81071fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8107202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810720a:	ee17 2a90 	vmov	r2, s15
 810720e:	687b      	ldr	r3, [r7, #4]
 8107210:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107212:	e008      	b.n	8107226 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	2200      	movs	r2, #0
 8107218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	2200      	movs	r2, #0
 810721e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	2200      	movs	r2, #0
 8107224:	609a      	str	r2, [r3, #8]
}
 8107226:	bf00      	nop
 8107228:	3724      	adds	r7, #36	@ 0x24
 810722a:	46bd      	mov	sp, r7
 810722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107230:	4770      	bx	lr
 8107232:	bf00      	nop
 8107234:	58024400 	.word	0x58024400
 8107238:	03d09000 	.word	0x03d09000
 810723c:	46000000 	.word	0x46000000
 8107240:	4c742400 	.word	0x4c742400
 8107244:	4a742400 	.word	0x4a742400
 8107248:	4bbebc20 	.word	0x4bbebc20

0810724c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810724c:	b480      	push	{r7}
 810724e:	b089      	sub	sp, #36	@ 0x24
 8107250:	af00      	add	r7, sp, #0
 8107252:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107254:	4ba1      	ldr	r3, [pc, #644]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107258:	f003 0303 	and.w	r3, r3, #3
 810725c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810725e:	4b9f      	ldr	r3, [pc, #636]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107262:	0d1b      	lsrs	r3, r3, #20
 8107264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107268:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810726a:	4b9c      	ldr	r3, [pc, #624]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810726c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810726e:	0a1b      	lsrs	r3, r3, #8
 8107270:	f003 0301 	and.w	r3, r3, #1
 8107274:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107276:	4b99      	ldr	r3, [pc, #612]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810727a:	08db      	lsrs	r3, r3, #3
 810727c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107280:	693a      	ldr	r2, [r7, #16]
 8107282:	fb02 f303 	mul.w	r3, r2, r3
 8107286:	ee07 3a90 	vmov	s15, r3
 810728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810728e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107292:	697b      	ldr	r3, [r7, #20]
 8107294:	2b00      	cmp	r3, #0
 8107296:	f000 8111 	beq.w	81074bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810729a:	69bb      	ldr	r3, [r7, #24]
 810729c:	2b02      	cmp	r3, #2
 810729e:	f000 8083 	beq.w	81073a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81072a2:	69bb      	ldr	r3, [r7, #24]
 81072a4:	2b02      	cmp	r3, #2
 81072a6:	f200 80a1 	bhi.w	81073ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81072aa:	69bb      	ldr	r3, [r7, #24]
 81072ac:	2b00      	cmp	r3, #0
 81072ae:	d003      	beq.n	81072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81072b0:	69bb      	ldr	r3, [r7, #24]
 81072b2:	2b01      	cmp	r3, #1
 81072b4:	d056      	beq.n	8107364 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81072b6:	e099      	b.n	81073ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81072b8:	4b88      	ldr	r3, [pc, #544]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81072ba:	681b      	ldr	r3, [r3, #0]
 81072bc:	f003 0320 	and.w	r3, r3, #32
 81072c0:	2b00      	cmp	r3, #0
 81072c2:	d02d      	beq.n	8107320 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81072c4:	4b85      	ldr	r3, [pc, #532]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81072c6:	681b      	ldr	r3, [r3, #0]
 81072c8:	08db      	lsrs	r3, r3, #3
 81072ca:	f003 0303 	and.w	r3, r3, #3
 81072ce:	4a84      	ldr	r2, [pc, #528]	@ (81074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81072d0:	fa22 f303 	lsr.w	r3, r2, r3
 81072d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81072d6:	68bb      	ldr	r3, [r7, #8]
 81072d8:	ee07 3a90 	vmov	s15, r3
 81072dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072e0:	697b      	ldr	r3, [r7, #20]
 81072e2:	ee07 3a90 	vmov	s15, r3
 81072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81072ee:	4b7b      	ldr	r3, [pc, #492]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81072f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81072f6:	ee07 3a90 	vmov	s15, r3
 81072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8107302:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810730e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107316:	ee67 7a27 	vmul.f32	s15, s14, s15
 810731a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810731e:	e087      	b.n	8107430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107320:	697b      	ldr	r3, [r7, #20]
 8107322:	ee07 3a90 	vmov	s15, r3
 8107326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810732a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810732e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107332:	4b6a      	ldr	r3, [pc, #424]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810733a:	ee07 3a90 	vmov	s15, r3
 810733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107342:	ed97 6a03 	vldr	s12, [r7, #12]
 8107346:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810734a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810734e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810735a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810735e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107362:	e065      	b.n	8107430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107364:	697b      	ldr	r3, [r7, #20]
 8107366:	ee07 3a90 	vmov	s15, r3
 810736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810736e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81074ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107376:	4b59      	ldr	r3, [pc, #356]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810737a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810737e:	ee07 3a90 	vmov	s15, r3
 8107382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107386:	ed97 6a03 	vldr	s12, [r7, #12]
 810738a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810738e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810739a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810739e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81073a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81073a6:	e043      	b.n	8107430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81073a8:	697b      	ldr	r3, [r7, #20]
 81073aa:	ee07 3a90 	vmov	s15, r3
 81073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81074f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81073b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81073ba:	4b48      	ldr	r3, [pc, #288]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81073bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81073be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81073c2:	ee07 3a90 	vmov	s15, r3
 81073c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81073ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81073d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81073d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81073da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81073de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81073e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81073e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81073ea:	e021      	b.n	8107430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81073ec:	697b      	ldr	r3, [r7, #20]
 81073ee:	ee07 3a90 	vmov	s15, r3
 81073f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81074ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81073fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81073fe:	4b37      	ldr	r3, [pc, #220]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107406:	ee07 3a90 	vmov	s15, r3
 810740a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810740e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107412:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81074e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810741a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810741e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107426:	ee67 7a27 	vmul.f32	s15, s14, s15
 810742a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810742e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8107430:	4b2a      	ldr	r3, [pc, #168]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107434:	0a5b      	lsrs	r3, r3, #9
 8107436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810743a:	ee07 3a90 	vmov	s15, r3
 810743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107446:	ee37 7a87 	vadd.f32	s14, s15, s14
 810744a:	edd7 6a07 	vldr	s13, [r7, #28]
 810744e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107456:	ee17 2a90 	vmov	r2, s15
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810745e:	4b1f      	ldr	r3, [pc, #124]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107462:	0c1b      	lsrs	r3, r3, #16
 8107464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107468:	ee07 3a90 	vmov	s15, r3
 810746c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107470:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107478:	edd7 6a07 	vldr	s13, [r7, #28]
 810747c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107484:	ee17 2a90 	vmov	r2, s15
 8107488:	687b      	ldr	r3, [r7, #4]
 810748a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810748c:	4b13      	ldr	r3, [pc, #76]	@ (81074dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810748e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107490:	0e1b      	lsrs	r3, r3, #24
 8107492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107496:	ee07 3a90 	vmov	s15, r3
 810749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810749e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81074a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81074a6:	edd7 6a07 	vldr	s13, [r7, #28]
 81074aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81074ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81074b2:	ee17 2a90 	vmov	r2, s15
 81074b6:	687b      	ldr	r3, [r7, #4]
 81074b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81074ba:	e008      	b.n	81074ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	2200      	movs	r2, #0
 81074c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	2200      	movs	r2, #0
 81074c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	2200      	movs	r2, #0
 81074cc:	609a      	str	r2, [r3, #8]
}
 81074ce:	bf00      	nop
 81074d0:	3724      	adds	r7, #36	@ 0x24
 81074d2:	46bd      	mov	sp, r7
 81074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074d8:	4770      	bx	lr
 81074da:	bf00      	nop
 81074dc:	58024400 	.word	0x58024400
 81074e0:	03d09000 	.word	0x03d09000
 81074e4:	46000000 	.word	0x46000000
 81074e8:	4c742400 	.word	0x4c742400
 81074ec:	4a742400 	.word	0x4a742400
 81074f0:	4bbebc20 	.word	0x4bbebc20

081074f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 81074f4:	b480      	push	{r7}
 81074f6:	b089      	sub	sp, #36	@ 0x24
 81074f8:	af00      	add	r7, sp, #0
 81074fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81074fc:	4ba0      	ldr	r3, [pc, #640]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81074fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107500:	f003 0303 	and.w	r3, r3, #3
 8107504:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8107506:	4b9e      	ldr	r3, [pc, #632]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810750a:	091b      	lsrs	r3, r3, #4
 810750c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107510:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107512:	4b9b      	ldr	r3, [pc, #620]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107516:	f003 0301 	and.w	r3, r3, #1
 810751a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810751c:	4b98      	ldr	r3, [pc, #608]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810751e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107520:	08db      	lsrs	r3, r3, #3
 8107522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107526:	693a      	ldr	r2, [r7, #16]
 8107528:	fb02 f303 	mul.w	r3, r2, r3
 810752c:	ee07 3a90 	vmov	s15, r3
 8107530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107534:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107538:	697b      	ldr	r3, [r7, #20]
 810753a:	2b00      	cmp	r3, #0
 810753c:	f000 8111 	beq.w	8107762 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107540:	69bb      	ldr	r3, [r7, #24]
 8107542:	2b02      	cmp	r3, #2
 8107544:	f000 8083 	beq.w	810764e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107548:	69bb      	ldr	r3, [r7, #24]
 810754a:	2b02      	cmp	r3, #2
 810754c:	f200 80a1 	bhi.w	8107692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8107550:	69bb      	ldr	r3, [r7, #24]
 8107552:	2b00      	cmp	r3, #0
 8107554:	d003      	beq.n	810755e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8107556:	69bb      	ldr	r3, [r7, #24]
 8107558:	2b01      	cmp	r3, #1
 810755a:	d056      	beq.n	810760a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810755c:	e099      	b.n	8107692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810755e:	4b88      	ldr	r3, [pc, #544]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107560:	681b      	ldr	r3, [r3, #0]
 8107562:	f003 0320 	and.w	r3, r3, #32
 8107566:	2b00      	cmp	r3, #0
 8107568:	d02d      	beq.n	81075c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810756a:	4b85      	ldr	r3, [pc, #532]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810756c:	681b      	ldr	r3, [r3, #0]
 810756e:	08db      	lsrs	r3, r3, #3
 8107570:	f003 0303 	and.w	r3, r3, #3
 8107574:	4a83      	ldr	r2, [pc, #524]	@ (8107784 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8107576:	fa22 f303 	lsr.w	r3, r2, r3
 810757a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810757c:	68bb      	ldr	r3, [r7, #8]
 810757e:	ee07 3a90 	vmov	s15, r3
 8107582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107586:	697b      	ldr	r3, [r7, #20]
 8107588:	ee07 3a90 	vmov	s15, r3
 810758c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107594:	4b7a      	ldr	r3, [pc, #488]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810759c:	ee07 3a90 	vmov	s15, r3
 81075a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81075a4:	ed97 6a03 	vldr	s12, [r7, #12]
 81075a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8107788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81075ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81075b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81075b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81075b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81075bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81075c4:	e087      	b.n	81076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81075c6:	697b      	ldr	r3, [r7, #20]
 81075c8:	ee07 3a90 	vmov	s15, r3
 81075cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810778c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81075d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81075d8:	4b69      	ldr	r3, [pc, #420]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81075da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81075dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81075e0:	ee07 3a90 	vmov	s15, r3
 81075e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81075e8:	ed97 6a03 	vldr	s12, [r7, #12]
 81075ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8107788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81075f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81075f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81075f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81075fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107604:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107608:	e065      	b.n	81076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810760a:	697b      	ldr	r3, [r7, #20]
 810760c:	ee07 3a90 	vmov	s15, r3
 8107610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107614:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8107790 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810761c:	4b58      	ldr	r3, [pc, #352]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810761e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107624:	ee07 3a90 	vmov	s15, r3
 8107628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810762c:	ed97 6a03 	vldr	s12, [r7, #12]
 8107630:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8107788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810763c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810764c:	e043      	b.n	81076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810764e:	697b      	ldr	r3, [r7, #20]
 8107650:	ee07 3a90 	vmov	s15, r3
 8107654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107658:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8107794 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810765c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107660:	4b47      	ldr	r3, [pc, #284]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107668:	ee07 3a90 	vmov	s15, r3
 810766c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107670:	ed97 6a03 	vldr	s12, [r7, #12]
 8107674:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8107788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810767c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107688:	ee67 7a27 	vmul.f32	s15, s14, s15
 810768c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107690:	e021      	b.n	81076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107692:	697b      	ldr	r3, [r7, #20]
 8107694:	ee07 3a90 	vmov	s15, r3
 8107698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810769c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810778c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81076a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81076a4:	4b36      	ldr	r3, [pc, #216]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81076a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81076a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81076ac:	ee07 3a90 	vmov	s15, r3
 81076b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076b4:	ed97 6a03 	vldr	s12, [r7, #12]
 81076b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8107788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81076bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81076c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81076c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81076c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81076cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81076d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81076d6:	4b2a      	ldr	r3, [pc, #168]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81076d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81076da:	0a5b      	lsrs	r3, r3, #9
 81076dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81076e0:	ee07 3a90 	vmov	s15, r3
 81076e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81076ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 81076f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81076f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81076f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81076fc:	ee17 2a90 	vmov	r2, s15
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8107704:	4b1e      	ldr	r3, [pc, #120]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107708:	0c1b      	lsrs	r3, r3, #16
 810770a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810770e:	ee07 3a90 	vmov	s15, r3
 8107712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107716:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810771a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810771e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810772a:	ee17 2a90 	vmov	r2, s15
 810772e:	687b      	ldr	r3, [r7, #4]
 8107730:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8107732:	4b13      	ldr	r3, [pc, #76]	@ (8107780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107736:	0e1b      	lsrs	r3, r3, #24
 8107738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810773c:	ee07 3a90 	vmov	s15, r3
 8107740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107744:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107748:	ee37 7a87 	vadd.f32	s14, s15, s14
 810774c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107758:	ee17 2a90 	vmov	r2, s15
 810775c:	687b      	ldr	r3, [r7, #4]
 810775e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8107760:	e008      	b.n	8107774 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8107762:	687b      	ldr	r3, [r7, #4]
 8107764:	2200      	movs	r2, #0
 8107766:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	2200      	movs	r2, #0
 810776c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810776e:	687b      	ldr	r3, [r7, #4]
 8107770:	2200      	movs	r2, #0
 8107772:	609a      	str	r2, [r3, #8]
}
 8107774:	bf00      	nop
 8107776:	3724      	adds	r7, #36	@ 0x24
 8107778:	46bd      	mov	sp, r7
 810777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810777e:	4770      	bx	lr
 8107780:	58024400 	.word	0x58024400
 8107784:	03d09000 	.word	0x03d09000
 8107788:	46000000 	.word	0x46000000
 810778c:	4c742400 	.word	0x4c742400
 8107790:	4a742400 	.word	0x4a742400
 8107794:	4bbebc20 	.word	0x4bbebc20

08107798 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107798:	b580      	push	{r7, lr}
 810779a:	b084      	sub	sp, #16
 810779c:	af00      	add	r7, sp, #0
 810779e:	6078      	str	r0, [r7, #4]
 81077a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81077a2:	2300      	movs	r3, #0
 81077a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81077a6:	4b54      	ldr	r3, [pc, #336]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81077a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81077aa:	f003 0303 	and.w	r3, r3, #3
 81077ae:	2b03      	cmp	r3, #3
 81077b0:	d101      	bne.n	81077b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81077b2:	2301      	movs	r3, #1
 81077b4:	e09b      	b.n	81078ee <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81077b6:	4b50      	ldr	r3, [pc, #320]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81077b8:	681b      	ldr	r3, [r3, #0]
 81077ba:	4a4f      	ldr	r2, [pc, #316]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81077bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81077c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81077c2:	f7fa fbd1 	bl	8101f68 <HAL_GetTick>
 81077c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81077c8:	e008      	b.n	81077dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81077ca:	f7fa fbcd 	bl	8101f68 <HAL_GetTick>
 81077ce:	4602      	mov	r2, r0
 81077d0:	68bb      	ldr	r3, [r7, #8]
 81077d2:	1ad3      	subs	r3, r2, r3
 81077d4:	2b02      	cmp	r3, #2
 81077d6:	d901      	bls.n	81077dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81077d8:	2303      	movs	r3, #3
 81077da:	e088      	b.n	81078ee <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81077dc:	4b46      	ldr	r3, [pc, #280]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81077de:	681b      	ldr	r3, [r3, #0]
 81077e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81077e4:	2b00      	cmp	r3, #0
 81077e6:	d1f0      	bne.n	81077ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81077e8:	4b43      	ldr	r3, [pc, #268]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81077ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81077ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81077f0:	687b      	ldr	r3, [r7, #4]
 81077f2:	681b      	ldr	r3, [r3, #0]
 81077f4:	031b      	lsls	r3, r3, #12
 81077f6:	4940      	ldr	r1, [pc, #256]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81077f8:	4313      	orrs	r3, r2
 81077fa:	628b      	str	r3, [r1, #40]	@ 0x28
 81077fc:	687b      	ldr	r3, [r7, #4]
 81077fe:	685b      	ldr	r3, [r3, #4]
 8107800:	3b01      	subs	r3, #1
 8107802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107806:	687b      	ldr	r3, [r7, #4]
 8107808:	689b      	ldr	r3, [r3, #8]
 810780a:	3b01      	subs	r3, #1
 810780c:	025b      	lsls	r3, r3, #9
 810780e:	b29b      	uxth	r3, r3
 8107810:	431a      	orrs	r2, r3
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	68db      	ldr	r3, [r3, #12]
 8107816:	3b01      	subs	r3, #1
 8107818:	041b      	lsls	r3, r3, #16
 810781a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810781e:	431a      	orrs	r2, r3
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	691b      	ldr	r3, [r3, #16]
 8107824:	3b01      	subs	r3, #1
 8107826:	061b      	lsls	r3, r3, #24
 8107828:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810782c:	4932      	ldr	r1, [pc, #200]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 810782e:	4313      	orrs	r3, r2
 8107830:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107832:	4b31      	ldr	r3, [pc, #196]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107836:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810783a:	687b      	ldr	r3, [r7, #4]
 810783c:	695b      	ldr	r3, [r3, #20]
 810783e:	492e      	ldr	r1, [pc, #184]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107840:	4313      	orrs	r3, r2
 8107842:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107844:	4b2c      	ldr	r3, [pc, #176]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107848:	f023 0220 	bic.w	r2, r3, #32
 810784c:	687b      	ldr	r3, [r7, #4]
 810784e:	699b      	ldr	r3, [r3, #24]
 8107850:	4929      	ldr	r1, [pc, #164]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107852:	4313      	orrs	r3, r2
 8107854:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107856:	4b28      	ldr	r3, [pc, #160]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810785a:	4a27      	ldr	r2, [pc, #156]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 810785c:	f023 0310 	bic.w	r3, r3, #16
 8107860:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107862:	4b25      	ldr	r3, [pc, #148]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810786a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810786e:	687a      	ldr	r2, [r7, #4]
 8107870:	69d2      	ldr	r2, [r2, #28]
 8107872:	00d2      	lsls	r2, r2, #3
 8107874:	4920      	ldr	r1, [pc, #128]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107876:	4313      	orrs	r3, r2
 8107878:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810787a:	4b1f      	ldr	r3, [pc, #124]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 810787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810787e:	4a1e      	ldr	r2, [pc, #120]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107880:	f043 0310 	orr.w	r3, r3, #16
 8107884:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107886:	683b      	ldr	r3, [r7, #0]
 8107888:	2b00      	cmp	r3, #0
 810788a:	d106      	bne.n	810789a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810788c:	4b1a      	ldr	r3, [pc, #104]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 810788e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107890:	4a19      	ldr	r2, [pc, #100]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 8107892:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8107896:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107898:	e00f      	b.n	81078ba <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810789a:	683b      	ldr	r3, [r7, #0]
 810789c:	2b01      	cmp	r3, #1
 810789e:	d106      	bne.n	81078ae <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81078a0:	4b15      	ldr	r3, [pc, #84]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078a4:	4a14      	ldr	r2, [pc, #80]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81078a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81078aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81078ac:	e005      	b.n	81078ba <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81078ae:	4b12      	ldr	r3, [pc, #72]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078b2:	4a11      	ldr	r2, [pc, #68]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81078b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81078b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81078ba:	4b0f      	ldr	r3, [pc, #60]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81078bc:	681b      	ldr	r3, [r3, #0]
 81078be:	4a0e      	ldr	r2, [pc, #56]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81078c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81078c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81078c6:	f7fa fb4f 	bl	8101f68 <HAL_GetTick>
 81078ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81078cc:	e008      	b.n	81078e0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81078ce:	f7fa fb4b 	bl	8101f68 <HAL_GetTick>
 81078d2:	4602      	mov	r2, r0
 81078d4:	68bb      	ldr	r3, [r7, #8]
 81078d6:	1ad3      	subs	r3, r2, r3
 81078d8:	2b02      	cmp	r3, #2
 81078da:	d901      	bls.n	81078e0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81078dc:	2303      	movs	r3, #3
 81078de:	e006      	b.n	81078ee <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81078e0:	4b05      	ldr	r3, [pc, #20]	@ (81078f8 <RCCEx_PLL2_Config+0x160>)
 81078e2:	681b      	ldr	r3, [r3, #0]
 81078e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81078e8:	2b00      	cmp	r3, #0
 81078ea:	d0f0      	beq.n	81078ce <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 81078ee:	4618      	mov	r0, r3
 81078f0:	3710      	adds	r7, #16
 81078f2:	46bd      	mov	sp, r7
 81078f4:	bd80      	pop	{r7, pc}
 81078f6:	bf00      	nop
 81078f8:	58024400 	.word	0x58024400

081078fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81078fc:	b580      	push	{r7, lr}
 81078fe:	b084      	sub	sp, #16
 8107900:	af00      	add	r7, sp, #0
 8107902:	6078      	str	r0, [r7, #4]
 8107904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107906:	2300      	movs	r3, #0
 8107908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810790a:	4b54      	ldr	r3, [pc, #336]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 810790c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810790e:	f003 0303 	and.w	r3, r3, #3
 8107912:	2b03      	cmp	r3, #3
 8107914:	d101      	bne.n	810791a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107916:	2301      	movs	r3, #1
 8107918:	e09b      	b.n	8107a52 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810791a:	4b50      	ldr	r3, [pc, #320]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 810791c:	681b      	ldr	r3, [r3, #0]
 810791e:	4a4f      	ldr	r2, [pc, #316]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8107924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107926:	f7fa fb1f 	bl	8101f68 <HAL_GetTick>
 810792a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810792c:	e008      	b.n	8107940 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810792e:	f7fa fb1b 	bl	8101f68 <HAL_GetTick>
 8107932:	4602      	mov	r2, r0
 8107934:	68bb      	ldr	r3, [r7, #8]
 8107936:	1ad3      	subs	r3, r2, r3
 8107938:	2b02      	cmp	r3, #2
 810793a:	d901      	bls.n	8107940 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810793c:	2303      	movs	r3, #3
 810793e:	e088      	b.n	8107a52 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107940:	4b46      	ldr	r3, [pc, #280]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107942:	681b      	ldr	r3, [r3, #0]
 8107944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107948:	2b00      	cmp	r3, #0
 810794a:	d1f0      	bne.n	810792e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810794c:	4b43      	ldr	r3, [pc, #268]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 810794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107950:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	681b      	ldr	r3, [r3, #0]
 8107958:	051b      	lsls	r3, r3, #20
 810795a:	4940      	ldr	r1, [pc, #256]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 810795c:	4313      	orrs	r3, r2
 810795e:	628b      	str	r3, [r1, #40]	@ 0x28
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	685b      	ldr	r3, [r3, #4]
 8107964:	3b01      	subs	r3, #1
 8107966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	689b      	ldr	r3, [r3, #8]
 810796e:	3b01      	subs	r3, #1
 8107970:	025b      	lsls	r3, r3, #9
 8107972:	b29b      	uxth	r3, r3
 8107974:	431a      	orrs	r2, r3
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	68db      	ldr	r3, [r3, #12]
 810797a:	3b01      	subs	r3, #1
 810797c:	041b      	lsls	r3, r3, #16
 810797e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8107982:	431a      	orrs	r2, r3
 8107984:	687b      	ldr	r3, [r7, #4]
 8107986:	691b      	ldr	r3, [r3, #16]
 8107988:	3b01      	subs	r3, #1
 810798a:	061b      	lsls	r3, r3, #24
 810798c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8107990:	4932      	ldr	r1, [pc, #200]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107992:	4313      	orrs	r3, r2
 8107994:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107996:	4b31      	ldr	r3, [pc, #196]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810799a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	695b      	ldr	r3, [r3, #20]
 81079a2:	492e      	ldr	r1, [pc, #184]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079a4:	4313      	orrs	r3, r2
 81079a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81079a8:	4b2c      	ldr	r3, [pc, #176]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	699b      	ldr	r3, [r3, #24]
 81079b4:	4929      	ldr	r1, [pc, #164]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079b6:	4313      	orrs	r3, r2
 81079b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81079ba:	4b28      	ldr	r3, [pc, #160]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079be:	4a27      	ldr	r2, [pc, #156]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81079c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81079c6:	4b25      	ldr	r3, [pc, #148]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81079ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81079ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81079d2:	687a      	ldr	r2, [r7, #4]
 81079d4:	69d2      	ldr	r2, [r2, #28]
 81079d6:	00d2      	lsls	r2, r2, #3
 81079d8:	4920      	ldr	r1, [pc, #128]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079da:	4313      	orrs	r3, r2
 81079dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81079de:	4b1f      	ldr	r3, [pc, #124]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079e2:	4a1e      	ldr	r2, [pc, #120]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81079e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81079ea:	683b      	ldr	r3, [r7, #0]
 81079ec:	2b00      	cmp	r3, #0
 81079ee:	d106      	bne.n	81079fe <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81079f0:	4b1a      	ldr	r3, [pc, #104]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079f4:	4a19      	ldr	r2, [pc, #100]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 81079f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81079fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81079fc:	e00f      	b.n	8107a1e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81079fe:	683b      	ldr	r3, [r7, #0]
 8107a00:	2b01      	cmp	r3, #1
 8107a02:	d106      	bne.n	8107a12 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107a04:	4b15      	ldr	r3, [pc, #84]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107a08:	4a14      	ldr	r2, [pc, #80]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107a0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8107a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107a10:	e005      	b.n	8107a1e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107a12:	4b12      	ldr	r3, [pc, #72]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107a16:	4a11      	ldr	r2, [pc, #68]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107a18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8107a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	4a0e      	ldr	r2, [pc, #56]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8107a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107a2a:	f7fa fa9d 	bl	8101f68 <HAL_GetTick>
 8107a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107a30:	e008      	b.n	8107a44 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107a32:	f7fa fa99 	bl	8101f68 <HAL_GetTick>
 8107a36:	4602      	mov	r2, r0
 8107a38:	68bb      	ldr	r3, [r7, #8]
 8107a3a:	1ad3      	subs	r3, r2, r3
 8107a3c:	2b02      	cmp	r3, #2
 8107a3e:	d901      	bls.n	8107a44 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107a40:	2303      	movs	r3, #3
 8107a42:	e006      	b.n	8107a52 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107a44:	4b05      	ldr	r3, [pc, #20]	@ (8107a5c <RCCEx_PLL3_Config+0x160>)
 8107a46:	681b      	ldr	r3, [r3, #0]
 8107a48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107a4c:	2b00      	cmp	r3, #0
 8107a4e:	d0f0      	beq.n	8107a32 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8107a52:	4618      	mov	r0, r3
 8107a54:	3710      	adds	r7, #16
 8107a56:	46bd      	mov	sp, r7
 8107a58:	bd80      	pop	{r7, pc}
 8107a5a:	bf00      	nop
 8107a5c:	58024400 	.word	0x58024400

08107a60 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8107a60:	b580      	push	{r7, lr}
 8107a62:	b08a      	sub	sp, #40	@ 0x28
 8107a64:	af00      	add	r7, sp, #0
 8107a66:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	2b00      	cmp	r3, #0
 8107a6c:	d101      	bne.n	8107a72 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8107a6e:	2301      	movs	r3, #1
 8107a70:	e290      	b.n	8107f94 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8107a72:	f7fa faa9 	bl	8101fc8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8107a76:	687b      	ldr	r3, [r7, #4]
 8107a78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8107a7c:	2b01      	cmp	r3, #1
 8107a7e:	d113      	bne.n	8107aa8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8107a80:	687b      	ldr	r3, [r7, #4]
 8107a82:	681b      	ldr	r3, [r3, #0]
 8107a84:	4a96      	ldr	r2, [pc, #600]	@ (8107ce0 <HAL_SAI_Init+0x280>)
 8107a86:	4293      	cmp	r3, r2
 8107a88:	d004      	beq.n	8107a94 <HAL_SAI_Init+0x34>
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	681b      	ldr	r3, [r3, #0]
 8107a8e:	4a95      	ldr	r2, [pc, #596]	@ (8107ce4 <HAL_SAI_Init+0x284>)
 8107a90:	4293      	cmp	r3, r2
 8107a92:	d107      	bne.n	8107aa4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8107a94:	687b      	ldr	r3, [r7, #4]
 8107a96:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8107a98:	2b01      	cmp	r3, #1
 8107a9a:	d103      	bne.n	8107aa4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8107a9c:	687b      	ldr	r3, [r7, #4]
 8107a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8107aa0:	2b00      	cmp	r3, #0
 8107aa2:	d001      	beq.n	8107aa8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8107aa4:	2301      	movs	r3, #1
 8107aa6:	e275      	b.n	8107f94 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	681b      	ldr	r3, [r3, #0]
 8107aac:	4a8c      	ldr	r2, [pc, #560]	@ (8107ce0 <HAL_SAI_Init+0x280>)
 8107aae:	4293      	cmp	r3, r2
 8107ab0:	d004      	beq.n	8107abc <HAL_SAI_Init+0x5c>
 8107ab2:	687b      	ldr	r3, [r7, #4]
 8107ab4:	681b      	ldr	r3, [r3, #0]
 8107ab6:	4a8c      	ldr	r2, [pc, #560]	@ (8107ce8 <HAL_SAI_Init+0x288>)
 8107ab8:	4293      	cmp	r3, r2
 8107aba:	d102      	bne.n	8107ac2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8107abc:	4b8b      	ldr	r3, [pc, #556]	@ (8107cec <HAL_SAI_Init+0x28c>)
 8107abe:	61bb      	str	r3, [r7, #24]
 8107ac0:	e028      	b.n	8107b14 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	681b      	ldr	r3, [r3, #0]
 8107ac6:	4a8a      	ldr	r2, [pc, #552]	@ (8107cf0 <HAL_SAI_Init+0x290>)
 8107ac8:	4293      	cmp	r3, r2
 8107aca:	d004      	beq.n	8107ad6 <HAL_SAI_Init+0x76>
 8107acc:	687b      	ldr	r3, [r7, #4]
 8107ace:	681b      	ldr	r3, [r3, #0]
 8107ad0:	4a88      	ldr	r2, [pc, #544]	@ (8107cf4 <HAL_SAI_Init+0x294>)
 8107ad2:	4293      	cmp	r3, r2
 8107ad4:	d102      	bne.n	8107adc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8107ad6:	4b88      	ldr	r3, [pc, #544]	@ (8107cf8 <HAL_SAI_Init+0x298>)
 8107ad8:	61bb      	str	r3, [r7, #24]
 8107ada:	e01b      	b.n	8107b14 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	681b      	ldr	r3, [r3, #0]
 8107ae0:	4a86      	ldr	r2, [pc, #536]	@ (8107cfc <HAL_SAI_Init+0x29c>)
 8107ae2:	4293      	cmp	r3, r2
 8107ae4:	d004      	beq.n	8107af0 <HAL_SAI_Init+0x90>
 8107ae6:	687b      	ldr	r3, [r7, #4]
 8107ae8:	681b      	ldr	r3, [r3, #0]
 8107aea:	4a85      	ldr	r2, [pc, #532]	@ (8107d00 <HAL_SAI_Init+0x2a0>)
 8107aec:	4293      	cmp	r3, r2
 8107aee:	d102      	bne.n	8107af6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8107af0:	4b84      	ldr	r3, [pc, #528]	@ (8107d04 <HAL_SAI_Init+0x2a4>)
 8107af2:	61bb      	str	r3, [r7, #24]
 8107af4:	e00e      	b.n	8107b14 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	681b      	ldr	r3, [r3, #0]
 8107afa:	4a7a      	ldr	r2, [pc, #488]	@ (8107ce4 <HAL_SAI_Init+0x284>)
 8107afc:	4293      	cmp	r3, r2
 8107afe:	d004      	beq.n	8107b0a <HAL_SAI_Init+0xaa>
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	681b      	ldr	r3, [r3, #0]
 8107b04:	4a80      	ldr	r2, [pc, #512]	@ (8107d08 <HAL_SAI_Init+0x2a8>)
 8107b06:	4293      	cmp	r3, r2
 8107b08:	d102      	bne.n	8107b10 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8107b0a:	4b80      	ldr	r3, [pc, #512]	@ (8107d0c <HAL_SAI_Init+0x2ac>)
 8107b0c:	61bb      	str	r3, [r7, #24]
 8107b0e:	e001      	b.n	8107b14 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8107b10:	2301      	movs	r3, #1
 8107b12:	e23f      	b.n	8107f94 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8107b1a:	b2db      	uxtb	r3, r3
 8107b1c:	2b00      	cmp	r3, #0
 8107b1e:	d106      	bne.n	8107b2e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8107b20:	687b      	ldr	r3, [r7, #4]
 8107b22:	2200      	movs	r2, #0
 8107b24:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8107b28:	6878      	ldr	r0, [r7, #4]
 8107b2a:	f7fa f875 	bl	8101c18 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8107b2e:	6878      	ldr	r0, [r7, #4]
 8107b30:	f000 fa40 	bl	8107fb4 <SAI_Disable>
 8107b34:	4603      	mov	r3, r0
 8107b36:	2b00      	cmp	r3, #0
 8107b38:	d001      	beq.n	8107b3e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8107b3a:	2301      	movs	r3, #1
 8107b3c:	e22a      	b.n	8107f94 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	2202      	movs	r2, #2
 8107b42:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8107b46:	687b      	ldr	r3, [r7, #4]
 8107b48:	68db      	ldr	r3, [r3, #12]
 8107b4a:	2b02      	cmp	r3, #2
 8107b4c:	d00c      	beq.n	8107b68 <HAL_SAI_Init+0x108>
 8107b4e:	2b02      	cmp	r3, #2
 8107b50:	d80d      	bhi.n	8107b6e <HAL_SAI_Init+0x10e>
 8107b52:	2b00      	cmp	r3, #0
 8107b54:	d002      	beq.n	8107b5c <HAL_SAI_Init+0xfc>
 8107b56:	2b01      	cmp	r3, #1
 8107b58:	d003      	beq.n	8107b62 <HAL_SAI_Init+0x102>
 8107b5a:	e008      	b.n	8107b6e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8107b5c:	2300      	movs	r3, #0
 8107b5e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107b60:	e008      	b.n	8107b74 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8107b62:	2310      	movs	r3, #16
 8107b64:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107b66:	e005      	b.n	8107b74 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8107b68:	2320      	movs	r3, #32
 8107b6a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107b6c:	e002      	b.n	8107b74 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8107b6e:	2300      	movs	r3, #0
 8107b70:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107b72:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8107b74:	687b      	ldr	r3, [r7, #4]
 8107b76:	689b      	ldr	r3, [r3, #8]
 8107b78:	2b05      	cmp	r3, #5
 8107b7a:	d832      	bhi.n	8107be2 <HAL_SAI_Init+0x182>
 8107b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8107b84 <HAL_SAI_Init+0x124>)
 8107b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b82:	bf00      	nop
 8107b84:	08107b9d 	.word	0x08107b9d
 8107b88:	08107ba3 	.word	0x08107ba3
 8107b8c:	08107bab 	.word	0x08107bab
 8107b90:	08107bb3 	.word	0x08107bb3
 8107b94:	08107bc3 	.word	0x08107bc3
 8107b98:	08107bd3 	.word	0x08107bd3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8107b9c:	2300      	movs	r3, #0
 8107b9e:	61fb      	str	r3, [r7, #28]
      break;
 8107ba0:	e022      	b.n	8107be8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8107ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8107ba6:	61fb      	str	r3, [r7, #28]
      break;
 8107ba8:	e01e      	b.n	8107be8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107baa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107bae:	61fb      	str	r3, [r7, #28]
      break;
 8107bb0:	e01a      	b.n	8107be8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107bb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107bb6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8107bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107bba:	f043 0301 	orr.w	r3, r3, #1
 8107bbe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107bc0:	e012      	b.n	8107be8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107bc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107bc6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8107bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107bca:	f043 0302 	orr.w	r3, r3, #2
 8107bce:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107bd0:	e00a      	b.n	8107be8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107bd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107bd6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8107bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107bda:	f043 0303 	orr.w	r3, r3, #3
 8107bde:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107be0:	e002      	b.n	8107be8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8107be2:	2300      	movs	r3, #0
 8107be4:	61fb      	str	r3, [r7, #28]
      break;
 8107be6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8107be8:	69bb      	ldr	r3, [r7, #24]
 8107bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107bec:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	6a1b      	ldr	r3, [r3, #32]
 8107bf2:	2b00      	cmp	r3, #0
 8107bf4:	f000 80c5 	beq.w	8107d82 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8107bf8:	2300      	movs	r3, #0
 8107bfa:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	681b      	ldr	r3, [r3, #0]
 8107c00:	4a37      	ldr	r2, [pc, #220]	@ (8107ce0 <HAL_SAI_Init+0x280>)
 8107c02:	4293      	cmp	r3, r2
 8107c04:	d004      	beq.n	8107c10 <HAL_SAI_Init+0x1b0>
 8107c06:	687b      	ldr	r3, [r7, #4]
 8107c08:	681b      	ldr	r3, [r3, #0]
 8107c0a:	4a37      	ldr	r2, [pc, #220]	@ (8107ce8 <HAL_SAI_Init+0x288>)
 8107c0c:	4293      	cmp	r3, r2
 8107c0e:	d106      	bne.n	8107c1e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8107c10:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8107c14:	f04f 0100 	mov.w	r1, #0
 8107c18:	f7fe fc2e 	bl	8106478 <HAL_RCCEx_GetPeriphCLKFreq>
 8107c1c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	681b      	ldr	r3, [r3, #0]
 8107c22:	4a33      	ldr	r2, [pc, #204]	@ (8107cf0 <HAL_SAI_Init+0x290>)
 8107c24:	4293      	cmp	r3, r2
 8107c26:	d004      	beq.n	8107c32 <HAL_SAI_Init+0x1d2>
 8107c28:	687b      	ldr	r3, [r7, #4]
 8107c2a:	681b      	ldr	r3, [r3, #0]
 8107c2c:	4a31      	ldr	r2, [pc, #196]	@ (8107cf4 <HAL_SAI_Init+0x294>)
 8107c2e:	4293      	cmp	r3, r2
 8107c30:	d106      	bne.n	8107c40 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8107c32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8107c36:	f04f 0100 	mov.w	r1, #0
 8107c3a:	f7fe fc1d 	bl	8106478 <HAL_RCCEx_GetPeriphCLKFreq>
 8107c3e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	681b      	ldr	r3, [r3, #0]
 8107c44:	4a2d      	ldr	r2, [pc, #180]	@ (8107cfc <HAL_SAI_Init+0x29c>)
 8107c46:	4293      	cmp	r3, r2
 8107c48:	d004      	beq.n	8107c54 <HAL_SAI_Init+0x1f4>
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8107d00 <HAL_SAI_Init+0x2a0>)
 8107c50:	4293      	cmp	r3, r2
 8107c52:	d106      	bne.n	8107c62 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8107c54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8107c58:	f04f 0100 	mov.w	r1, #0
 8107c5c:	f7fe fc0c 	bl	8106478 <HAL_RCCEx_GetPeriphCLKFreq>
 8107c60:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	681b      	ldr	r3, [r3, #0]
 8107c66:	4a1f      	ldr	r2, [pc, #124]	@ (8107ce4 <HAL_SAI_Init+0x284>)
 8107c68:	4293      	cmp	r3, r2
 8107c6a:	d106      	bne.n	8107c7a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8107c6c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8107c70:	f04f 0100 	mov.w	r1, #0
 8107c74:	f7fe fc00 	bl	8106478 <HAL_RCCEx_GetPeriphCLKFreq>
 8107c78:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	681b      	ldr	r3, [r3, #0]
 8107c7e:	4a22      	ldr	r2, [pc, #136]	@ (8107d08 <HAL_SAI_Init+0x2a8>)
 8107c80:	4293      	cmp	r3, r2
 8107c82:	d106      	bne.n	8107c92 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8107c84:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8107c88:	f04f 0100 	mov.w	r1, #0
 8107c8c:	f7fe fbf4 	bl	8106478 <HAL_RCCEx_GetPeriphCLKFreq>
 8107c90:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8107c92:	687b      	ldr	r3, [r7, #4]
 8107c94:	699b      	ldr	r3, [r3, #24]
 8107c96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8107c9a:	d139      	bne.n	8107d10 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107ca0:	2b04      	cmp	r3, #4
 8107ca2:	d102      	bne.n	8107caa <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8107ca4:	2340      	movs	r3, #64	@ 0x40
 8107ca6:	60fb      	str	r3, [r7, #12]
 8107ca8:	e00a      	b.n	8107cc0 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8107caa:	687b      	ldr	r3, [r7, #4]
 8107cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107cae:	2b08      	cmp	r3, #8
 8107cb0:	d103      	bne.n	8107cba <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8107cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107cb6:	60fb      	str	r3, [r7, #12]
 8107cb8:	e002      	b.n	8107cc0 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107cbe:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8107cc0:	697a      	ldr	r2, [r7, #20]
 8107cc2:	4613      	mov	r3, r2
 8107cc4:	009b      	lsls	r3, r3, #2
 8107cc6:	4413      	add	r3, r2
 8107cc8:	005b      	lsls	r3, r3, #1
 8107cca:	4619      	mov	r1, r3
 8107ccc:	687b      	ldr	r3, [r7, #4]
 8107cce:	6a1b      	ldr	r3, [r3, #32]
 8107cd0:	68fa      	ldr	r2, [r7, #12]
 8107cd2:	fb02 f303 	mul.w	r3, r2, r3
 8107cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8107cda:	613b      	str	r3, [r7, #16]
 8107cdc:	e030      	b.n	8107d40 <HAL_SAI_Init+0x2e0>
 8107cde:	bf00      	nop
 8107ce0:	40015804 	.word	0x40015804
 8107ce4:	58005404 	.word	0x58005404
 8107ce8:	40015824 	.word	0x40015824
 8107cec:	40015800 	.word	0x40015800
 8107cf0:	40015c04 	.word	0x40015c04
 8107cf4:	40015c24 	.word	0x40015c24
 8107cf8:	40015c00 	.word	0x40015c00
 8107cfc:	40016004 	.word	0x40016004
 8107d00:	40016024 	.word	0x40016024
 8107d04:	40016000 	.word	0x40016000
 8107d08:	58005424 	.word	0x58005424
 8107d0c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107d14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107d18:	d101      	bne.n	8107d1e <HAL_SAI_Init+0x2be>
 8107d1a:	2302      	movs	r3, #2
 8107d1c:	e000      	b.n	8107d20 <HAL_SAI_Init+0x2c0>
 8107d1e:	2301      	movs	r3, #1
 8107d20:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8107d22:	697a      	ldr	r2, [r7, #20]
 8107d24:	4613      	mov	r3, r2
 8107d26:	009b      	lsls	r3, r3, #2
 8107d28:	4413      	add	r3, r2
 8107d2a:	005b      	lsls	r3, r3, #1
 8107d2c:	4619      	mov	r1, r3
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	6a1b      	ldr	r3, [r3, #32]
 8107d32:	68ba      	ldr	r2, [r7, #8]
 8107d34:	fb02 f303 	mul.w	r3, r2, r3
 8107d38:	021b      	lsls	r3, r3, #8
 8107d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8107d3e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8107d40:	693b      	ldr	r3, [r7, #16]
 8107d42:	4a96      	ldr	r2, [pc, #600]	@ (8107f9c <HAL_SAI_Init+0x53c>)
 8107d44:	fba2 2303 	umull	r2, r3, r2, r3
 8107d48:	08da      	lsrs	r2, r3, #3
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8107d4e:	6939      	ldr	r1, [r7, #16]
 8107d50:	4b92      	ldr	r3, [pc, #584]	@ (8107f9c <HAL_SAI_Init+0x53c>)
 8107d52:	fba3 2301 	umull	r2, r3, r3, r1
 8107d56:	08da      	lsrs	r2, r3, #3
 8107d58:	4613      	mov	r3, r2
 8107d5a:	009b      	lsls	r3, r3, #2
 8107d5c:	4413      	add	r3, r2
 8107d5e:	005b      	lsls	r3, r3, #1
 8107d60:	1aca      	subs	r2, r1, r3
 8107d62:	2a08      	cmp	r2, #8
 8107d64:	d904      	bls.n	8107d70 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107d6a:	1c5a      	adds	r2, r3, #1
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8107d70:	687b      	ldr	r3, [r7, #4]
 8107d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107d74:	2b04      	cmp	r3, #4
 8107d76:	d104      	bne.n	8107d82 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8107d78:	687b      	ldr	r3, [r7, #4]
 8107d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107d7c:	085a      	lsrs	r2, r3, #1
 8107d7e:	687b      	ldr	r3, [r7, #4]
 8107d80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8107d82:	687b      	ldr	r3, [r7, #4]
 8107d84:	685b      	ldr	r3, [r3, #4]
 8107d86:	2b00      	cmp	r3, #0
 8107d88:	d003      	beq.n	8107d92 <HAL_SAI_Init+0x332>
 8107d8a:	687b      	ldr	r3, [r7, #4]
 8107d8c:	685b      	ldr	r3, [r3, #4]
 8107d8e:	2b02      	cmp	r3, #2
 8107d90:	d109      	bne.n	8107da6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107d96:	2b01      	cmp	r3, #1
 8107d98:	d101      	bne.n	8107d9e <HAL_SAI_Init+0x33e>
 8107d9a:	2300      	movs	r3, #0
 8107d9c:	e001      	b.n	8107da2 <HAL_SAI_Init+0x342>
 8107d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8107da2:	623b      	str	r3, [r7, #32]
 8107da4:	e008      	b.n	8107db8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8107da6:	687b      	ldr	r3, [r7, #4]
 8107da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107daa:	2b01      	cmp	r3, #1
 8107dac:	d102      	bne.n	8107db4 <HAL_SAI_Init+0x354>
 8107dae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8107db2:	e000      	b.n	8107db6 <HAL_SAI_Init+0x356>
 8107db4:	2300      	movs	r3, #0
 8107db6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8107db8:	f7fa f906 	bl	8101fc8 <HAL_GetREVID>
 8107dbc:	4603      	mov	r3, r0
 8107dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107dc2:	d331      	bcc.n	8107e28 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8107dc4:	687b      	ldr	r3, [r7, #4]
 8107dc6:	681b      	ldr	r3, [r3, #0]
 8107dc8:	6819      	ldr	r1, [r3, #0]
 8107dca:	687b      	ldr	r3, [r7, #4]
 8107dcc:	681a      	ldr	r2, [r3, #0]
 8107dce:	4b74      	ldr	r3, [pc, #464]	@ (8107fa0 <HAL_SAI_Init+0x540>)
 8107dd0:	400b      	ands	r3, r1
 8107dd2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107dd4:	687b      	ldr	r3, [r7, #4]
 8107dd6:	681b      	ldr	r3, [r3, #0]
 8107dd8:	6819      	ldr	r1, [r3, #0]
 8107dda:	687b      	ldr	r3, [r7, #4]
 8107ddc:	685a      	ldr	r2, [r3, #4]
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107de2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107de4:	687b      	ldr	r3, [r7, #4]
 8107de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107de8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107dee:	431a      	orrs	r2, r3
 8107df0:	6a3b      	ldr	r3, [r7, #32]
 8107df2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8107df4:	69fb      	ldr	r3, [r7, #28]
 8107df6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8107dfc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	695b      	ldr	r3, [r3, #20]
 8107e02:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107e08:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107e0a:	687b      	ldr	r3, [r7, #4]
 8107e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107e0e:	051b      	lsls	r3, r3, #20
 8107e10:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107e16:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8107e18:	687b      	ldr	r3, [r7, #4]
 8107e1a:	691b      	ldr	r3, [r3, #16]
 8107e1c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107e1e:	687b      	ldr	r3, [r7, #4]
 8107e20:	681b      	ldr	r3, [r3, #0]
 8107e22:	430a      	orrs	r2, r1
 8107e24:	601a      	str	r2, [r3, #0]
 8107e26:	e02d      	b.n	8107e84 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	681b      	ldr	r3, [r3, #0]
 8107e2c:	6819      	ldr	r1, [r3, #0]
 8107e2e:	687b      	ldr	r3, [r7, #4]
 8107e30:	681a      	ldr	r2, [r3, #0]
 8107e32:	4b5c      	ldr	r3, [pc, #368]	@ (8107fa4 <HAL_SAI_Init+0x544>)
 8107e34:	400b      	ands	r3, r1
 8107e36:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107e38:	687b      	ldr	r3, [r7, #4]
 8107e3a:	681b      	ldr	r3, [r3, #0]
 8107e3c:	6819      	ldr	r1, [r3, #0]
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	685a      	ldr	r2, [r3, #4]
 8107e42:	687b      	ldr	r3, [r7, #4]
 8107e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107e46:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107e4c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e52:	431a      	orrs	r2, r3
 8107e54:	6a3b      	ldr	r3, [r7, #32]
 8107e56:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8107e58:	69fb      	ldr	r3, [r7, #28]
 8107e5a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8107e60:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	695b      	ldr	r3, [r3, #20]
 8107e66:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107e68:	687b      	ldr	r3, [r7, #4]
 8107e6a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107e6c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107e6e:	687b      	ldr	r3, [r7, #4]
 8107e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107e72:	051b      	lsls	r3, r3, #20
 8107e74:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107e7a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	681b      	ldr	r3, [r3, #0]
 8107e80:	430a      	orrs	r2, r1
 8107e82:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8107e84:	687b      	ldr	r3, [r7, #4]
 8107e86:	681b      	ldr	r3, [r3, #0]
 8107e88:	685b      	ldr	r3, [r3, #4]
 8107e8a:	687a      	ldr	r2, [r7, #4]
 8107e8c:	6812      	ldr	r2, [r2, #0]
 8107e8e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8107e92:	f023 030f 	bic.w	r3, r3, #15
 8107e96:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	681b      	ldr	r3, [r3, #0]
 8107e9c:	6859      	ldr	r1, [r3, #4]
 8107e9e:	687b      	ldr	r3, [r7, #4]
 8107ea0:	69da      	ldr	r2, [r3, #28]
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107ea6:	431a      	orrs	r2, r3
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107eac:	431a      	orrs	r2, r3
 8107eae:	687b      	ldr	r3, [r7, #4]
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	430a      	orrs	r2, r1
 8107eb4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	681b      	ldr	r3, [r3, #0]
 8107eba:	6899      	ldr	r1, [r3, #8]
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	681a      	ldr	r2, [r3, #0]
 8107ec0:	4b39      	ldr	r3, [pc, #228]	@ (8107fa8 <HAL_SAI_Init+0x548>)
 8107ec2:	400b      	ands	r3, r1
 8107ec4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	681b      	ldr	r3, [r3, #0]
 8107eca:	6899      	ldr	r1, [r3, #8]
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107ed0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8107ed2:	687b      	ldr	r3, [r7, #4]
 8107ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8107ed6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8107edc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8107ede:	687b      	ldr	r3, [r7, #4]
 8107ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8107ee2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8107ee4:	687b      	ldr	r3, [r7, #4]
 8107ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107ee8:	3b01      	subs	r3, #1
 8107eea:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8107eec:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	430a      	orrs	r2, r1
 8107ef4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8107ef6:	687b      	ldr	r3, [r7, #4]
 8107ef8:	681b      	ldr	r3, [r3, #0]
 8107efa:	68d9      	ldr	r1, [r3, #12]
 8107efc:	687b      	ldr	r3, [r7, #4]
 8107efe:	681a      	ldr	r2, [r3, #0]
 8107f00:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8107f04:	400b      	ands	r3, r1
 8107f06:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8107f08:	687b      	ldr	r3, [r7, #4]
 8107f0a:	681b      	ldr	r3, [r3, #0]
 8107f0c:	68d9      	ldr	r1, [r3, #12]
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8107f12:	687b      	ldr	r3, [r7, #4]
 8107f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107f16:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8107f18:	687b      	ldr	r3, [r7, #4]
 8107f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8107f1c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8107f1e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8107f20:	687b      	ldr	r3, [r7, #4]
 8107f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107f24:	3b01      	subs	r3, #1
 8107f26:	021b      	lsls	r3, r3, #8
 8107f28:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	681b      	ldr	r3, [r3, #0]
 8107f2e:	430a      	orrs	r2, r1
 8107f30:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8107f32:	687b      	ldr	r3, [r7, #4]
 8107f34:	681b      	ldr	r3, [r3, #0]
 8107f36:	4a1d      	ldr	r2, [pc, #116]	@ (8107fac <HAL_SAI_Init+0x54c>)
 8107f38:	4293      	cmp	r3, r2
 8107f3a:	d004      	beq.n	8107f46 <HAL_SAI_Init+0x4e6>
 8107f3c:	687b      	ldr	r3, [r7, #4]
 8107f3e:	681b      	ldr	r3, [r3, #0]
 8107f40:	4a1b      	ldr	r2, [pc, #108]	@ (8107fb0 <HAL_SAI_Init+0x550>)
 8107f42:	4293      	cmp	r3, r2
 8107f44:	d119      	bne.n	8107f7a <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8107f46:	69bb      	ldr	r3, [r7, #24]
 8107f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107f4a:	f023 0201 	bic.w	r2, r3, #1
 8107f4e:	69bb      	ldr	r3, [r7, #24]
 8107f50:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8107f58:	2b01      	cmp	r3, #1
 8107f5a:	d10e      	bne.n	8107f7a <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8107f5c:	687b      	ldr	r3, [r7, #4]
 8107f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f64:	3b01      	subs	r3, #1
 8107f66:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8107f68:	431a      	orrs	r2, r3
 8107f6a:	69bb      	ldr	r3, [r7, #24]
 8107f6c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8107f6e:	69bb      	ldr	r3, [r7, #24]
 8107f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107f72:	f043 0201 	orr.w	r2, r3, #1
 8107f76:	69bb      	ldr	r3, [r7, #24]
 8107f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	2200      	movs	r2, #0
 8107f7e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8107f82:	687b      	ldr	r3, [r7, #4]
 8107f84:	2201      	movs	r2, #1
 8107f86:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8107f8a:	687b      	ldr	r3, [r7, #4]
 8107f8c:	2200      	movs	r2, #0
 8107f8e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8107f92:	2300      	movs	r3, #0
}
 8107f94:	4618      	mov	r0, r3
 8107f96:	3728      	adds	r7, #40	@ 0x28
 8107f98:	46bd      	mov	sp, r7
 8107f9a:	bd80      	pop	{r7, pc}
 8107f9c:	cccccccd 	.word	0xcccccccd
 8107fa0:	f005c010 	.word	0xf005c010
 8107fa4:	f805c010 	.word	0xf805c010
 8107fa8:	fff88000 	.word	0xfff88000
 8107fac:	40015804 	.word	0x40015804
 8107fb0:	58005404 	.word	0x58005404

08107fb4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8107fb4:	b480      	push	{r7}
 8107fb6:	b085      	sub	sp, #20
 8107fb8:	af00      	add	r7, sp, #0
 8107fba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8107fbc:	4b18      	ldr	r3, [pc, #96]	@ (8108020 <SAI_Disable+0x6c>)
 8107fbe:	681b      	ldr	r3, [r3, #0]
 8107fc0:	4a18      	ldr	r2, [pc, #96]	@ (8108024 <SAI_Disable+0x70>)
 8107fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8107fc6:	0b1b      	lsrs	r3, r3, #12
 8107fc8:	009b      	lsls	r3, r3, #2
 8107fca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8107fcc:	2300      	movs	r3, #0
 8107fce:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	681b      	ldr	r3, [r3, #0]
 8107fd4:	681a      	ldr	r2, [r3, #0]
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8107fde:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8107fe0:	68fb      	ldr	r3, [r7, #12]
 8107fe2:	2b00      	cmp	r3, #0
 8107fe4:	d10a      	bne.n	8107ffc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107fec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8107ff6:	2303      	movs	r3, #3
 8107ff8:	72fb      	strb	r3, [r7, #11]
      break;
 8107ffa:	e009      	b.n	8108010 <SAI_Disable+0x5c>
    }
    count--;
 8107ffc:	68fb      	ldr	r3, [r7, #12]
 8107ffe:	3b01      	subs	r3, #1
 8108000:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8108002:	687b      	ldr	r3, [r7, #4]
 8108004:	681b      	ldr	r3, [r3, #0]
 8108006:	681b      	ldr	r3, [r3, #0]
 8108008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810800c:	2b00      	cmp	r3, #0
 810800e:	d1e7      	bne.n	8107fe0 <SAI_Disable+0x2c>

  return status;
 8108010:	7afb      	ldrb	r3, [r7, #11]
}
 8108012:	4618      	mov	r0, r3
 8108014:	3714      	adds	r7, #20
 8108016:	46bd      	mov	sp, r7
 8108018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810801c:	4770      	bx	lr
 810801e:	bf00      	nop
 8108020:	10000000 	.word	0x10000000
 8108024:	95cbec1b 	.word	0x95cbec1b

08108028 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8108028:	b580      	push	{r7, lr}
 810802a:	b082      	sub	sp, #8
 810802c:	af00      	add	r7, sp, #0
 810802e:	6078      	str	r0, [r7, #4]
 8108030:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	2b00      	cmp	r3, #0
 8108036:	d101      	bne.n	810803c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8108038:	2301      	movs	r3, #1
 810803a:	e02b      	b.n	8108094 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 810803c:	687b      	ldr	r3, [r7, #4]
 810803e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8108042:	b2db      	uxtb	r3, r3
 8108044:	2b00      	cmp	r3, #0
 8108046:	d106      	bne.n	8108056 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8108048:	687b      	ldr	r3, [r7, #4]
 810804a:	2200      	movs	r2, #0
 810804c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8108050:	6878      	ldr	r0, [r7, #4]
 8108052:	f7f9 fdd7 	bl	8101c04 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	2202      	movs	r2, #2
 810805a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810805e:	687b      	ldr	r3, [r7, #4]
 8108060:	681a      	ldr	r2, [r3, #0]
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	3304      	adds	r3, #4
 8108066:	4619      	mov	r1, r3
 8108068:	4610      	mov	r0, r2
 810806a:	f001 f8f3 	bl	8109254 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	6818      	ldr	r0, [r3, #0]
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	685b      	ldr	r3, [r3, #4]
 8108076:	461a      	mov	r2, r3
 8108078:	6839      	ldr	r1, [r7, #0]
 810807a:	f001 f948 	bl	810930e <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810807e:	4b07      	ldr	r3, [pc, #28]	@ (810809c <HAL_SDRAM_Init+0x74>)
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	4a06      	ldr	r2, [pc, #24]	@ (810809c <HAL_SDRAM_Init+0x74>)
 8108084:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8108088:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 810808a:	687b      	ldr	r3, [r7, #4]
 810808c:	2201      	movs	r2, #1
 810808e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8108092:	2300      	movs	r3, #0
}
 8108094:	4618      	mov	r0, r3
 8108096:	3708      	adds	r7, #8
 8108098:	46bd      	mov	sp, r7
 810809a:	bd80      	pop	{r7, pc}
 810809c:	52004000 	.word	0x52004000

081080a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81080a0:	b580      	push	{r7, lr}
 81080a2:	b082      	sub	sp, #8
 81080a4:	af00      	add	r7, sp, #0
 81080a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	2b00      	cmp	r3, #0
 81080ac:	d101      	bne.n	81080b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81080ae:	2301      	movs	r3, #1
 81080b0:	e042      	b.n	8108138 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81080b2:	687b      	ldr	r3, [r7, #4]
 81080b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81080b8:	2b00      	cmp	r3, #0
 81080ba:	d106      	bne.n	81080ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	2200      	movs	r2, #0
 81080c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81080c4:	6878      	ldr	r0, [r7, #4]
 81080c6:	f7f9 fbfb 	bl	81018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	2224      	movs	r2, #36	@ 0x24
 81080ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	681b      	ldr	r3, [r3, #0]
 81080d6:	681a      	ldr	r2, [r3, #0]
 81080d8:	687b      	ldr	r3, [r7, #4]
 81080da:	681b      	ldr	r3, [r3, #0]
 81080dc:	f022 0201 	bic.w	r2, r2, #1
 81080e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81080e2:	687b      	ldr	r3, [r7, #4]
 81080e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81080e6:	2b00      	cmp	r3, #0
 81080e8:	d002      	beq.n	81080f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 81080ea:	6878      	ldr	r0, [r7, #4]
 81080ec:	f000 fd90 	bl	8108c10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81080f0:	6878      	ldr	r0, [r7, #4]
 81080f2:	f000 f825 	bl	8108140 <UART_SetConfig>
 81080f6:	4603      	mov	r3, r0
 81080f8:	2b01      	cmp	r3, #1
 81080fa:	d101      	bne.n	8108100 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 81080fc:	2301      	movs	r3, #1
 81080fe:	e01b      	b.n	8108138 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8108100:	687b      	ldr	r3, [r7, #4]
 8108102:	681b      	ldr	r3, [r3, #0]
 8108104:	685a      	ldr	r2, [r3, #4]
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	681b      	ldr	r3, [r3, #0]
 810810a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810810e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	681b      	ldr	r3, [r3, #0]
 8108114:	689a      	ldr	r2, [r3, #8]
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	681b      	ldr	r3, [r3, #0]
 810811a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810811e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	681b      	ldr	r3, [r3, #0]
 8108124:	681a      	ldr	r2, [r3, #0]
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	681b      	ldr	r3, [r3, #0]
 810812a:	f042 0201 	orr.w	r2, r2, #1
 810812e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8108130:	6878      	ldr	r0, [r7, #4]
 8108132:	f000 fe0f 	bl	8108d54 <UART_CheckIdleState>
 8108136:	4603      	mov	r3, r0
}
 8108138:	4618      	mov	r0, r3
 810813a:	3708      	adds	r7, #8
 810813c:	46bd      	mov	sp, r7
 810813e:	bd80      	pop	{r7, pc}

08108140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108144:	b092      	sub	sp, #72	@ 0x48
 8108146:	af00      	add	r7, sp, #0
 8108148:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810814a:	2300      	movs	r3, #0
 810814c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108150:	697b      	ldr	r3, [r7, #20]
 8108152:	689a      	ldr	r2, [r3, #8]
 8108154:	697b      	ldr	r3, [r7, #20]
 8108156:	691b      	ldr	r3, [r3, #16]
 8108158:	431a      	orrs	r2, r3
 810815a:	697b      	ldr	r3, [r7, #20]
 810815c:	695b      	ldr	r3, [r3, #20]
 810815e:	431a      	orrs	r2, r3
 8108160:	697b      	ldr	r3, [r7, #20]
 8108162:	69db      	ldr	r3, [r3, #28]
 8108164:	4313      	orrs	r3, r2
 8108166:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108168:	697b      	ldr	r3, [r7, #20]
 810816a:	681b      	ldr	r3, [r3, #0]
 810816c:	681a      	ldr	r2, [r3, #0]
 810816e:	4bbd      	ldr	r3, [pc, #756]	@ (8108464 <UART_SetConfig+0x324>)
 8108170:	4013      	ands	r3, r2
 8108172:	697a      	ldr	r2, [r7, #20]
 8108174:	6812      	ldr	r2, [r2, #0]
 8108176:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108178:	430b      	orrs	r3, r1
 810817a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810817c:	697b      	ldr	r3, [r7, #20]
 810817e:	681b      	ldr	r3, [r3, #0]
 8108180:	685b      	ldr	r3, [r3, #4]
 8108182:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8108186:	697b      	ldr	r3, [r7, #20]
 8108188:	68da      	ldr	r2, [r3, #12]
 810818a:	697b      	ldr	r3, [r7, #20]
 810818c:	681b      	ldr	r3, [r3, #0]
 810818e:	430a      	orrs	r2, r1
 8108190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108192:	697b      	ldr	r3, [r7, #20]
 8108194:	699b      	ldr	r3, [r3, #24]
 8108196:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108198:	697b      	ldr	r3, [r7, #20]
 810819a:	681b      	ldr	r3, [r3, #0]
 810819c:	4ab2      	ldr	r2, [pc, #712]	@ (8108468 <UART_SetConfig+0x328>)
 810819e:	4293      	cmp	r3, r2
 81081a0:	d004      	beq.n	81081ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81081a2:	697b      	ldr	r3, [r7, #20]
 81081a4:	6a1b      	ldr	r3, [r3, #32]
 81081a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81081a8:	4313      	orrs	r3, r2
 81081aa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81081ac:	697b      	ldr	r3, [r7, #20]
 81081ae:	681b      	ldr	r3, [r3, #0]
 81081b0:	689b      	ldr	r3, [r3, #8]
 81081b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 81081b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 81081ba:	697a      	ldr	r2, [r7, #20]
 81081bc:	6812      	ldr	r2, [r2, #0]
 81081be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81081c0:	430b      	orrs	r3, r1
 81081c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81081c4:	697b      	ldr	r3, [r7, #20]
 81081c6:	681b      	ldr	r3, [r3, #0]
 81081c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81081ca:	f023 010f 	bic.w	r1, r3, #15
 81081ce:	697b      	ldr	r3, [r7, #20]
 81081d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81081d2:	697b      	ldr	r3, [r7, #20]
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	430a      	orrs	r2, r1
 81081d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81081da:	697b      	ldr	r3, [r7, #20]
 81081dc:	681b      	ldr	r3, [r3, #0]
 81081de:	4aa3      	ldr	r2, [pc, #652]	@ (810846c <UART_SetConfig+0x32c>)
 81081e0:	4293      	cmp	r3, r2
 81081e2:	d177      	bne.n	81082d4 <UART_SetConfig+0x194>
 81081e4:	4ba2      	ldr	r3, [pc, #648]	@ (8108470 <UART_SetConfig+0x330>)
 81081e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81081e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81081ec:	2b28      	cmp	r3, #40	@ 0x28
 81081ee:	d86d      	bhi.n	81082cc <UART_SetConfig+0x18c>
 81081f0:	a201      	add	r2, pc, #4	@ (adr r2, 81081f8 <UART_SetConfig+0xb8>)
 81081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081f6:	bf00      	nop
 81081f8:	0810829d 	.word	0x0810829d
 81081fc:	081082cd 	.word	0x081082cd
 8108200:	081082cd 	.word	0x081082cd
 8108204:	081082cd 	.word	0x081082cd
 8108208:	081082cd 	.word	0x081082cd
 810820c:	081082cd 	.word	0x081082cd
 8108210:	081082cd 	.word	0x081082cd
 8108214:	081082cd 	.word	0x081082cd
 8108218:	081082a5 	.word	0x081082a5
 810821c:	081082cd 	.word	0x081082cd
 8108220:	081082cd 	.word	0x081082cd
 8108224:	081082cd 	.word	0x081082cd
 8108228:	081082cd 	.word	0x081082cd
 810822c:	081082cd 	.word	0x081082cd
 8108230:	081082cd 	.word	0x081082cd
 8108234:	081082cd 	.word	0x081082cd
 8108238:	081082ad 	.word	0x081082ad
 810823c:	081082cd 	.word	0x081082cd
 8108240:	081082cd 	.word	0x081082cd
 8108244:	081082cd 	.word	0x081082cd
 8108248:	081082cd 	.word	0x081082cd
 810824c:	081082cd 	.word	0x081082cd
 8108250:	081082cd 	.word	0x081082cd
 8108254:	081082cd 	.word	0x081082cd
 8108258:	081082b5 	.word	0x081082b5
 810825c:	081082cd 	.word	0x081082cd
 8108260:	081082cd 	.word	0x081082cd
 8108264:	081082cd 	.word	0x081082cd
 8108268:	081082cd 	.word	0x081082cd
 810826c:	081082cd 	.word	0x081082cd
 8108270:	081082cd 	.word	0x081082cd
 8108274:	081082cd 	.word	0x081082cd
 8108278:	081082bd 	.word	0x081082bd
 810827c:	081082cd 	.word	0x081082cd
 8108280:	081082cd 	.word	0x081082cd
 8108284:	081082cd 	.word	0x081082cd
 8108288:	081082cd 	.word	0x081082cd
 810828c:	081082cd 	.word	0x081082cd
 8108290:	081082cd 	.word	0x081082cd
 8108294:	081082cd 	.word	0x081082cd
 8108298:	081082c5 	.word	0x081082c5
 810829c:	2301      	movs	r3, #1
 810829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81082a2:	e220      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81082a4:	2304      	movs	r3, #4
 81082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81082aa:	e21c      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81082ac:	2308      	movs	r3, #8
 81082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81082b2:	e218      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81082b4:	2310      	movs	r3, #16
 81082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81082ba:	e214      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81082bc:	2320      	movs	r3, #32
 81082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81082c2:	e210      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81082c4:	2340      	movs	r3, #64	@ 0x40
 81082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81082ca:	e20c      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81082cc:	2380      	movs	r3, #128	@ 0x80
 81082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81082d2:	e208      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81082d4:	697b      	ldr	r3, [r7, #20]
 81082d6:	681b      	ldr	r3, [r3, #0]
 81082d8:	4a66      	ldr	r2, [pc, #408]	@ (8108474 <UART_SetConfig+0x334>)
 81082da:	4293      	cmp	r3, r2
 81082dc:	d130      	bne.n	8108340 <UART_SetConfig+0x200>
 81082de:	4b64      	ldr	r3, [pc, #400]	@ (8108470 <UART_SetConfig+0x330>)
 81082e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81082e2:	f003 0307 	and.w	r3, r3, #7
 81082e6:	2b05      	cmp	r3, #5
 81082e8:	d826      	bhi.n	8108338 <UART_SetConfig+0x1f8>
 81082ea:	a201      	add	r2, pc, #4	@ (adr r2, 81082f0 <UART_SetConfig+0x1b0>)
 81082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082f0:	08108309 	.word	0x08108309
 81082f4:	08108311 	.word	0x08108311
 81082f8:	08108319 	.word	0x08108319
 81082fc:	08108321 	.word	0x08108321
 8108300:	08108329 	.word	0x08108329
 8108304:	08108331 	.word	0x08108331
 8108308:	2300      	movs	r3, #0
 810830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810830e:	e1ea      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108310:	2304      	movs	r3, #4
 8108312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108316:	e1e6      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108318:	2308      	movs	r3, #8
 810831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810831e:	e1e2      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108320:	2310      	movs	r3, #16
 8108322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108326:	e1de      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108328:	2320      	movs	r3, #32
 810832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810832e:	e1da      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108330:	2340      	movs	r3, #64	@ 0x40
 8108332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108336:	e1d6      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108338:	2380      	movs	r3, #128	@ 0x80
 810833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810833e:	e1d2      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108340:	697b      	ldr	r3, [r7, #20]
 8108342:	681b      	ldr	r3, [r3, #0]
 8108344:	4a4c      	ldr	r2, [pc, #304]	@ (8108478 <UART_SetConfig+0x338>)
 8108346:	4293      	cmp	r3, r2
 8108348:	d130      	bne.n	81083ac <UART_SetConfig+0x26c>
 810834a:	4b49      	ldr	r3, [pc, #292]	@ (8108470 <UART_SetConfig+0x330>)
 810834c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810834e:	f003 0307 	and.w	r3, r3, #7
 8108352:	2b05      	cmp	r3, #5
 8108354:	d826      	bhi.n	81083a4 <UART_SetConfig+0x264>
 8108356:	a201      	add	r2, pc, #4	@ (adr r2, 810835c <UART_SetConfig+0x21c>)
 8108358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810835c:	08108375 	.word	0x08108375
 8108360:	0810837d 	.word	0x0810837d
 8108364:	08108385 	.word	0x08108385
 8108368:	0810838d 	.word	0x0810838d
 810836c:	08108395 	.word	0x08108395
 8108370:	0810839d 	.word	0x0810839d
 8108374:	2300      	movs	r3, #0
 8108376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810837a:	e1b4      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810837c:	2304      	movs	r3, #4
 810837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108382:	e1b0      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108384:	2308      	movs	r3, #8
 8108386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810838a:	e1ac      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810838c:	2310      	movs	r3, #16
 810838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108392:	e1a8      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108394:	2320      	movs	r3, #32
 8108396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810839a:	e1a4      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810839c:	2340      	movs	r3, #64	@ 0x40
 810839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81083a2:	e1a0      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81083a4:	2380      	movs	r3, #128	@ 0x80
 81083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81083aa:	e19c      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81083ac:	697b      	ldr	r3, [r7, #20]
 81083ae:	681b      	ldr	r3, [r3, #0]
 81083b0:	4a32      	ldr	r2, [pc, #200]	@ (810847c <UART_SetConfig+0x33c>)
 81083b2:	4293      	cmp	r3, r2
 81083b4:	d130      	bne.n	8108418 <UART_SetConfig+0x2d8>
 81083b6:	4b2e      	ldr	r3, [pc, #184]	@ (8108470 <UART_SetConfig+0x330>)
 81083b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81083ba:	f003 0307 	and.w	r3, r3, #7
 81083be:	2b05      	cmp	r3, #5
 81083c0:	d826      	bhi.n	8108410 <UART_SetConfig+0x2d0>
 81083c2:	a201      	add	r2, pc, #4	@ (adr r2, 81083c8 <UART_SetConfig+0x288>)
 81083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083c8:	081083e1 	.word	0x081083e1
 81083cc:	081083e9 	.word	0x081083e9
 81083d0:	081083f1 	.word	0x081083f1
 81083d4:	081083f9 	.word	0x081083f9
 81083d8:	08108401 	.word	0x08108401
 81083dc:	08108409 	.word	0x08108409
 81083e0:	2300      	movs	r3, #0
 81083e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81083e6:	e17e      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81083e8:	2304      	movs	r3, #4
 81083ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81083ee:	e17a      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81083f0:	2308      	movs	r3, #8
 81083f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81083f6:	e176      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81083f8:	2310      	movs	r3, #16
 81083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81083fe:	e172      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108400:	2320      	movs	r3, #32
 8108402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108406:	e16e      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108408:	2340      	movs	r3, #64	@ 0x40
 810840a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810840e:	e16a      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108410:	2380      	movs	r3, #128	@ 0x80
 8108412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108416:	e166      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108418:	697b      	ldr	r3, [r7, #20]
 810841a:	681b      	ldr	r3, [r3, #0]
 810841c:	4a18      	ldr	r2, [pc, #96]	@ (8108480 <UART_SetConfig+0x340>)
 810841e:	4293      	cmp	r3, r2
 8108420:	d140      	bne.n	81084a4 <UART_SetConfig+0x364>
 8108422:	4b13      	ldr	r3, [pc, #76]	@ (8108470 <UART_SetConfig+0x330>)
 8108424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108426:	f003 0307 	and.w	r3, r3, #7
 810842a:	2b05      	cmp	r3, #5
 810842c:	d836      	bhi.n	810849c <UART_SetConfig+0x35c>
 810842e:	a201      	add	r2, pc, #4	@ (adr r2, 8108434 <UART_SetConfig+0x2f4>)
 8108430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108434:	0810844d 	.word	0x0810844d
 8108438:	08108455 	.word	0x08108455
 810843c:	0810845d 	.word	0x0810845d
 8108440:	08108485 	.word	0x08108485
 8108444:	0810848d 	.word	0x0810848d
 8108448:	08108495 	.word	0x08108495
 810844c:	2300      	movs	r3, #0
 810844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108452:	e148      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108454:	2304      	movs	r3, #4
 8108456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810845a:	e144      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810845c:	2308      	movs	r3, #8
 810845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108462:	e140      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108464:	cfff69f3 	.word	0xcfff69f3
 8108468:	58000c00 	.word	0x58000c00
 810846c:	40011000 	.word	0x40011000
 8108470:	58024400 	.word	0x58024400
 8108474:	40004400 	.word	0x40004400
 8108478:	40004800 	.word	0x40004800
 810847c:	40004c00 	.word	0x40004c00
 8108480:	40005000 	.word	0x40005000
 8108484:	2310      	movs	r3, #16
 8108486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810848a:	e12c      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810848c:	2320      	movs	r3, #32
 810848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108492:	e128      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108494:	2340      	movs	r3, #64	@ 0x40
 8108496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810849a:	e124      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810849c:	2380      	movs	r3, #128	@ 0x80
 810849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81084a2:	e120      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81084a4:	697b      	ldr	r3, [r7, #20]
 81084a6:	681b      	ldr	r3, [r3, #0]
 81084a8:	4acb      	ldr	r2, [pc, #812]	@ (81087d8 <UART_SetConfig+0x698>)
 81084aa:	4293      	cmp	r3, r2
 81084ac:	d176      	bne.n	810859c <UART_SetConfig+0x45c>
 81084ae:	4bcb      	ldr	r3, [pc, #812]	@ (81087dc <UART_SetConfig+0x69c>)
 81084b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81084b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81084b6:	2b28      	cmp	r3, #40	@ 0x28
 81084b8:	d86c      	bhi.n	8108594 <UART_SetConfig+0x454>
 81084ba:	a201      	add	r2, pc, #4	@ (adr r2, 81084c0 <UART_SetConfig+0x380>)
 81084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084c0:	08108565 	.word	0x08108565
 81084c4:	08108595 	.word	0x08108595
 81084c8:	08108595 	.word	0x08108595
 81084cc:	08108595 	.word	0x08108595
 81084d0:	08108595 	.word	0x08108595
 81084d4:	08108595 	.word	0x08108595
 81084d8:	08108595 	.word	0x08108595
 81084dc:	08108595 	.word	0x08108595
 81084e0:	0810856d 	.word	0x0810856d
 81084e4:	08108595 	.word	0x08108595
 81084e8:	08108595 	.word	0x08108595
 81084ec:	08108595 	.word	0x08108595
 81084f0:	08108595 	.word	0x08108595
 81084f4:	08108595 	.word	0x08108595
 81084f8:	08108595 	.word	0x08108595
 81084fc:	08108595 	.word	0x08108595
 8108500:	08108575 	.word	0x08108575
 8108504:	08108595 	.word	0x08108595
 8108508:	08108595 	.word	0x08108595
 810850c:	08108595 	.word	0x08108595
 8108510:	08108595 	.word	0x08108595
 8108514:	08108595 	.word	0x08108595
 8108518:	08108595 	.word	0x08108595
 810851c:	08108595 	.word	0x08108595
 8108520:	0810857d 	.word	0x0810857d
 8108524:	08108595 	.word	0x08108595
 8108528:	08108595 	.word	0x08108595
 810852c:	08108595 	.word	0x08108595
 8108530:	08108595 	.word	0x08108595
 8108534:	08108595 	.word	0x08108595
 8108538:	08108595 	.word	0x08108595
 810853c:	08108595 	.word	0x08108595
 8108540:	08108585 	.word	0x08108585
 8108544:	08108595 	.word	0x08108595
 8108548:	08108595 	.word	0x08108595
 810854c:	08108595 	.word	0x08108595
 8108550:	08108595 	.word	0x08108595
 8108554:	08108595 	.word	0x08108595
 8108558:	08108595 	.word	0x08108595
 810855c:	08108595 	.word	0x08108595
 8108560:	0810858d 	.word	0x0810858d
 8108564:	2301      	movs	r3, #1
 8108566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810856a:	e0bc      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810856c:	2304      	movs	r3, #4
 810856e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108572:	e0b8      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108574:	2308      	movs	r3, #8
 8108576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810857a:	e0b4      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810857c:	2310      	movs	r3, #16
 810857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108582:	e0b0      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108584:	2320      	movs	r3, #32
 8108586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810858a:	e0ac      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810858c:	2340      	movs	r3, #64	@ 0x40
 810858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108592:	e0a8      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108594:	2380      	movs	r3, #128	@ 0x80
 8108596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810859a:	e0a4      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810859c:	697b      	ldr	r3, [r7, #20]
 810859e:	681b      	ldr	r3, [r3, #0]
 81085a0:	4a8f      	ldr	r2, [pc, #572]	@ (81087e0 <UART_SetConfig+0x6a0>)
 81085a2:	4293      	cmp	r3, r2
 81085a4:	d130      	bne.n	8108608 <UART_SetConfig+0x4c8>
 81085a6:	4b8d      	ldr	r3, [pc, #564]	@ (81087dc <UART_SetConfig+0x69c>)
 81085a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81085aa:	f003 0307 	and.w	r3, r3, #7
 81085ae:	2b05      	cmp	r3, #5
 81085b0:	d826      	bhi.n	8108600 <UART_SetConfig+0x4c0>
 81085b2:	a201      	add	r2, pc, #4	@ (adr r2, 81085b8 <UART_SetConfig+0x478>)
 81085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81085b8:	081085d1 	.word	0x081085d1
 81085bc:	081085d9 	.word	0x081085d9
 81085c0:	081085e1 	.word	0x081085e1
 81085c4:	081085e9 	.word	0x081085e9
 81085c8:	081085f1 	.word	0x081085f1
 81085cc:	081085f9 	.word	0x081085f9
 81085d0:	2300      	movs	r3, #0
 81085d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81085d6:	e086      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81085d8:	2304      	movs	r3, #4
 81085da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81085de:	e082      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81085e0:	2308      	movs	r3, #8
 81085e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81085e6:	e07e      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81085e8:	2310      	movs	r3, #16
 81085ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81085ee:	e07a      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81085f0:	2320      	movs	r3, #32
 81085f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81085f6:	e076      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81085f8:	2340      	movs	r3, #64	@ 0x40
 81085fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81085fe:	e072      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108600:	2380      	movs	r3, #128	@ 0x80
 8108602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108606:	e06e      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108608:	697b      	ldr	r3, [r7, #20]
 810860a:	681b      	ldr	r3, [r3, #0]
 810860c:	4a75      	ldr	r2, [pc, #468]	@ (81087e4 <UART_SetConfig+0x6a4>)
 810860e:	4293      	cmp	r3, r2
 8108610:	d130      	bne.n	8108674 <UART_SetConfig+0x534>
 8108612:	4b72      	ldr	r3, [pc, #456]	@ (81087dc <UART_SetConfig+0x69c>)
 8108614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108616:	f003 0307 	and.w	r3, r3, #7
 810861a:	2b05      	cmp	r3, #5
 810861c:	d826      	bhi.n	810866c <UART_SetConfig+0x52c>
 810861e:	a201      	add	r2, pc, #4	@ (adr r2, 8108624 <UART_SetConfig+0x4e4>)
 8108620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108624:	0810863d 	.word	0x0810863d
 8108628:	08108645 	.word	0x08108645
 810862c:	0810864d 	.word	0x0810864d
 8108630:	08108655 	.word	0x08108655
 8108634:	0810865d 	.word	0x0810865d
 8108638:	08108665 	.word	0x08108665
 810863c:	2300      	movs	r3, #0
 810863e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108642:	e050      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108644:	2304      	movs	r3, #4
 8108646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810864a:	e04c      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810864c:	2308      	movs	r3, #8
 810864e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108652:	e048      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108654:	2310      	movs	r3, #16
 8108656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810865a:	e044      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810865c:	2320      	movs	r3, #32
 810865e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108662:	e040      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108664:	2340      	movs	r3, #64	@ 0x40
 8108666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810866a:	e03c      	b.n	81086e6 <UART_SetConfig+0x5a6>
 810866c:	2380      	movs	r3, #128	@ 0x80
 810866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108672:	e038      	b.n	81086e6 <UART_SetConfig+0x5a6>
 8108674:	697b      	ldr	r3, [r7, #20]
 8108676:	681b      	ldr	r3, [r3, #0]
 8108678:	4a5b      	ldr	r2, [pc, #364]	@ (81087e8 <UART_SetConfig+0x6a8>)
 810867a:	4293      	cmp	r3, r2
 810867c:	d130      	bne.n	81086e0 <UART_SetConfig+0x5a0>
 810867e:	4b57      	ldr	r3, [pc, #348]	@ (81087dc <UART_SetConfig+0x69c>)
 8108680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108682:	f003 0307 	and.w	r3, r3, #7
 8108686:	2b05      	cmp	r3, #5
 8108688:	d826      	bhi.n	81086d8 <UART_SetConfig+0x598>
 810868a:	a201      	add	r2, pc, #4	@ (adr r2, 8108690 <UART_SetConfig+0x550>)
 810868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108690:	081086a9 	.word	0x081086a9
 8108694:	081086b1 	.word	0x081086b1
 8108698:	081086b9 	.word	0x081086b9
 810869c:	081086c1 	.word	0x081086c1
 81086a0:	081086c9 	.word	0x081086c9
 81086a4:	081086d1 	.word	0x081086d1
 81086a8:	2302      	movs	r3, #2
 81086aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81086ae:	e01a      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81086b0:	2304      	movs	r3, #4
 81086b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81086b6:	e016      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81086b8:	2308      	movs	r3, #8
 81086ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81086be:	e012      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81086c0:	2310      	movs	r3, #16
 81086c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81086c6:	e00e      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81086c8:	2320      	movs	r3, #32
 81086ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81086ce:	e00a      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81086d0:	2340      	movs	r3, #64	@ 0x40
 81086d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81086d6:	e006      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81086d8:	2380      	movs	r3, #128	@ 0x80
 81086da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81086de:	e002      	b.n	81086e6 <UART_SetConfig+0x5a6>
 81086e0:	2380      	movs	r3, #128	@ 0x80
 81086e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81086e6:	697b      	ldr	r3, [r7, #20]
 81086e8:	681b      	ldr	r3, [r3, #0]
 81086ea:	4a3f      	ldr	r2, [pc, #252]	@ (81087e8 <UART_SetConfig+0x6a8>)
 81086ec:	4293      	cmp	r3, r2
 81086ee:	f040 80f8 	bne.w	81088e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81086f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81086f6:	2b20      	cmp	r3, #32
 81086f8:	dc46      	bgt.n	8108788 <UART_SetConfig+0x648>
 81086fa:	2b02      	cmp	r3, #2
 81086fc:	f2c0 8082 	blt.w	8108804 <UART_SetConfig+0x6c4>
 8108700:	3b02      	subs	r3, #2
 8108702:	2b1e      	cmp	r3, #30
 8108704:	d87e      	bhi.n	8108804 <UART_SetConfig+0x6c4>
 8108706:	a201      	add	r2, pc, #4	@ (adr r2, 810870c <UART_SetConfig+0x5cc>)
 8108708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810870c:	0810878f 	.word	0x0810878f
 8108710:	08108805 	.word	0x08108805
 8108714:	08108797 	.word	0x08108797
 8108718:	08108805 	.word	0x08108805
 810871c:	08108805 	.word	0x08108805
 8108720:	08108805 	.word	0x08108805
 8108724:	081087a7 	.word	0x081087a7
 8108728:	08108805 	.word	0x08108805
 810872c:	08108805 	.word	0x08108805
 8108730:	08108805 	.word	0x08108805
 8108734:	08108805 	.word	0x08108805
 8108738:	08108805 	.word	0x08108805
 810873c:	08108805 	.word	0x08108805
 8108740:	08108805 	.word	0x08108805
 8108744:	081087b7 	.word	0x081087b7
 8108748:	08108805 	.word	0x08108805
 810874c:	08108805 	.word	0x08108805
 8108750:	08108805 	.word	0x08108805
 8108754:	08108805 	.word	0x08108805
 8108758:	08108805 	.word	0x08108805
 810875c:	08108805 	.word	0x08108805
 8108760:	08108805 	.word	0x08108805
 8108764:	08108805 	.word	0x08108805
 8108768:	08108805 	.word	0x08108805
 810876c:	08108805 	.word	0x08108805
 8108770:	08108805 	.word	0x08108805
 8108774:	08108805 	.word	0x08108805
 8108778:	08108805 	.word	0x08108805
 810877c:	08108805 	.word	0x08108805
 8108780:	08108805 	.word	0x08108805
 8108784:	081087f7 	.word	0x081087f7
 8108788:	2b40      	cmp	r3, #64	@ 0x40
 810878a:	d037      	beq.n	81087fc <UART_SetConfig+0x6bc>
 810878c:	e03a      	b.n	8108804 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810878e:	f7fe fbf3 	bl	8106f78 <HAL_RCCEx_GetD3PCLK1Freq>
 8108792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108794:	e03c      	b.n	8108810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810879a:	4618      	mov	r0, r3
 810879c:	f7fe fc02 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81087a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81087a4:	e034      	b.n	8108810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81087a6:	f107 0318 	add.w	r3, r7, #24
 81087aa:	4618      	mov	r0, r3
 81087ac:	f7fe fd4e 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81087b0:	69fb      	ldr	r3, [r7, #28]
 81087b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81087b4:	e02c      	b.n	8108810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81087b6:	4b09      	ldr	r3, [pc, #36]	@ (81087dc <UART_SetConfig+0x69c>)
 81087b8:	681b      	ldr	r3, [r3, #0]
 81087ba:	f003 0320 	and.w	r3, r3, #32
 81087be:	2b00      	cmp	r3, #0
 81087c0:	d016      	beq.n	81087f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81087c2:	4b06      	ldr	r3, [pc, #24]	@ (81087dc <UART_SetConfig+0x69c>)
 81087c4:	681b      	ldr	r3, [r3, #0]
 81087c6:	08db      	lsrs	r3, r3, #3
 81087c8:	f003 0303 	and.w	r3, r3, #3
 81087cc:	4a07      	ldr	r2, [pc, #28]	@ (81087ec <UART_SetConfig+0x6ac>)
 81087ce:	fa22 f303 	lsr.w	r3, r2, r3
 81087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81087d4:	e01c      	b.n	8108810 <UART_SetConfig+0x6d0>
 81087d6:	bf00      	nop
 81087d8:	40011400 	.word	0x40011400
 81087dc:	58024400 	.word	0x58024400
 81087e0:	40007800 	.word	0x40007800
 81087e4:	40007c00 	.word	0x40007c00
 81087e8:	58000c00 	.word	0x58000c00
 81087ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81087f0:	4b9d      	ldr	r3, [pc, #628]	@ (8108a68 <UART_SetConfig+0x928>)
 81087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81087f4:	e00c      	b.n	8108810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81087f6:	4b9d      	ldr	r3, [pc, #628]	@ (8108a6c <UART_SetConfig+0x92c>)
 81087f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81087fa:	e009      	b.n	8108810 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81087fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108802:	e005      	b.n	8108810 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108804:	2300      	movs	r3, #0
 8108806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108808:	2301      	movs	r3, #1
 810880a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810880e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108812:	2b00      	cmp	r3, #0
 8108814:	f000 81de 	beq.w	8108bd4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108818:	697b      	ldr	r3, [r7, #20]
 810881a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810881c:	4a94      	ldr	r2, [pc, #592]	@ (8108a70 <UART_SetConfig+0x930>)
 810881e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108822:	461a      	mov	r2, r3
 8108824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108826:	fbb3 f3f2 	udiv	r3, r3, r2
 810882a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810882c:	697b      	ldr	r3, [r7, #20]
 810882e:	685a      	ldr	r2, [r3, #4]
 8108830:	4613      	mov	r3, r2
 8108832:	005b      	lsls	r3, r3, #1
 8108834:	4413      	add	r3, r2
 8108836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108838:	429a      	cmp	r2, r3
 810883a:	d305      	bcc.n	8108848 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810883c:	697b      	ldr	r3, [r7, #20]
 810883e:	685b      	ldr	r3, [r3, #4]
 8108840:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108844:	429a      	cmp	r2, r3
 8108846:	d903      	bls.n	8108850 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108848:	2301      	movs	r3, #1
 810884a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810884e:	e1c1      	b.n	8108bd4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108852:	2200      	movs	r2, #0
 8108854:	60bb      	str	r3, [r7, #8]
 8108856:	60fa      	str	r2, [r7, #12]
 8108858:	697b      	ldr	r3, [r7, #20]
 810885a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810885c:	4a84      	ldr	r2, [pc, #528]	@ (8108a70 <UART_SetConfig+0x930>)
 810885e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108862:	b29b      	uxth	r3, r3
 8108864:	2200      	movs	r2, #0
 8108866:	603b      	str	r3, [r7, #0]
 8108868:	607a      	str	r2, [r7, #4]
 810886a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810886e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108872:	f7f7 fd31 	bl	81002d8 <__aeabi_uldivmod>
 8108876:	4602      	mov	r2, r0
 8108878:	460b      	mov	r3, r1
 810887a:	4610      	mov	r0, r2
 810887c:	4619      	mov	r1, r3
 810887e:	f04f 0200 	mov.w	r2, #0
 8108882:	f04f 0300 	mov.w	r3, #0
 8108886:	020b      	lsls	r3, r1, #8
 8108888:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810888c:	0202      	lsls	r2, r0, #8
 810888e:	6979      	ldr	r1, [r7, #20]
 8108890:	6849      	ldr	r1, [r1, #4]
 8108892:	0849      	lsrs	r1, r1, #1
 8108894:	2000      	movs	r0, #0
 8108896:	460c      	mov	r4, r1
 8108898:	4605      	mov	r5, r0
 810889a:	eb12 0804 	adds.w	r8, r2, r4
 810889e:	eb43 0905 	adc.w	r9, r3, r5
 81088a2:	697b      	ldr	r3, [r7, #20]
 81088a4:	685b      	ldr	r3, [r3, #4]
 81088a6:	2200      	movs	r2, #0
 81088a8:	469a      	mov	sl, r3
 81088aa:	4693      	mov	fp, r2
 81088ac:	4652      	mov	r2, sl
 81088ae:	465b      	mov	r3, fp
 81088b0:	4640      	mov	r0, r8
 81088b2:	4649      	mov	r1, r9
 81088b4:	f7f7 fd10 	bl	81002d8 <__aeabi_uldivmod>
 81088b8:	4602      	mov	r2, r0
 81088ba:	460b      	mov	r3, r1
 81088bc:	4613      	mov	r3, r2
 81088be:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81088c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81088c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81088c6:	d308      	bcc.n	81088da <UART_SetConfig+0x79a>
 81088c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81088ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81088ce:	d204      	bcs.n	81088da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81088d0:	697b      	ldr	r3, [r7, #20]
 81088d2:	681b      	ldr	r3, [r3, #0]
 81088d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81088d6:	60da      	str	r2, [r3, #12]
 81088d8:	e17c      	b.n	8108bd4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81088da:	2301      	movs	r3, #1
 81088dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81088e0:	e178      	b.n	8108bd4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81088e2:	697b      	ldr	r3, [r7, #20]
 81088e4:	69db      	ldr	r3, [r3, #28]
 81088e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81088ea:	f040 80c5 	bne.w	8108a78 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81088ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81088f2:	2b20      	cmp	r3, #32
 81088f4:	dc48      	bgt.n	8108988 <UART_SetConfig+0x848>
 81088f6:	2b00      	cmp	r3, #0
 81088f8:	db7b      	blt.n	81089f2 <UART_SetConfig+0x8b2>
 81088fa:	2b20      	cmp	r3, #32
 81088fc:	d879      	bhi.n	81089f2 <UART_SetConfig+0x8b2>
 81088fe:	a201      	add	r2, pc, #4	@ (adr r2, 8108904 <UART_SetConfig+0x7c4>)
 8108900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108904:	0810898f 	.word	0x0810898f
 8108908:	08108997 	.word	0x08108997
 810890c:	081089f3 	.word	0x081089f3
 8108910:	081089f3 	.word	0x081089f3
 8108914:	0810899f 	.word	0x0810899f
 8108918:	081089f3 	.word	0x081089f3
 810891c:	081089f3 	.word	0x081089f3
 8108920:	081089f3 	.word	0x081089f3
 8108924:	081089af 	.word	0x081089af
 8108928:	081089f3 	.word	0x081089f3
 810892c:	081089f3 	.word	0x081089f3
 8108930:	081089f3 	.word	0x081089f3
 8108934:	081089f3 	.word	0x081089f3
 8108938:	081089f3 	.word	0x081089f3
 810893c:	081089f3 	.word	0x081089f3
 8108940:	081089f3 	.word	0x081089f3
 8108944:	081089bf 	.word	0x081089bf
 8108948:	081089f3 	.word	0x081089f3
 810894c:	081089f3 	.word	0x081089f3
 8108950:	081089f3 	.word	0x081089f3
 8108954:	081089f3 	.word	0x081089f3
 8108958:	081089f3 	.word	0x081089f3
 810895c:	081089f3 	.word	0x081089f3
 8108960:	081089f3 	.word	0x081089f3
 8108964:	081089f3 	.word	0x081089f3
 8108968:	081089f3 	.word	0x081089f3
 810896c:	081089f3 	.word	0x081089f3
 8108970:	081089f3 	.word	0x081089f3
 8108974:	081089f3 	.word	0x081089f3
 8108978:	081089f3 	.word	0x081089f3
 810897c:	081089f3 	.word	0x081089f3
 8108980:	081089f3 	.word	0x081089f3
 8108984:	081089e5 	.word	0x081089e5
 8108988:	2b40      	cmp	r3, #64	@ 0x40
 810898a:	d02e      	beq.n	81089ea <UART_SetConfig+0x8aa>
 810898c:	e031      	b.n	81089f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810898e:	f7fc fb3d 	bl	810500c <HAL_RCC_GetPCLK1Freq>
 8108992:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108994:	e033      	b.n	81089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108996:	f7fc fb4f 	bl	8105038 <HAL_RCC_GetPCLK2Freq>
 810899a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810899c:	e02f      	b.n	81089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810899e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81089a2:	4618      	mov	r0, r3
 81089a4:	f7fe fafe 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81089a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089ac:	e027      	b.n	81089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81089ae:	f107 0318 	add.w	r3, r7, #24
 81089b2:	4618      	mov	r0, r3
 81089b4:	f7fe fc4a 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81089b8:	69fb      	ldr	r3, [r7, #28]
 81089ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089bc:	e01f      	b.n	81089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81089be:	4b2d      	ldr	r3, [pc, #180]	@ (8108a74 <UART_SetConfig+0x934>)
 81089c0:	681b      	ldr	r3, [r3, #0]
 81089c2:	f003 0320 	and.w	r3, r3, #32
 81089c6:	2b00      	cmp	r3, #0
 81089c8:	d009      	beq.n	81089de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81089ca:	4b2a      	ldr	r3, [pc, #168]	@ (8108a74 <UART_SetConfig+0x934>)
 81089cc:	681b      	ldr	r3, [r3, #0]
 81089ce:	08db      	lsrs	r3, r3, #3
 81089d0:	f003 0303 	and.w	r3, r3, #3
 81089d4:	4a24      	ldr	r2, [pc, #144]	@ (8108a68 <UART_SetConfig+0x928>)
 81089d6:	fa22 f303 	lsr.w	r3, r2, r3
 81089da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81089dc:	e00f      	b.n	81089fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81089de:	4b22      	ldr	r3, [pc, #136]	@ (8108a68 <UART_SetConfig+0x928>)
 81089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089e2:	e00c      	b.n	81089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81089e4:	4b21      	ldr	r3, [pc, #132]	@ (8108a6c <UART_SetConfig+0x92c>)
 81089e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089e8:	e009      	b.n	81089fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81089ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81089f0:	e005      	b.n	81089fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81089f2:	2300      	movs	r3, #0
 81089f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81089f6:	2301      	movs	r3, #1
 81089f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81089fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81089fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108a00:	2b00      	cmp	r3, #0
 8108a02:	f000 80e7 	beq.w	8108bd4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108a06:	697b      	ldr	r3, [r7, #20]
 8108a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108a0a:	4a19      	ldr	r2, [pc, #100]	@ (8108a70 <UART_SetConfig+0x930>)
 8108a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108a10:	461a      	mov	r2, r3
 8108a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8108a18:	005a      	lsls	r2, r3, #1
 8108a1a:	697b      	ldr	r3, [r7, #20]
 8108a1c:	685b      	ldr	r3, [r3, #4]
 8108a1e:	085b      	lsrs	r3, r3, #1
 8108a20:	441a      	add	r2, r3
 8108a22:	697b      	ldr	r3, [r7, #20]
 8108a24:	685b      	ldr	r3, [r3, #4]
 8108a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a2e:	2b0f      	cmp	r3, #15
 8108a30:	d916      	bls.n	8108a60 <UART_SetConfig+0x920>
 8108a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108a38:	d212      	bcs.n	8108a60 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a3c:	b29b      	uxth	r3, r3
 8108a3e:	f023 030f 	bic.w	r3, r3, #15
 8108a42:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108a46:	085b      	lsrs	r3, r3, #1
 8108a48:	b29b      	uxth	r3, r3
 8108a4a:	f003 0307 	and.w	r3, r3, #7
 8108a4e:	b29a      	uxth	r2, r3
 8108a50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8108a52:	4313      	orrs	r3, r2
 8108a54:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8108a56:	697b      	ldr	r3, [r7, #20]
 8108a58:	681b      	ldr	r3, [r3, #0]
 8108a5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8108a5c:	60da      	str	r2, [r3, #12]
 8108a5e:	e0b9      	b.n	8108bd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108a60:	2301      	movs	r3, #1
 8108a62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108a66:	e0b5      	b.n	8108bd4 <UART_SetConfig+0xa94>
 8108a68:	03d09000 	.word	0x03d09000
 8108a6c:	003d0900 	.word	0x003d0900
 8108a70:	0810a264 	.word	0x0810a264
 8108a74:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108a78:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108a7c:	2b20      	cmp	r3, #32
 8108a7e:	dc49      	bgt.n	8108b14 <UART_SetConfig+0x9d4>
 8108a80:	2b00      	cmp	r3, #0
 8108a82:	db7c      	blt.n	8108b7e <UART_SetConfig+0xa3e>
 8108a84:	2b20      	cmp	r3, #32
 8108a86:	d87a      	bhi.n	8108b7e <UART_SetConfig+0xa3e>
 8108a88:	a201      	add	r2, pc, #4	@ (adr r2, 8108a90 <UART_SetConfig+0x950>)
 8108a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a8e:	bf00      	nop
 8108a90:	08108b1b 	.word	0x08108b1b
 8108a94:	08108b23 	.word	0x08108b23
 8108a98:	08108b7f 	.word	0x08108b7f
 8108a9c:	08108b7f 	.word	0x08108b7f
 8108aa0:	08108b2b 	.word	0x08108b2b
 8108aa4:	08108b7f 	.word	0x08108b7f
 8108aa8:	08108b7f 	.word	0x08108b7f
 8108aac:	08108b7f 	.word	0x08108b7f
 8108ab0:	08108b3b 	.word	0x08108b3b
 8108ab4:	08108b7f 	.word	0x08108b7f
 8108ab8:	08108b7f 	.word	0x08108b7f
 8108abc:	08108b7f 	.word	0x08108b7f
 8108ac0:	08108b7f 	.word	0x08108b7f
 8108ac4:	08108b7f 	.word	0x08108b7f
 8108ac8:	08108b7f 	.word	0x08108b7f
 8108acc:	08108b7f 	.word	0x08108b7f
 8108ad0:	08108b4b 	.word	0x08108b4b
 8108ad4:	08108b7f 	.word	0x08108b7f
 8108ad8:	08108b7f 	.word	0x08108b7f
 8108adc:	08108b7f 	.word	0x08108b7f
 8108ae0:	08108b7f 	.word	0x08108b7f
 8108ae4:	08108b7f 	.word	0x08108b7f
 8108ae8:	08108b7f 	.word	0x08108b7f
 8108aec:	08108b7f 	.word	0x08108b7f
 8108af0:	08108b7f 	.word	0x08108b7f
 8108af4:	08108b7f 	.word	0x08108b7f
 8108af8:	08108b7f 	.word	0x08108b7f
 8108afc:	08108b7f 	.word	0x08108b7f
 8108b00:	08108b7f 	.word	0x08108b7f
 8108b04:	08108b7f 	.word	0x08108b7f
 8108b08:	08108b7f 	.word	0x08108b7f
 8108b0c:	08108b7f 	.word	0x08108b7f
 8108b10:	08108b71 	.word	0x08108b71
 8108b14:	2b40      	cmp	r3, #64	@ 0x40
 8108b16:	d02e      	beq.n	8108b76 <UART_SetConfig+0xa36>
 8108b18:	e031      	b.n	8108b7e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108b1a:	f7fc fa77 	bl	810500c <HAL_RCC_GetPCLK1Freq>
 8108b1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108b20:	e033      	b.n	8108b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108b22:	f7fc fa89 	bl	8105038 <HAL_RCC_GetPCLK2Freq>
 8108b26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108b28:	e02f      	b.n	8108b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108b2e:	4618      	mov	r0, r3
 8108b30:	f7fe fa38 	bl	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b38:	e027      	b.n	8108b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108b3a:	f107 0318 	add.w	r3, r7, #24
 8108b3e:	4618      	mov	r0, r3
 8108b40:	f7fe fb84 	bl	810724c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108b44:	69fb      	ldr	r3, [r7, #28]
 8108b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b48:	e01f      	b.n	8108b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8108c00 <UART_SetConfig+0xac0>)
 8108b4c:	681b      	ldr	r3, [r3, #0]
 8108b4e:	f003 0320 	and.w	r3, r3, #32
 8108b52:	2b00      	cmp	r3, #0
 8108b54:	d009      	beq.n	8108b6a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108b56:	4b2a      	ldr	r3, [pc, #168]	@ (8108c00 <UART_SetConfig+0xac0>)
 8108b58:	681b      	ldr	r3, [r3, #0]
 8108b5a:	08db      	lsrs	r3, r3, #3
 8108b5c:	f003 0303 	and.w	r3, r3, #3
 8108b60:	4a28      	ldr	r2, [pc, #160]	@ (8108c04 <UART_SetConfig+0xac4>)
 8108b62:	fa22 f303 	lsr.w	r3, r2, r3
 8108b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108b68:	e00f      	b.n	8108b8a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108b6a:	4b26      	ldr	r3, [pc, #152]	@ (8108c04 <UART_SetConfig+0xac4>)
 8108b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b6e:	e00c      	b.n	8108b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108b70:	4b25      	ldr	r3, [pc, #148]	@ (8108c08 <UART_SetConfig+0xac8>)
 8108b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b74:	e009      	b.n	8108b8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108b7c:	e005      	b.n	8108b8a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108b7e:	2300      	movs	r3, #0
 8108b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108b82:	2301      	movs	r3, #1
 8108b84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8108b88:	bf00      	nop
    }

    if (pclk != 0U)
 8108b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b8c:	2b00      	cmp	r3, #0
 8108b8e:	d021      	beq.n	8108bd4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108b90:	697b      	ldr	r3, [r7, #20]
 8108b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108b94:	4a1d      	ldr	r2, [pc, #116]	@ (8108c0c <UART_SetConfig+0xacc>)
 8108b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108b9a:	461a      	mov	r2, r3
 8108b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8108ba2:	697b      	ldr	r3, [r7, #20]
 8108ba4:	685b      	ldr	r3, [r3, #4]
 8108ba6:	085b      	lsrs	r3, r3, #1
 8108ba8:	441a      	add	r2, r3
 8108baa:	697b      	ldr	r3, [r7, #20]
 8108bac:	685b      	ldr	r3, [r3, #4]
 8108bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8108bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bb6:	2b0f      	cmp	r3, #15
 8108bb8:	d909      	bls.n	8108bce <UART_SetConfig+0xa8e>
 8108bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108bc0:	d205      	bcs.n	8108bce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8108bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bc4:	b29a      	uxth	r2, r3
 8108bc6:	697b      	ldr	r3, [r7, #20]
 8108bc8:	681b      	ldr	r3, [r3, #0]
 8108bca:	60da      	str	r2, [r3, #12]
 8108bcc:	e002      	b.n	8108bd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108bce:	2301      	movs	r3, #1
 8108bd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108bd4:	697b      	ldr	r3, [r7, #20]
 8108bd6:	2201      	movs	r2, #1
 8108bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8108bdc:	697b      	ldr	r3, [r7, #20]
 8108bde:	2201      	movs	r2, #1
 8108be0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108be4:	697b      	ldr	r3, [r7, #20]
 8108be6:	2200      	movs	r2, #0
 8108be8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8108bea:	697b      	ldr	r3, [r7, #20]
 8108bec:	2200      	movs	r2, #0
 8108bee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8108bf0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8108bf4:	4618      	mov	r0, r3
 8108bf6:	3748      	adds	r7, #72	@ 0x48
 8108bf8:	46bd      	mov	sp, r7
 8108bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108bfe:	bf00      	nop
 8108c00:	58024400 	.word	0x58024400
 8108c04:	03d09000 	.word	0x03d09000
 8108c08:	003d0900 	.word	0x003d0900
 8108c0c:	0810a264 	.word	0x0810a264

08108c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108c10:	b480      	push	{r7}
 8108c12:	b083      	sub	sp, #12
 8108c14:	af00      	add	r7, sp, #0
 8108c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108c18:	687b      	ldr	r3, [r7, #4]
 8108c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108c1c:	f003 0308 	and.w	r3, r3, #8
 8108c20:	2b00      	cmp	r3, #0
 8108c22:	d00a      	beq.n	8108c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108c24:	687b      	ldr	r3, [r7, #4]
 8108c26:	681b      	ldr	r3, [r3, #0]
 8108c28:	685b      	ldr	r3, [r3, #4]
 8108c2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8108c2e:	687b      	ldr	r3, [r7, #4]
 8108c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8108c32:	687b      	ldr	r3, [r7, #4]
 8108c34:	681b      	ldr	r3, [r3, #0]
 8108c36:	430a      	orrs	r2, r1
 8108c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108c3a:	687b      	ldr	r3, [r7, #4]
 8108c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108c3e:	f003 0301 	and.w	r3, r3, #1
 8108c42:	2b00      	cmp	r3, #0
 8108c44:	d00a      	beq.n	8108c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	681b      	ldr	r3, [r3, #0]
 8108c4a:	685b      	ldr	r3, [r3, #4]
 8108c4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8108c50:	687b      	ldr	r3, [r7, #4]
 8108c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	681b      	ldr	r3, [r3, #0]
 8108c58:	430a      	orrs	r2, r1
 8108c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108c5c:	687b      	ldr	r3, [r7, #4]
 8108c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108c60:	f003 0302 	and.w	r3, r3, #2
 8108c64:	2b00      	cmp	r3, #0
 8108c66:	d00a      	beq.n	8108c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108c68:	687b      	ldr	r3, [r7, #4]
 8108c6a:	681b      	ldr	r3, [r3, #0]
 8108c6c:	685b      	ldr	r3, [r3, #4]
 8108c6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8108c72:	687b      	ldr	r3, [r7, #4]
 8108c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8108c76:	687b      	ldr	r3, [r7, #4]
 8108c78:	681b      	ldr	r3, [r3, #0]
 8108c7a:	430a      	orrs	r2, r1
 8108c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108c82:	f003 0304 	and.w	r3, r3, #4
 8108c86:	2b00      	cmp	r3, #0
 8108c88:	d00a      	beq.n	8108ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	681b      	ldr	r3, [r3, #0]
 8108c8e:	685b      	ldr	r3, [r3, #4]
 8108c90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8108c94:	687b      	ldr	r3, [r7, #4]
 8108c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108c98:	687b      	ldr	r3, [r7, #4]
 8108c9a:	681b      	ldr	r3, [r3, #0]
 8108c9c:	430a      	orrs	r2, r1
 8108c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108ca0:	687b      	ldr	r3, [r7, #4]
 8108ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108ca4:	f003 0310 	and.w	r3, r3, #16
 8108ca8:	2b00      	cmp	r3, #0
 8108caa:	d00a      	beq.n	8108cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108cac:	687b      	ldr	r3, [r7, #4]
 8108cae:	681b      	ldr	r3, [r3, #0]
 8108cb0:	689b      	ldr	r3, [r3, #8]
 8108cb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8108cb6:	687b      	ldr	r3, [r7, #4]
 8108cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	681b      	ldr	r3, [r3, #0]
 8108cbe:	430a      	orrs	r2, r1
 8108cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108cc2:	687b      	ldr	r3, [r7, #4]
 8108cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108cc6:	f003 0320 	and.w	r3, r3, #32
 8108cca:	2b00      	cmp	r3, #0
 8108ccc:	d00a      	beq.n	8108ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108cce:	687b      	ldr	r3, [r7, #4]
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	689b      	ldr	r3, [r3, #8]
 8108cd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8108cd8:	687b      	ldr	r3, [r7, #4]
 8108cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8108cdc:	687b      	ldr	r3, [r7, #4]
 8108cde:	681b      	ldr	r3, [r3, #0]
 8108ce0:	430a      	orrs	r2, r1
 8108ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108cec:	2b00      	cmp	r3, #0
 8108cee:	d01a      	beq.n	8108d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108cf0:	687b      	ldr	r3, [r7, #4]
 8108cf2:	681b      	ldr	r3, [r3, #0]
 8108cf4:	685b      	ldr	r3, [r3, #4]
 8108cf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8108cfa:	687b      	ldr	r3, [r7, #4]
 8108cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8108cfe:	687b      	ldr	r3, [r7, #4]
 8108d00:	681b      	ldr	r3, [r3, #0]
 8108d02:	430a      	orrs	r2, r1
 8108d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108d06:	687b      	ldr	r3, [r7, #4]
 8108d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108d0e:	d10a      	bne.n	8108d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	681b      	ldr	r3, [r3, #0]
 8108d14:	685b      	ldr	r3, [r3, #4]
 8108d16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8108d1a:	687b      	ldr	r3, [r7, #4]
 8108d1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	681b      	ldr	r3, [r3, #0]
 8108d22:	430a      	orrs	r2, r1
 8108d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108d26:	687b      	ldr	r3, [r7, #4]
 8108d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108d2e:	2b00      	cmp	r3, #0
 8108d30:	d00a      	beq.n	8108d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108d32:	687b      	ldr	r3, [r7, #4]
 8108d34:	681b      	ldr	r3, [r3, #0]
 8108d36:	685b      	ldr	r3, [r3, #4]
 8108d38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8108d3c:	687b      	ldr	r3, [r7, #4]
 8108d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8108d40:	687b      	ldr	r3, [r7, #4]
 8108d42:	681b      	ldr	r3, [r3, #0]
 8108d44:	430a      	orrs	r2, r1
 8108d46:	605a      	str	r2, [r3, #4]
  }
}
 8108d48:	bf00      	nop
 8108d4a:	370c      	adds	r7, #12
 8108d4c:	46bd      	mov	sp, r7
 8108d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d52:	4770      	bx	lr

08108d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108d54:	b580      	push	{r7, lr}
 8108d56:	b098      	sub	sp, #96	@ 0x60
 8108d58:	af02      	add	r7, sp, #8
 8108d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	2200      	movs	r2, #0
 8108d60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108d64:	f7f9 f900 	bl	8101f68 <HAL_GetTick>
 8108d68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108d6a:	687b      	ldr	r3, [r7, #4]
 8108d6c:	681b      	ldr	r3, [r3, #0]
 8108d6e:	681b      	ldr	r3, [r3, #0]
 8108d70:	f003 0308 	and.w	r3, r3, #8
 8108d74:	2b08      	cmp	r3, #8
 8108d76:	d12f      	bne.n	8108dd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108d78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8108d7c:	9300      	str	r3, [sp, #0]
 8108d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8108d80:	2200      	movs	r2, #0
 8108d82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8108d86:	6878      	ldr	r0, [r7, #4]
 8108d88:	f000 f88e 	bl	8108ea8 <UART_WaitOnFlagUntilTimeout>
 8108d8c:	4603      	mov	r3, r0
 8108d8e:	2b00      	cmp	r3, #0
 8108d90:	d022      	beq.n	8108dd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8108d92:	687b      	ldr	r3, [r7, #4]
 8108d94:	681b      	ldr	r3, [r3, #0]
 8108d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d9a:	e853 3f00 	ldrex	r3, [r3]
 8108d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8108da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	681b      	ldr	r3, [r3, #0]
 8108dac:	461a      	mov	r2, r3
 8108dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8108db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8108db2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108db4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8108db6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108db8:	e841 2300 	strex	r3, r2, [r1]
 8108dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8108dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108dc0:	2b00      	cmp	r3, #0
 8108dc2:	d1e6      	bne.n	8108d92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8108dc4:	687b      	ldr	r3, [r7, #4]
 8108dc6:	2220      	movs	r2, #32
 8108dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8108dcc:	687b      	ldr	r3, [r7, #4]
 8108dce:	2200      	movs	r2, #0
 8108dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108dd4:	2303      	movs	r3, #3
 8108dd6:	e063      	b.n	8108ea0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108dd8:	687b      	ldr	r3, [r7, #4]
 8108dda:	681b      	ldr	r3, [r3, #0]
 8108ddc:	681b      	ldr	r3, [r3, #0]
 8108dde:	f003 0304 	and.w	r3, r3, #4
 8108de2:	2b04      	cmp	r3, #4
 8108de4:	d149      	bne.n	8108e7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108de6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8108dea:	9300      	str	r3, [sp, #0]
 8108dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8108dee:	2200      	movs	r2, #0
 8108df0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8108df4:	6878      	ldr	r0, [r7, #4]
 8108df6:	f000 f857 	bl	8108ea8 <UART_WaitOnFlagUntilTimeout>
 8108dfa:	4603      	mov	r3, r0
 8108dfc:	2b00      	cmp	r3, #0
 8108dfe:	d03c      	beq.n	8108e7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108e00:	687b      	ldr	r3, [r7, #4]
 8108e02:	681b      	ldr	r3, [r3, #0]
 8108e04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e08:	e853 3f00 	ldrex	r3, [r3]
 8108e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8108e0e:	6a3b      	ldr	r3, [r7, #32]
 8108e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8108e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8108e16:	687b      	ldr	r3, [r7, #4]
 8108e18:	681b      	ldr	r3, [r3, #0]
 8108e1a:	461a      	mov	r2, r3
 8108e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8108e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8108e20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8108e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108e26:	e841 2300 	strex	r3, r2, [r1]
 8108e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8108e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e2e:	2b00      	cmp	r3, #0
 8108e30:	d1e6      	bne.n	8108e00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108e32:	687b      	ldr	r3, [r7, #4]
 8108e34:	681b      	ldr	r3, [r3, #0]
 8108e36:	3308      	adds	r3, #8
 8108e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108e3a:	693b      	ldr	r3, [r7, #16]
 8108e3c:	e853 3f00 	ldrex	r3, [r3]
 8108e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8108e42:	68fb      	ldr	r3, [r7, #12]
 8108e44:	f023 0301 	bic.w	r3, r3, #1
 8108e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8108e4a:	687b      	ldr	r3, [r7, #4]
 8108e4c:	681b      	ldr	r3, [r3, #0]
 8108e4e:	3308      	adds	r3, #8
 8108e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8108e52:	61fa      	str	r2, [r7, #28]
 8108e54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108e56:	69b9      	ldr	r1, [r7, #24]
 8108e58:	69fa      	ldr	r2, [r7, #28]
 8108e5a:	e841 2300 	strex	r3, r2, [r1]
 8108e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8108e60:	697b      	ldr	r3, [r7, #20]
 8108e62:	2b00      	cmp	r3, #0
 8108e64:	d1e5      	bne.n	8108e32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	2220      	movs	r2, #32
 8108e6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8108e6e:	687b      	ldr	r3, [r7, #4]
 8108e70:	2200      	movs	r2, #0
 8108e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108e76:	2303      	movs	r3, #3
 8108e78:	e012      	b.n	8108ea0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108e7a:	687b      	ldr	r3, [r7, #4]
 8108e7c:	2220      	movs	r2, #32
 8108e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8108e82:	687b      	ldr	r3, [r7, #4]
 8108e84:	2220      	movs	r2, #32
 8108e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108e8a:	687b      	ldr	r3, [r7, #4]
 8108e8c:	2200      	movs	r2, #0
 8108e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8108e90:	687b      	ldr	r3, [r7, #4]
 8108e92:	2200      	movs	r2, #0
 8108e94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	2200      	movs	r2, #0
 8108e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8108e9e:	2300      	movs	r3, #0
}
 8108ea0:	4618      	mov	r0, r3
 8108ea2:	3758      	adds	r7, #88	@ 0x58
 8108ea4:	46bd      	mov	sp, r7
 8108ea6:	bd80      	pop	{r7, pc}

08108ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108ea8:	b580      	push	{r7, lr}
 8108eaa:	b084      	sub	sp, #16
 8108eac:	af00      	add	r7, sp, #0
 8108eae:	60f8      	str	r0, [r7, #12]
 8108eb0:	60b9      	str	r1, [r7, #8]
 8108eb2:	603b      	str	r3, [r7, #0]
 8108eb4:	4613      	mov	r3, r2
 8108eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108eb8:	e04f      	b.n	8108f5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108eba:	69bb      	ldr	r3, [r7, #24]
 8108ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108ec0:	d04b      	beq.n	8108f5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108ec2:	f7f9 f851 	bl	8101f68 <HAL_GetTick>
 8108ec6:	4602      	mov	r2, r0
 8108ec8:	683b      	ldr	r3, [r7, #0]
 8108eca:	1ad3      	subs	r3, r2, r3
 8108ecc:	69ba      	ldr	r2, [r7, #24]
 8108ece:	429a      	cmp	r2, r3
 8108ed0:	d302      	bcc.n	8108ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8108ed2:	69bb      	ldr	r3, [r7, #24]
 8108ed4:	2b00      	cmp	r3, #0
 8108ed6:	d101      	bne.n	8108edc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8108ed8:	2303      	movs	r3, #3
 8108eda:	e04e      	b.n	8108f7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8108edc:	68fb      	ldr	r3, [r7, #12]
 8108ede:	681b      	ldr	r3, [r3, #0]
 8108ee0:	681b      	ldr	r3, [r3, #0]
 8108ee2:	f003 0304 	and.w	r3, r3, #4
 8108ee6:	2b00      	cmp	r3, #0
 8108ee8:	d037      	beq.n	8108f5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8108eea:	68bb      	ldr	r3, [r7, #8]
 8108eec:	2b80      	cmp	r3, #128	@ 0x80
 8108eee:	d034      	beq.n	8108f5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8108ef0:	68bb      	ldr	r3, [r7, #8]
 8108ef2:	2b40      	cmp	r3, #64	@ 0x40
 8108ef4:	d031      	beq.n	8108f5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8108ef6:	68fb      	ldr	r3, [r7, #12]
 8108ef8:	681b      	ldr	r3, [r3, #0]
 8108efa:	69db      	ldr	r3, [r3, #28]
 8108efc:	f003 0308 	and.w	r3, r3, #8
 8108f00:	2b08      	cmp	r3, #8
 8108f02:	d110      	bne.n	8108f26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8108f04:	68fb      	ldr	r3, [r7, #12]
 8108f06:	681b      	ldr	r3, [r3, #0]
 8108f08:	2208      	movs	r2, #8
 8108f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8108f0c:	68f8      	ldr	r0, [r7, #12]
 8108f0e:	f000 f838 	bl	8108f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8108f12:	68fb      	ldr	r3, [r7, #12]
 8108f14:	2208      	movs	r2, #8
 8108f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108f1a:	68fb      	ldr	r3, [r7, #12]
 8108f1c:	2200      	movs	r2, #0
 8108f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8108f22:	2301      	movs	r3, #1
 8108f24:	e029      	b.n	8108f7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108f26:	68fb      	ldr	r3, [r7, #12]
 8108f28:	681b      	ldr	r3, [r3, #0]
 8108f2a:	69db      	ldr	r3, [r3, #28]
 8108f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8108f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108f34:	d111      	bne.n	8108f5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108f36:	68fb      	ldr	r3, [r7, #12]
 8108f38:	681b      	ldr	r3, [r3, #0]
 8108f3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8108f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8108f40:	68f8      	ldr	r0, [r7, #12]
 8108f42:	f000 f81e 	bl	8108f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108f46:	68fb      	ldr	r3, [r7, #12]
 8108f48:	2220      	movs	r2, #32
 8108f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108f4e:	68fb      	ldr	r3, [r7, #12]
 8108f50:	2200      	movs	r2, #0
 8108f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8108f56:	2303      	movs	r3, #3
 8108f58:	e00f      	b.n	8108f7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108f5a:	68fb      	ldr	r3, [r7, #12]
 8108f5c:	681b      	ldr	r3, [r3, #0]
 8108f5e:	69da      	ldr	r2, [r3, #28]
 8108f60:	68bb      	ldr	r3, [r7, #8]
 8108f62:	4013      	ands	r3, r2
 8108f64:	68ba      	ldr	r2, [r7, #8]
 8108f66:	429a      	cmp	r2, r3
 8108f68:	bf0c      	ite	eq
 8108f6a:	2301      	moveq	r3, #1
 8108f6c:	2300      	movne	r3, #0
 8108f6e:	b2db      	uxtb	r3, r3
 8108f70:	461a      	mov	r2, r3
 8108f72:	79fb      	ldrb	r3, [r7, #7]
 8108f74:	429a      	cmp	r2, r3
 8108f76:	d0a0      	beq.n	8108eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108f78:	2300      	movs	r3, #0
}
 8108f7a:	4618      	mov	r0, r3
 8108f7c:	3710      	adds	r7, #16
 8108f7e:	46bd      	mov	sp, r7
 8108f80:	bd80      	pop	{r7, pc}

08108f82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108f82:	b480      	push	{r7}
 8108f84:	b095      	sub	sp, #84	@ 0x54
 8108f86:	af00      	add	r7, sp, #0
 8108f88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108f8a:	687b      	ldr	r3, [r7, #4]
 8108f8c:	681b      	ldr	r3, [r3, #0]
 8108f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108f92:	e853 3f00 	ldrex	r3, [r3]
 8108f96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8108f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8108f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	681b      	ldr	r3, [r3, #0]
 8108fa4:	461a      	mov	r2, r3
 8108fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8108fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8108faa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108fac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8108fae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8108fb0:	e841 2300 	strex	r3, r2, [r1]
 8108fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8108fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108fb8:	2b00      	cmp	r3, #0
 8108fba:	d1e6      	bne.n	8108f8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	681b      	ldr	r3, [r3, #0]
 8108fc0:	3308      	adds	r3, #8
 8108fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108fc4:	6a3b      	ldr	r3, [r7, #32]
 8108fc6:	e853 3f00 	ldrex	r3, [r3]
 8108fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8108fcc:	69fb      	ldr	r3, [r7, #28]
 8108fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108fd2:	f023 0301 	bic.w	r3, r3, #1
 8108fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8108fd8:	687b      	ldr	r3, [r7, #4]
 8108fda:	681b      	ldr	r3, [r3, #0]
 8108fdc:	3308      	adds	r3, #8
 8108fde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8108fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8108fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108fe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8108fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108fe8:	e841 2300 	strex	r3, r2, [r1]
 8108fec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8108fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ff0:	2b00      	cmp	r3, #0
 8108ff2:	d1e3      	bne.n	8108fbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108ff4:	687b      	ldr	r3, [r7, #4]
 8108ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108ff8:	2b01      	cmp	r3, #1
 8108ffa:	d118      	bne.n	810902e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	681b      	ldr	r3, [r3, #0]
 8109000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109002:	68fb      	ldr	r3, [r7, #12]
 8109004:	e853 3f00 	ldrex	r3, [r3]
 8109008:	60bb      	str	r3, [r7, #8]
   return(result);
 810900a:	68bb      	ldr	r3, [r7, #8]
 810900c:	f023 0310 	bic.w	r3, r3, #16
 8109010:	647b      	str	r3, [r7, #68]	@ 0x44
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	681b      	ldr	r3, [r3, #0]
 8109016:	461a      	mov	r2, r3
 8109018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810901a:	61bb      	str	r3, [r7, #24]
 810901c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810901e:	6979      	ldr	r1, [r7, #20]
 8109020:	69ba      	ldr	r2, [r7, #24]
 8109022:	e841 2300 	strex	r3, r2, [r1]
 8109026:	613b      	str	r3, [r7, #16]
   return(result);
 8109028:	693b      	ldr	r3, [r7, #16]
 810902a:	2b00      	cmp	r3, #0
 810902c:	d1e6      	bne.n	8108ffc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810902e:	687b      	ldr	r3, [r7, #4]
 8109030:	2220      	movs	r2, #32
 8109032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109036:	687b      	ldr	r3, [r7, #4]
 8109038:	2200      	movs	r2, #0
 810903a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810903c:	687b      	ldr	r3, [r7, #4]
 810903e:	2200      	movs	r2, #0
 8109040:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8109042:	bf00      	nop
 8109044:	3754      	adds	r7, #84	@ 0x54
 8109046:	46bd      	mov	sp, r7
 8109048:	f85d 7b04 	ldr.w	r7, [sp], #4
 810904c:	4770      	bx	lr

0810904e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810904e:	b480      	push	{r7}
 8109050:	b085      	sub	sp, #20
 8109052:	af00      	add	r7, sp, #0
 8109054:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109056:	687b      	ldr	r3, [r7, #4]
 8109058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810905c:	2b01      	cmp	r3, #1
 810905e:	d101      	bne.n	8109064 <HAL_UARTEx_DisableFifoMode+0x16>
 8109060:	2302      	movs	r3, #2
 8109062:	e027      	b.n	81090b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8109064:	687b      	ldr	r3, [r7, #4]
 8109066:	2201      	movs	r2, #1
 8109068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810906c:	687b      	ldr	r3, [r7, #4]
 810906e:	2224      	movs	r2, #36	@ 0x24
 8109070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109074:	687b      	ldr	r3, [r7, #4]
 8109076:	681b      	ldr	r3, [r3, #0]
 8109078:	681b      	ldr	r3, [r3, #0]
 810907a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810907c:	687b      	ldr	r3, [r7, #4]
 810907e:	681b      	ldr	r3, [r3, #0]
 8109080:	681a      	ldr	r2, [r3, #0]
 8109082:	687b      	ldr	r3, [r7, #4]
 8109084:	681b      	ldr	r3, [r3, #0]
 8109086:	f022 0201 	bic.w	r2, r2, #1
 810908a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810908c:	68fb      	ldr	r3, [r7, #12]
 810908e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8109092:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	2200      	movs	r2, #0
 8109098:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810909a:	687b      	ldr	r3, [r7, #4]
 810909c:	681b      	ldr	r3, [r3, #0]
 810909e:	68fa      	ldr	r2, [r7, #12]
 81090a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81090a2:	687b      	ldr	r3, [r7, #4]
 81090a4:	2220      	movs	r2, #32
 81090a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81090aa:	687b      	ldr	r3, [r7, #4]
 81090ac:	2200      	movs	r2, #0
 81090ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81090b2:	2300      	movs	r3, #0
}
 81090b4:	4618      	mov	r0, r3
 81090b6:	3714      	adds	r7, #20
 81090b8:	46bd      	mov	sp, r7
 81090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090be:	4770      	bx	lr

081090c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81090c0:	b580      	push	{r7, lr}
 81090c2:	b084      	sub	sp, #16
 81090c4:	af00      	add	r7, sp, #0
 81090c6:	6078      	str	r0, [r7, #4]
 81090c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81090ca:	687b      	ldr	r3, [r7, #4]
 81090cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81090d0:	2b01      	cmp	r3, #1
 81090d2:	d101      	bne.n	81090d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81090d4:	2302      	movs	r3, #2
 81090d6:	e02d      	b.n	8109134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	2201      	movs	r2, #1
 81090dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81090e0:	687b      	ldr	r3, [r7, #4]
 81090e2:	2224      	movs	r2, #36	@ 0x24
 81090e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81090e8:	687b      	ldr	r3, [r7, #4]
 81090ea:	681b      	ldr	r3, [r3, #0]
 81090ec:	681b      	ldr	r3, [r3, #0]
 81090ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81090f0:	687b      	ldr	r3, [r7, #4]
 81090f2:	681b      	ldr	r3, [r3, #0]
 81090f4:	681a      	ldr	r2, [r3, #0]
 81090f6:	687b      	ldr	r3, [r7, #4]
 81090f8:	681b      	ldr	r3, [r3, #0]
 81090fa:	f022 0201 	bic.w	r2, r2, #1
 81090fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109100:	687b      	ldr	r3, [r7, #4]
 8109102:	681b      	ldr	r3, [r3, #0]
 8109104:	689b      	ldr	r3, [r3, #8]
 8109106:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810910a:	687b      	ldr	r3, [r7, #4]
 810910c:	681b      	ldr	r3, [r3, #0]
 810910e:	683a      	ldr	r2, [r7, #0]
 8109110:	430a      	orrs	r2, r1
 8109112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109114:	6878      	ldr	r0, [r7, #4]
 8109116:	f000 f84f 	bl	81091b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810911a:	687b      	ldr	r3, [r7, #4]
 810911c:	681b      	ldr	r3, [r3, #0]
 810911e:	68fa      	ldr	r2, [r7, #12]
 8109120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109122:	687b      	ldr	r3, [r7, #4]
 8109124:	2220      	movs	r2, #32
 8109126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810912a:	687b      	ldr	r3, [r7, #4]
 810912c:	2200      	movs	r2, #0
 810912e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109132:	2300      	movs	r3, #0
}
 8109134:	4618      	mov	r0, r3
 8109136:	3710      	adds	r7, #16
 8109138:	46bd      	mov	sp, r7
 810913a:	bd80      	pop	{r7, pc}

0810913c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810913c:	b580      	push	{r7, lr}
 810913e:	b084      	sub	sp, #16
 8109140:	af00      	add	r7, sp, #0
 8109142:	6078      	str	r0, [r7, #4]
 8109144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109146:	687b      	ldr	r3, [r7, #4]
 8109148:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810914c:	2b01      	cmp	r3, #1
 810914e:	d101      	bne.n	8109154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109150:	2302      	movs	r3, #2
 8109152:	e02d      	b.n	81091b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109154:	687b      	ldr	r3, [r7, #4]
 8109156:	2201      	movs	r2, #1
 8109158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810915c:	687b      	ldr	r3, [r7, #4]
 810915e:	2224      	movs	r2, #36	@ 0x24
 8109160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109164:	687b      	ldr	r3, [r7, #4]
 8109166:	681b      	ldr	r3, [r3, #0]
 8109168:	681b      	ldr	r3, [r3, #0]
 810916a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810916c:	687b      	ldr	r3, [r7, #4]
 810916e:	681b      	ldr	r3, [r3, #0]
 8109170:	681a      	ldr	r2, [r3, #0]
 8109172:	687b      	ldr	r3, [r7, #4]
 8109174:	681b      	ldr	r3, [r3, #0]
 8109176:	f022 0201 	bic.w	r2, r2, #1
 810917a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	681b      	ldr	r3, [r3, #0]
 8109180:	689b      	ldr	r3, [r3, #8]
 8109182:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	681b      	ldr	r3, [r3, #0]
 810918a:	683a      	ldr	r2, [r7, #0]
 810918c:	430a      	orrs	r2, r1
 810918e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109190:	6878      	ldr	r0, [r7, #4]
 8109192:	f000 f811 	bl	81091b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	681b      	ldr	r3, [r3, #0]
 810919a:	68fa      	ldr	r2, [r7, #12]
 810919c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810919e:	687b      	ldr	r3, [r7, #4]
 81091a0:	2220      	movs	r2, #32
 81091a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81091a6:	687b      	ldr	r3, [r7, #4]
 81091a8:	2200      	movs	r2, #0
 81091aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81091ae:	2300      	movs	r3, #0
}
 81091b0:	4618      	mov	r0, r3
 81091b2:	3710      	adds	r7, #16
 81091b4:	46bd      	mov	sp, r7
 81091b6:	bd80      	pop	{r7, pc}

081091b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81091b8:	b480      	push	{r7}
 81091ba:	b085      	sub	sp, #20
 81091bc:	af00      	add	r7, sp, #0
 81091be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81091c0:	687b      	ldr	r3, [r7, #4]
 81091c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81091c4:	2b00      	cmp	r3, #0
 81091c6:	d108      	bne.n	81091da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81091c8:	687b      	ldr	r3, [r7, #4]
 81091ca:	2201      	movs	r2, #1
 81091cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 81091d0:	687b      	ldr	r3, [r7, #4]
 81091d2:	2201      	movs	r2, #1
 81091d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81091d8:	e031      	b.n	810923e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81091da:	2310      	movs	r3, #16
 81091dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81091de:	2310      	movs	r3, #16
 81091e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81091e2:	687b      	ldr	r3, [r7, #4]
 81091e4:	681b      	ldr	r3, [r3, #0]
 81091e6:	689b      	ldr	r3, [r3, #8]
 81091e8:	0e5b      	lsrs	r3, r3, #25
 81091ea:	b2db      	uxtb	r3, r3
 81091ec:	f003 0307 	and.w	r3, r3, #7
 81091f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81091f2:	687b      	ldr	r3, [r7, #4]
 81091f4:	681b      	ldr	r3, [r3, #0]
 81091f6:	689b      	ldr	r3, [r3, #8]
 81091f8:	0f5b      	lsrs	r3, r3, #29
 81091fa:	b2db      	uxtb	r3, r3
 81091fc:	f003 0307 	and.w	r3, r3, #7
 8109200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109202:	7bbb      	ldrb	r3, [r7, #14]
 8109204:	7b3a      	ldrb	r2, [r7, #12]
 8109206:	4911      	ldr	r1, [pc, #68]	@ (810924c <UARTEx_SetNbDataToProcess+0x94>)
 8109208:	5c8a      	ldrb	r2, [r1, r2]
 810920a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810920e:	7b3a      	ldrb	r2, [r7, #12]
 8109210:	490f      	ldr	r1, [pc, #60]	@ (8109250 <UARTEx_SetNbDataToProcess+0x98>)
 8109212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109214:	fb93 f3f2 	sdiv	r3, r3, r2
 8109218:	b29a      	uxth	r2, r3
 810921a:	687b      	ldr	r3, [r7, #4]
 810921c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109220:	7bfb      	ldrb	r3, [r7, #15]
 8109222:	7b7a      	ldrb	r2, [r7, #13]
 8109224:	4909      	ldr	r1, [pc, #36]	@ (810924c <UARTEx_SetNbDataToProcess+0x94>)
 8109226:	5c8a      	ldrb	r2, [r1, r2]
 8109228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810922c:	7b7a      	ldrb	r2, [r7, #13]
 810922e:	4908      	ldr	r1, [pc, #32]	@ (8109250 <UARTEx_SetNbDataToProcess+0x98>)
 8109230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109232:	fb93 f3f2 	sdiv	r3, r3, r2
 8109236:	b29a      	uxth	r2, r3
 8109238:	687b      	ldr	r3, [r7, #4]
 810923a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810923e:	bf00      	nop
 8109240:	3714      	adds	r7, #20
 8109242:	46bd      	mov	sp, r7
 8109244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109248:	4770      	bx	lr
 810924a:	bf00      	nop
 810924c:	0810a27c 	.word	0x0810a27c
 8109250:	0810a284 	.word	0x0810a284

08109254 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8109254:	b480      	push	{r7}
 8109256:	b083      	sub	sp, #12
 8109258:	af00      	add	r7, sp, #0
 810925a:	6078      	str	r0, [r7, #4]
 810925c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810925e:	683b      	ldr	r3, [r7, #0]
 8109260:	681b      	ldr	r3, [r3, #0]
 8109262:	2b00      	cmp	r3, #0
 8109264:	d123      	bne.n	81092ae <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	681b      	ldr	r3, [r3, #0]
 810926a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810926e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8109272:	683a      	ldr	r2, [r7, #0]
 8109274:	6851      	ldr	r1, [r2, #4]
 8109276:	683a      	ldr	r2, [r7, #0]
 8109278:	6892      	ldr	r2, [r2, #8]
 810927a:	4311      	orrs	r1, r2
 810927c:	683a      	ldr	r2, [r7, #0]
 810927e:	68d2      	ldr	r2, [r2, #12]
 8109280:	4311      	orrs	r1, r2
 8109282:	683a      	ldr	r2, [r7, #0]
 8109284:	6912      	ldr	r2, [r2, #16]
 8109286:	4311      	orrs	r1, r2
 8109288:	683a      	ldr	r2, [r7, #0]
 810928a:	6952      	ldr	r2, [r2, #20]
 810928c:	4311      	orrs	r1, r2
 810928e:	683a      	ldr	r2, [r7, #0]
 8109290:	6992      	ldr	r2, [r2, #24]
 8109292:	4311      	orrs	r1, r2
 8109294:	683a      	ldr	r2, [r7, #0]
 8109296:	69d2      	ldr	r2, [r2, #28]
 8109298:	4311      	orrs	r1, r2
 810929a:	683a      	ldr	r2, [r7, #0]
 810929c:	6a12      	ldr	r2, [r2, #32]
 810929e:	4311      	orrs	r1, r2
 81092a0:	683a      	ldr	r2, [r7, #0]
 81092a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 81092a4:	430a      	orrs	r2, r1
 81092a6:	431a      	orrs	r2, r3
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	601a      	str	r2, [r3, #0]
 81092ac:	e028      	b.n	8109300 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 81092ae:	687b      	ldr	r3, [r7, #4]
 81092b0:	681b      	ldr	r3, [r3, #0]
 81092b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 81092b6:	683b      	ldr	r3, [r7, #0]
 81092b8:	69d9      	ldr	r1, [r3, #28]
 81092ba:	683b      	ldr	r3, [r7, #0]
 81092bc:	6a1b      	ldr	r3, [r3, #32]
 81092be:	4319      	orrs	r1, r3
 81092c0:	683b      	ldr	r3, [r7, #0]
 81092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81092c4:	430b      	orrs	r3, r1
 81092c6:	431a      	orrs	r2, r3
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	685b      	ldr	r3, [r3, #4]
 81092d0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 81092d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 81092d8:	683a      	ldr	r2, [r7, #0]
 81092da:	6851      	ldr	r1, [r2, #4]
 81092dc:	683a      	ldr	r2, [r7, #0]
 81092de:	6892      	ldr	r2, [r2, #8]
 81092e0:	4311      	orrs	r1, r2
 81092e2:	683a      	ldr	r2, [r7, #0]
 81092e4:	68d2      	ldr	r2, [r2, #12]
 81092e6:	4311      	orrs	r1, r2
 81092e8:	683a      	ldr	r2, [r7, #0]
 81092ea:	6912      	ldr	r2, [r2, #16]
 81092ec:	4311      	orrs	r1, r2
 81092ee:	683a      	ldr	r2, [r7, #0]
 81092f0:	6952      	ldr	r2, [r2, #20]
 81092f2:	4311      	orrs	r1, r2
 81092f4:	683a      	ldr	r2, [r7, #0]
 81092f6:	6992      	ldr	r2, [r2, #24]
 81092f8:	430a      	orrs	r2, r1
 81092fa:	431a      	orrs	r2, r3
 81092fc:	687b      	ldr	r3, [r7, #4]
 81092fe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8109300:	2300      	movs	r3, #0
}
 8109302:	4618      	mov	r0, r3
 8109304:	370c      	adds	r7, #12
 8109306:	46bd      	mov	sp, r7
 8109308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810930c:	4770      	bx	lr

0810930e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810930e:	b480      	push	{r7}
 8109310:	b085      	sub	sp, #20
 8109312:	af00      	add	r7, sp, #0
 8109314:	60f8      	str	r0, [r7, #12]
 8109316:	60b9      	str	r1, [r7, #8]
 8109318:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	2b00      	cmp	r3, #0
 810931e:	d128      	bne.n	8109372 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8109320:	68fb      	ldr	r3, [r7, #12]
 8109322:	689b      	ldr	r3, [r3, #8]
 8109324:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8109328:	68bb      	ldr	r3, [r7, #8]
 810932a:	681b      	ldr	r3, [r3, #0]
 810932c:	1e59      	subs	r1, r3, #1
 810932e:	68bb      	ldr	r3, [r7, #8]
 8109330:	685b      	ldr	r3, [r3, #4]
 8109332:	3b01      	subs	r3, #1
 8109334:	011b      	lsls	r3, r3, #4
 8109336:	4319      	orrs	r1, r3
 8109338:	68bb      	ldr	r3, [r7, #8]
 810933a:	689b      	ldr	r3, [r3, #8]
 810933c:	3b01      	subs	r3, #1
 810933e:	021b      	lsls	r3, r3, #8
 8109340:	4319      	orrs	r1, r3
 8109342:	68bb      	ldr	r3, [r7, #8]
 8109344:	68db      	ldr	r3, [r3, #12]
 8109346:	3b01      	subs	r3, #1
 8109348:	031b      	lsls	r3, r3, #12
 810934a:	4319      	orrs	r1, r3
 810934c:	68bb      	ldr	r3, [r7, #8]
 810934e:	691b      	ldr	r3, [r3, #16]
 8109350:	3b01      	subs	r3, #1
 8109352:	041b      	lsls	r3, r3, #16
 8109354:	4319      	orrs	r1, r3
 8109356:	68bb      	ldr	r3, [r7, #8]
 8109358:	695b      	ldr	r3, [r3, #20]
 810935a:	3b01      	subs	r3, #1
 810935c:	051b      	lsls	r3, r3, #20
 810935e:	4319      	orrs	r1, r3
 8109360:	68bb      	ldr	r3, [r7, #8]
 8109362:	699b      	ldr	r3, [r3, #24]
 8109364:	3b01      	subs	r3, #1
 8109366:	061b      	lsls	r3, r3, #24
 8109368:	430b      	orrs	r3, r1
 810936a:	431a      	orrs	r2, r3
 810936c:	68fb      	ldr	r3, [r7, #12]
 810936e:	609a      	str	r2, [r3, #8]
 8109370:	e02f      	b.n	81093d2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8109372:	68fb      	ldr	r3, [r7, #12]
 8109374:	689b      	ldr	r3, [r3, #8]
 8109376:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810937a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810937e:	68ba      	ldr	r2, [r7, #8]
 8109380:	68d2      	ldr	r2, [r2, #12]
 8109382:	3a01      	subs	r2, #1
 8109384:	0311      	lsls	r1, r2, #12
 8109386:	68ba      	ldr	r2, [r7, #8]
 8109388:	6952      	ldr	r2, [r2, #20]
 810938a:	3a01      	subs	r2, #1
 810938c:	0512      	lsls	r2, r2, #20
 810938e:	430a      	orrs	r2, r1
 8109390:	431a      	orrs	r2, r3
 8109392:	68fb      	ldr	r3, [r7, #12]
 8109394:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8109396:	68fb      	ldr	r3, [r7, #12]
 8109398:	68db      	ldr	r3, [r3, #12]
 810939a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810939e:	68bb      	ldr	r3, [r7, #8]
 81093a0:	681b      	ldr	r3, [r3, #0]
 81093a2:	1e59      	subs	r1, r3, #1
 81093a4:	68bb      	ldr	r3, [r7, #8]
 81093a6:	685b      	ldr	r3, [r3, #4]
 81093a8:	3b01      	subs	r3, #1
 81093aa:	011b      	lsls	r3, r3, #4
 81093ac:	4319      	orrs	r1, r3
 81093ae:	68bb      	ldr	r3, [r7, #8]
 81093b0:	689b      	ldr	r3, [r3, #8]
 81093b2:	3b01      	subs	r3, #1
 81093b4:	021b      	lsls	r3, r3, #8
 81093b6:	4319      	orrs	r1, r3
 81093b8:	68bb      	ldr	r3, [r7, #8]
 81093ba:	691b      	ldr	r3, [r3, #16]
 81093bc:	3b01      	subs	r3, #1
 81093be:	041b      	lsls	r3, r3, #16
 81093c0:	4319      	orrs	r1, r3
 81093c2:	68bb      	ldr	r3, [r7, #8]
 81093c4:	699b      	ldr	r3, [r3, #24]
 81093c6:	3b01      	subs	r3, #1
 81093c8:	061b      	lsls	r3, r3, #24
 81093ca:	430b      	orrs	r3, r1
 81093cc:	431a      	orrs	r2, r3
 81093ce:	68fb      	ldr	r3, [r7, #12]
 81093d0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 81093d2:	2300      	movs	r3, #0
}
 81093d4:	4618      	mov	r0, r3
 81093d6:	3714      	adds	r7, #20
 81093d8:	46bd      	mov	sp, r7
 81093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093de:	4770      	bx	lr

081093e0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 81093e0:	b084      	sub	sp, #16
 81093e2:	b480      	push	{r7}
 81093e4:	b085      	sub	sp, #20
 81093e6:	af00      	add	r7, sp, #0
 81093e8:	6078      	str	r0, [r7, #4]
 81093ea:	f107 001c 	add.w	r0, r7, #28
 81093ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 81093f2:	2300      	movs	r3, #0
 81093f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 81093f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 81093f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 81093fa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 81093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 81093fe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8109400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8109402:	431a      	orrs	r2, r3
             Init.ClockDiv
 8109404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8109406:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8109408:	68fa      	ldr	r2, [r7, #12]
 810940a:	4313      	orrs	r3, r2
 810940c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810940e:	687b      	ldr	r3, [r7, #4]
 8109410:	685a      	ldr	r2, [r3, #4]
 8109412:	4b07      	ldr	r3, [pc, #28]	@ (8109430 <SDMMC_Init+0x50>)
 8109414:	4013      	ands	r3, r2
 8109416:	68fa      	ldr	r2, [r7, #12]
 8109418:	431a      	orrs	r2, r3
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810941e:	2300      	movs	r3, #0
}
 8109420:	4618      	mov	r0, r3
 8109422:	3714      	adds	r7, #20
 8109424:	46bd      	mov	sp, r7
 8109426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810942a:	b004      	add	sp, #16
 810942c:	4770      	bx	lr
 810942e:	bf00      	nop
 8109430:	ffc02c00 	.word	0xffc02c00

08109434 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8109434:	b480      	push	{r7}
 8109436:	b083      	sub	sp, #12
 8109438:	af00      	add	r7, sp, #0
 810943a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8109442:	4618      	mov	r0, r3
 8109444:	370c      	adds	r7, #12
 8109446:	46bd      	mov	sp, r7
 8109448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810944c:	4770      	bx	lr

0810944e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810944e:	b480      	push	{r7}
 8109450:	b083      	sub	sp, #12
 8109452:	af00      	add	r7, sp, #0
 8109454:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8109456:	687b      	ldr	r3, [r7, #4]
 8109458:	681b      	ldr	r3, [r3, #0]
 810945a:	f043 0203 	orr.w	r2, r3, #3
 810945e:	687b      	ldr	r3, [r7, #4]
 8109460:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8109462:	2300      	movs	r3, #0
}
 8109464:	4618      	mov	r0, r3
 8109466:	370c      	adds	r7, #12
 8109468:	46bd      	mov	sp, r7
 810946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810946e:	4770      	bx	lr

08109470 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8109470:	b480      	push	{r7}
 8109472:	b083      	sub	sp, #12
 8109474:	af00      	add	r7, sp, #0
 8109476:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8109478:	687b      	ldr	r3, [r7, #4]
 810947a:	681b      	ldr	r3, [r3, #0]
 810947c:	f003 0303 	and.w	r3, r3, #3
}
 8109480:	4618      	mov	r0, r3
 8109482:	370c      	adds	r7, #12
 8109484:	46bd      	mov	sp, r7
 8109486:	f85d 7b04 	ldr.w	r7, [sp], #4
 810948a:	4770      	bx	lr

0810948c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 810948c:	b480      	push	{r7}
 810948e:	b085      	sub	sp, #20
 8109490:	af00      	add	r7, sp, #0
 8109492:	6078      	str	r0, [r7, #4]
 8109494:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8109496:	2300      	movs	r3, #0
 8109498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810949a:	683b      	ldr	r3, [r7, #0]
 810949c:	681a      	ldr	r2, [r3, #0]
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81094a2:	683b      	ldr	r3, [r7, #0]
 81094a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 81094a6:	683b      	ldr	r3, [r7, #0]
 81094a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81094aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 81094ac:	683b      	ldr	r3, [r7, #0]
 81094ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 81094b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 81094b2:	683b      	ldr	r3, [r7, #0]
 81094b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 81094b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81094b8:	68fa      	ldr	r2, [r7, #12]
 81094ba:	4313      	orrs	r3, r2
 81094bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	68da      	ldr	r2, [r3, #12]
 81094c2:	4b06      	ldr	r3, [pc, #24]	@ (81094dc <SDMMC_SendCommand+0x50>)
 81094c4:	4013      	ands	r3, r2
 81094c6:	68fa      	ldr	r2, [r7, #12]
 81094c8:	431a      	orrs	r2, r3
 81094ca:	687b      	ldr	r3, [r7, #4]
 81094cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 81094ce:	2300      	movs	r3, #0
}
 81094d0:	4618      	mov	r0, r3
 81094d2:	3714      	adds	r7, #20
 81094d4:	46bd      	mov	sp, r7
 81094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094da:	4770      	bx	lr
 81094dc:	fffee0c0 	.word	0xfffee0c0

081094e0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 81094e0:	b480      	push	{r7}
 81094e2:	b083      	sub	sp, #12
 81094e4:	af00      	add	r7, sp, #0
 81094e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 81094e8:	687b      	ldr	r3, [r7, #4]
 81094ea:	691b      	ldr	r3, [r3, #16]
 81094ec:	b2db      	uxtb	r3, r3
}
 81094ee:	4618      	mov	r0, r3
 81094f0:	370c      	adds	r7, #12
 81094f2:	46bd      	mov	sp, r7
 81094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094f8:	4770      	bx	lr

081094fa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 81094fa:	b480      	push	{r7}
 81094fc:	b085      	sub	sp, #20
 81094fe:	af00      	add	r7, sp, #0
 8109500:	6078      	str	r0, [r7, #4]
 8109502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8109504:	687b      	ldr	r3, [r7, #4]
 8109506:	3314      	adds	r3, #20
 8109508:	461a      	mov	r2, r3
 810950a:	683b      	ldr	r3, [r7, #0]
 810950c:	4413      	add	r3, r2
 810950e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8109510:	68fb      	ldr	r3, [r7, #12]
 8109512:	681b      	ldr	r3, [r3, #0]
}
 8109514:	4618      	mov	r0, r3
 8109516:	3714      	adds	r7, #20
 8109518:	46bd      	mov	sp, r7
 810951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810951e:	4770      	bx	lr

08109520 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8109520:	b480      	push	{r7}
 8109522:	b085      	sub	sp, #20
 8109524:	af00      	add	r7, sp, #0
 8109526:	6078      	str	r0, [r7, #4]
 8109528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810952a:	2300      	movs	r3, #0
 810952c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810952e:	683b      	ldr	r3, [r7, #0]
 8109530:	681a      	ldr	r2, [r3, #0]
 8109532:	687b      	ldr	r3, [r7, #4]
 8109534:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8109536:	683b      	ldr	r3, [r7, #0]
 8109538:	685a      	ldr	r2, [r3, #4]
 810953a:	687b      	ldr	r3, [r7, #4]
 810953c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810953e:	683b      	ldr	r3, [r7, #0]
 8109540:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8109542:	683b      	ldr	r3, [r7, #0]
 8109544:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109546:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8109548:	683b      	ldr	r3, [r7, #0]
 810954a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810954c:	431a      	orrs	r2, r3
                       Data->DPSM);
 810954e:	683b      	ldr	r3, [r7, #0]
 8109550:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8109552:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109554:	68fa      	ldr	r2, [r7, #12]
 8109556:	4313      	orrs	r3, r2
 8109558:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810955e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8109562:	68fb      	ldr	r3, [r7, #12]
 8109564:	431a      	orrs	r2, r3
 8109566:	687b      	ldr	r3, [r7, #4]
 8109568:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810956a:	2300      	movs	r3, #0

}
 810956c:	4618      	mov	r0, r3
 810956e:	3714      	adds	r7, #20
 8109570:	46bd      	mov	sp, r7
 8109572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109576:	4770      	bx	lr

08109578 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8109578:	b580      	push	{r7, lr}
 810957a:	b088      	sub	sp, #32
 810957c:	af00      	add	r7, sp, #0
 810957e:	6078      	str	r0, [r7, #4]
 8109580:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8109582:	683b      	ldr	r3, [r7, #0]
 8109584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8109586:	2310      	movs	r3, #16
 8109588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810958a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810958e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109590:	2300      	movs	r3, #0
 8109592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810959a:	f107 0308 	add.w	r3, r7, #8
 810959e:	4619      	mov	r1, r3
 81095a0:	6878      	ldr	r0, [r7, #4]
 81095a2:	f7ff ff73 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 81095a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 81095aa:	2110      	movs	r1, #16
 81095ac:	6878      	ldr	r0, [r7, #4]
 81095ae:	f000 f935 	bl	810981c <SDMMC_GetCmdResp1>
 81095b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81095b4:	69fb      	ldr	r3, [r7, #28]
}
 81095b6:	4618      	mov	r0, r3
 81095b8:	3720      	adds	r7, #32
 81095ba:	46bd      	mov	sp, r7
 81095bc:	bd80      	pop	{r7, pc}

081095be <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 81095be:	b580      	push	{r7, lr}
 81095c0:	b088      	sub	sp, #32
 81095c2:	af00      	add	r7, sp, #0
 81095c4:	6078      	str	r0, [r7, #4]
 81095c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 81095c8:	683b      	ldr	r3, [r7, #0]
 81095ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 81095cc:	2307      	movs	r3, #7
 81095ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81095d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81095d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81095d6:	2300      	movs	r3, #0
 81095d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81095da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81095de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81095e0:	f107 0308 	add.w	r3, r7, #8
 81095e4:	4619      	mov	r1, r3
 81095e6:	6878      	ldr	r0, [r7, #4]
 81095e8:	f7ff ff50 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 81095ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 81095f0:	2107      	movs	r1, #7
 81095f2:	6878      	ldr	r0, [r7, #4]
 81095f4:	f000 f912 	bl	810981c <SDMMC_GetCmdResp1>
 81095f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81095fa:	69fb      	ldr	r3, [r7, #28]
}
 81095fc:	4618      	mov	r0, r3
 81095fe:	3720      	adds	r7, #32
 8109600:	46bd      	mov	sp, r7
 8109602:	bd80      	pop	{r7, pc}

08109604 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8109604:	b580      	push	{r7, lr}
 8109606:	b088      	sub	sp, #32
 8109608:	af00      	add	r7, sp, #0
 810960a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810960c:	2300      	movs	r3, #0
 810960e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8109610:	2300      	movs	r3, #0
 8109612:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8109614:	2300      	movs	r3, #0
 8109616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109618:	2300      	movs	r3, #0
 810961a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810961c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109620:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109622:	f107 0308 	add.w	r3, r7, #8
 8109626:	4619      	mov	r1, r3
 8109628:	6878      	ldr	r0, [r7, #4]
 810962a:	f7ff ff2f 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810962e:	6878      	ldr	r0, [r7, #4]
 8109630:	f000 fa70 	bl	8109b14 <SDMMC_GetCmdError>
 8109634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109636:	69fb      	ldr	r3, [r7, #28]
}
 8109638:	4618      	mov	r0, r3
 810963a:	3720      	adds	r7, #32
 810963c:	46bd      	mov	sp, r7
 810963e:	bd80      	pop	{r7, pc}

08109640 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8109640:	b580      	push	{r7, lr}
 8109642:	b088      	sub	sp, #32
 8109644:	af00      	add	r7, sp, #0
 8109646:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8109648:	2300      	movs	r3, #0
 810964a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810964c:	2302      	movs	r3, #2
 810964e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8109650:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8109654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109656:	2300      	movs	r3, #0
 8109658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810965a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810965e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109660:	f107 0308 	add.w	r3, r7, #8
 8109664:	4619      	mov	r1, r3
 8109666:	6878      	ldr	r0, [r7, #4]
 8109668:	f7ff ff10 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810966c:	6878      	ldr	r0, [r7, #4]
 810966e:	f000 f9c7 	bl	8109a00 <SDMMC_GetCmdResp2>
 8109672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109674:	69fb      	ldr	r3, [r7, #28]
}
 8109676:	4618      	mov	r0, r3
 8109678:	3720      	adds	r7, #32
 810967a:	46bd      	mov	sp, r7
 810967c:	bd80      	pop	{r7, pc}

0810967e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810967e:	b580      	push	{r7, lr}
 8109680:	b088      	sub	sp, #32
 8109682:	af00      	add	r7, sp, #0
 8109684:	6078      	str	r0, [r7, #4]
 8109686:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8109688:	683b      	ldr	r3, [r7, #0]
 810968a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810968c:	2309      	movs	r3, #9
 810968e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8109690:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8109694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109696:	2300      	movs	r3, #0
 8109698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810969a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810969e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81096a0:	f107 0308 	add.w	r3, r7, #8
 81096a4:	4619      	mov	r1, r3
 81096a6:	6878      	ldr	r0, [r7, #4]
 81096a8:	f7ff fef0 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 81096ac:	6878      	ldr	r0, [r7, #4]
 81096ae:	f000 f9a7 	bl	8109a00 <SDMMC_GetCmdResp2>
 81096b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81096b4:	69fb      	ldr	r3, [r7, #28]
}
 81096b6:	4618      	mov	r0, r3
 81096b8:	3720      	adds	r7, #32
 81096ba:	46bd      	mov	sp, r7
 81096bc:	bd80      	pop	{r7, pc}

081096be <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 81096be:	b580      	push	{r7, lr}
 81096c0:	b088      	sub	sp, #32
 81096c2:	af00      	add	r7, sp, #0
 81096c4:	6078      	str	r0, [r7, #4]
 81096c6:	460b      	mov	r3, r1
 81096c8:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 81096ca:	887b      	ldrh	r3, [r7, #2]
 81096cc:	041b      	lsls	r3, r3, #16
 81096ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 81096d0:	2303      	movs	r3, #3
 81096d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81096d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81096d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81096da:	2300      	movs	r3, #0
 81096dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81096de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81096e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81096e4:	f107 0308 	add.w	r3, r7, #8
 81096e8:	4619      	mov	r1, r3
 81096ea:	6878      	ldr	r0, [r7, #4]
 81096ec:	f7ff fece 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 81096f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 81096f4:	2103      	movs	r1, #3
 81096f6:	6878      	ldr	r0, [r7, #4]
 81096f8:	f000 f890 	bl	810981c <SDMMC_GetCmdResp1>
 81096fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81096fe:	69fb      	ldr	r3, [r7, #28]
}
 8109700:	4618      	mov	r0, r3
 8109702:	3720      	adds	r7, #32
 8109704:	46bd      	mov	sp, r7
 8109706:	bd80      	pop	{r7, pc}

08109708 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8109708:	b580      	push	{r7, lr}
 810970a:	b088      	sub	sp, #32
 810970c:	af00      	add	r7, sp, #0
 810970e:	6078      	str	r0, [r7, #4]
 8109710:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8109712:	683b      	ldr	r3, [r7, #0]
 8109714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8109716:	230d      	movs	r3, #13
 8109718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810971a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810971e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109720:	2300      	movs	r3, #0
 8109722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109728:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810972a:	f107 0308 	add.w	r3, r7, #8
 810972e:	4619      	mov	r1, r3
 8109730:	6878      	ldr	r0, [r7, #4]
 8109732:	f7ff feab 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8109736:	f241 3288 	movw	r2, #5000	@ 0x1388
 810973a:	210d      	movs	r1, #13
 810973c:	6878      	ldr	r0, [r7, #4]
 810973e:	f000 f86d 	bl	810981c <SDMMC_GetCmdResp1>
 8109742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109744:	69fb      	ldr	r3, [r7, #28]
}
 8109746:	4618      	mov	r0, r3
 8109748:	3720      	adds	r7, #32
 810974a:	46bd      	mov	sp, r7
 810974c:	bd80      	pop	{r7, pc}

0810974e <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810974e:	b580      	push	{r7, lr}
 8109750:	b088      	sub	sp, #32
 8109752:	af00      	add	r7, sp, #0
 8109754:	6078      	str	r0, [r7, #4]
 8109756:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8109758:	683b      	ldr	r3, [r7, #0]
 810975a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 810975c:	2301      	movs	r3, #1
 810975e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8109764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109766:	2300      	movs	r3, #0
 8109768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810976a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810976e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109770:	f107 0308 	add.w	r3, r7, #8
 8109774:	4619      	mov	r1, r3
 8109776:	6878      	ldr	r0, [r7, #4]
 8109778:	f7ff fe88 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810977c:	6878      	ldr	r0, [r7, #4]
 810977e:	f000 f989 	bl	8109a94 <SDMMC_GetCmdResp3>
 8109782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109784:	69fb      	ldr	r3, [r7, #28]
}
 8109786:	4618      	mov	r0, r3
 8109788:	3720      	adds	r7, #32
 810978a:	46bd      	mov	sp, r7
 810978c:	bd80      	pop	{r7, pc}

0810978e <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810978e:	b580      	push	{r7, lr}
 8109790:	b088      	sub	sp, #32
 8109792:	af00      	add	r7, sp, #0
 8109794:	6078      	str	r0, [r7, #4]
 8109796:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8109798:	683b      	ldr	r3, [r7, #0]
 810979a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 810979c:	2306      	movs	r3, #6
 810979e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81097a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81097a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81097a6:	2300      	movs	r3, #0
 81097a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81097aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81097ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81097b0:	f107 0308 	add.w	r3, r7, #8
 81097b4:	4619      	mov	r1, r3
 81097b6:	6878      	ldr	r0, [r7, #4]
 81097b8:	f7ff fe68 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 81097bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 81097c0:	2106      	movs	r1, #6
 81097c2:	6878      	ldr	r0, [r7, #4]
 81097c4:	f000 f82a 	bl	810981c <SDMMC_GetCmdResp1>
 81097c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81097ca:	69fb      	ldr	r3, [r7, #28]
}
 81097cc:	4618      	mov	r0, r3
 81097ce:	3720      	adds	r7, #32
 81097d0:	46bd      	mov	sp, r7
 81097d2:	bd80      	pop	{r7, pc}

081097d4 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81097d4:	b580      	push	{r7, lr}
 81097d6:	b088      	sub	sp, #32
 81097d8:	af00      	add	r7, sp, #0
 81097da:	6078      	str	r0, [r7, #4]
 81097dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 81097de:	683b      	ldr	r3, [r7, #0]
 81097e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 81097e2:	2308      	movs	r3, #8
 81097e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81097e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81097ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81097ec:	2300      	movs	r3, #0
 81097ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81097f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81097f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81097f6:	f107 0308 	add.w	r3, r7, #8
 81097fa:	4619      	mov	r1, r3
 81097fc:	6878      	ldr	r0, [r7, #4]
 81097fe:	f7ff fe45 	bl	810948c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 8109802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109806:	2108      	movs	r1, #8
 8109808:	6878      	ldr	r0, [r7, #4]
 810980a:	f000 f807 	bl	810981c <SDMMC_GetCmdResp1>
 810980e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109810:	69fb      	ldr	r3, [r7, #28]
}
 8109812:	4618      	mov	r0, r3
 8109814:	3720      	adds	r7, #32
 8109816:	46bd      	mov	sp, r7
 8109818:	bd80      	pop	{r7, pc}
	...

0810981c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810981c:	b580      	push	{r7, lr}
 810981e:	b088      	sub	sp, #32
 8109820:	af00      	add	r7, sp, #0
 8109822:	60f8      	str	r0, [r7, #12]
 8109824:	460b      	mov	r3, r1
 8109826:	607a      	str	r2, [r7, #4]
 8109828:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810982a:	4b70      	ldr	r3, [pc, #448]	@ (81099ec <SDMMC_GetCmdResp1+0x1d0>)
 810982c:	681b      	ldr	r3, [r3, #0]
 810982e:	4a70      	ldr	r2, [pc, #448]	@ (81099f0 <SDMMC_GetCmdResp1+0x1d4>)
 8109830:	fba2 2303 	umull	r2, r3, r2, r3
 8109834:	0a5a      	lsrs	r2, r3, #9
 8109836:	687b      	ldr	r3, [r7, #4]
 8109838:	fb02 f303 	mul.w	r3, r2, r3
 810983c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810983e:	69fb      	ldr	r3, [r7, #28]
 8109840:	1e5a      	subs	r2, r3, #1
 8109842:	61fa      	str	r2, [r7, #28]
 8109844:	2b00      	cmp	r3, #0
 8109846:	d102      	bne.n	810984e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8109848:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810984c:	e0c9      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810984e:	68fb      	ldr	r3, [r7, #12]
 8109850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109852:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8109854:	69ba      	ldr	r2, [r7, #24]
 8109856:	4b67      	ldr	r3, [pc, #412]	@ (81099f4 <SDMMC_GetCmdResp1+0x1d8>)
 8109858:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810985a:	2b00      	cmp	r3, #0
 810985c:	d0ef      	beq.n	810983e <SDMMC_GetCmdResp1+0x22>
 810985e:	69bb      	ldr	r3, [r7, #24]
 8109860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8109864:	2b00      	cmp	r3, #0
 8109866:	d1ea      	bne.n	810983e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8109868:	68fb      	ldr	r3, [r7, #12]
 810986a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810986c:	f003 0304 	and.w	r3, r3, #4
 8109870:	2b00      	cmp	r3, #0
 8109872:	d004      	beq.n	810987e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8109874:	68fb      	ldr	r3, [r7, #12]
 8109876:	2204      	movs	r2, #4
 8109878:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810987a:	2304      	movs	r3, #4
 810987c:	e0b1      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810987e:	68fb      	ldr	r3, [r7, #12]
 8109880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109882:	f003 0301 	and.w	r3, r3, #1
 8109886:	2b00      	cmp	r3, #0
 8109888:	d004      	beq.n	8109894 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810988a:	68fb      	ldr	r3, [r7, #12]
 810988c:	2201      	movs	r2, #1
 810988e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8109890:	2301      	movs	r3, #1
 8109892:	e0a6      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8109894:	68fb      	ldr	r3, [r7, #12]
 8109896:	4a58      	ldr	r2, [pc, #352]	@ (81099f8 <SDMMC_GetCmdResp1+0x1dc>)
 8109898:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810989a:	68f8      	ldr	r0, [r7, #12]
 810989c:	f7ff fe20 	bl	81094e0 <SDMMC_GetCommandResponse>
 81098a0:	4603      	mov	r3, r0
 81098a2:	461a      	mov	r2, r3
 81098a4:	7afb      	ldrb	r3, [r7, #11]
 81098a6:	4293      	cmp	r3, r2
 81098a8:	d001      	beq.n	81098ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 81098aa:	2301      	movs	r3, #1
 81098ac:	e099      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 81098ae:	2100      	movs	r1, #0
 81098b0:	68f8      	ldr	r0, [r7, #12]
 81098b2:	f7ff fe22 	bl	81094fa <SDMMC_GetResponse>
 81098b6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 81098b8:	697a      	ldr	r2, [r7, #20]
 81098ba:	4b50      	ldr	r3, [pc, #320]	@ (81099fc <SDMMC_GetCmdResp1+0x1e0>)
 81098bc:	4013      	ands	r3, r2
 81098be:	2b00      	cmp	r3, #0
 81098c0:	d101      	bne.n	81098c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 81098c2:	2300      	movs	r3, #0
 81098c4:	e08d      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 81098c6:	697b      	ldr	r3, [r7, #20]
 81098c8:	2b00      	cmp	r3, #0
 81098ca:	da02      	bge.n	81098d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 81098cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81098d0:	e087      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 81098d2:	697b      	ldr	r3, [r7, #20]
 81098d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81098d8:	2b00      	cmp	r3, #0
 81098da:	d001      	beq.n	81098e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 81098dc:	2340      	movs	r3, #64	@ 0x40
 81098de:	e080      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 81098e0:	697b      	ldr	r3, [r7, #20]
 81098e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81098e6:	2b00      	cmp	r3, #0
 81098e8:	d001      	beq.n	81098ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 81098ea:	2380      	movs	r3, #128	@ 0x80
 81098ec:	e079      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 81098ee:	697b      	ldr	r3, [r7, #20]
 81098f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81098f4:	2b00      	cmp	r3, #0
 81098f6:	d002      	beq.n	81098fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 81098f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81098fc:	e071      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 81098fe:	697b      	ldr	r3, [r7, #20]
 8109900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109904:	2b00      	cmp	r3, #0
 8109906:	d002      	beq.n	810990e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8109908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810990c:	e069      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810990e:	697b      	ldr	r3, [r7, #20]
 8109910:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8109914:	2b00      	cmp	r3, #0
 8109916:	d002      	beq.n	810991e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8109918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810991c:	e061      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810991e:	697b      	ldr	r3, [r7, #20]
 8109920:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8109924:	2b00      	cmp	r3, #0
 8109926:	d002      	beq.n	810992e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8109928:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810992c:	e059      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810992e:	697b      	ldr	r3, [r7, #20]
 8109930:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109934:	2b00      	cmp	r3, #0
 8109936:	d002      	beq.n	810993e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8109938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810993c:	e051      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810993e:	697b      	ldr	r3, [r7, #20]
 8109940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109944:	2b00      	cmp	r3, #0
 8109946:	d002      	beq.n	810994e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8109948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810994c:	e049      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810994e:	697b      	ldr	r3, [r7, #20]
 8109950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8109954:	2b00      	cmp	r3, #0
 8109956:	d002      	beq.n	810995e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8109958:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810995c:	e041      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810995e:	697b      	ldr	r3, [r7, #20]
 8109960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8109964:	2b00      	cmp	r3, #0
 8109966:	d002      	beq.n	810996e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8109968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810996c:	e039      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810996e:	697b      	ldr	r3, [r7, #20]
 8109970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8109974:	2b00      	cmp	r3, #0
 8109976:	d002      	beq.n	810997e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8109978:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810997c:	e031      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810997e:	697b      	ldr	r3, [r7, #20]
 8109980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109984:	2b00      	cmp	r3, #0
 8109986:	d002      	beq.n	810998e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8109988:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810998c:	e029      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810998e:	697b      	ldr	r3, [r7, #20]
 8109990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109994:	2b00      	cmp	r3, #0
 8109996:	d002      	beq.n	810999e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8109998:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810999c:	e021      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810999e:	697b      	ldr	r3, [r7, #20]
 81099a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81099a4:	2b00      	cmp	r3, #0
 81099a6:	d002      	beq.n	81099ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 81099a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 81099ac:	e019      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 81099ae:	697b      	ldr	r3, [r7, #20]
 81099b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81099b4:	2b00      	cmp	r3, #0
 81099b6:	d002      	beq.n	81099be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 81099b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81099bc:	e011      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 81099be:	697b      	ldr	r3, [r7, #20]
 81099c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81099c4:	2b00      	cmp	r3, #0
 81099c6:	d002      	beq.n	81099ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 81099c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 81099cc:	e009      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 81099ce:	697b      	ldr	r3, [r7, #20]
 81099d0:	f003 0308 	and.w	r3, r3, #8
 81099d4:	2b00      	cmp	r3, #0
 81099d6:	d002      	beq.n	81099de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 81099d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 81099dc:	e001      	b.n	81099e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 81099de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 81099e2:	4618      	mov	r0, r3
 81099e4:	3720      	adds	r7, #32
 81099e6:	46bd      	mov	sp, r7
 81099e8:	bd80      	pop	{r7, pc}
 81099ea:	bf00      	nop
 81099ec:	10000000 	.word	0x10000000
 81099f0:	10624dd3 	.word	0x10624dd3
 81099f4:	00200045 	.word	0x00200045
 81099f8:	002000c5 	.word	0x002000c5
 81099fc:	fdffe008 	.word	0xfdffe008

08109a00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8109a00:	b480      	push	{r7}
 8109a02:	b085      	sub	sp, #20
 8109a04:	af00      	add	r7, sp, #0
 8109a06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8109a08:	4b1f      	ldr	r3, [pc, #124]	@ (8109a88 <SDMMC_GetCmdResp2+0x88>)
 8109a0a:	681b      	ldr	r3, [r3, #0]
 8109a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8109a8c <SDMMC_GetCmdResp2+0x8c>)
 8109a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8109a12:	0a5b      	lsrs	r3, r3, #9
 8109a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109a18:	fb02 f303 	mul.w	r3, r2, r3
 8109a1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8109a1e:	68fb      	ldr	r3, [r7, #12]
 8109a20:	1e5a      	subs	r2, r3, #1
 8109a22:	60fa      	str	r2, [r7, #12]
 8109a24:	2b00      	cmp	r3, #0
 8109a26:	d102      	bne.n	8109a2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8109a28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109a2c:	e026      	b.n	8109a7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8109a2e:	687b      	ldr	r3, [r7, #4]
 8109a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109a32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109a34:	68bb      	ldr	r3, [r7, #8]
 8109a36:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8109a3a:	2b00      	cmp	r3, #0
 8109a3c:	d0ef      	beq.n	8109a1e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8109a3e:	68bb      	ldr	r3, [r7, #8]
 8109a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109a44:	2b00      	cmp	r3, #0
 8109a46:	d1ea      	bne.n	8109a1e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8109a48:	687b      	ldr	r3, [r7, #4]
 8109a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109a4c:	f003 0304 	and.w	r3, r3, #4
 8109a50:	2b00      	cmp	r3, #0
 8109a52:	d004      	beq.n	8109a5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8109a54:	687b      	ldr	r3, [r7, #4]
 8109a56:	2204      	movs	r2, #4
 8109a58:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8109a5a:	2304      	movs	r3, #4
 8109a5c:	e00e      	b.n	8109a7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109a62:	f003 0301 	and.w	r3, r3, #1
 8109a66:	2b00      	cmp	r3, #0
 8109a68:	d004      	beq.n	8109a74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8109a6a:	687b      	ldr	r3, [r7, #4]
 8109a6c:	2201      	movs	r2, #1
 8109a6e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8109a70:	2301      	movs	r3, #1
 8109a72:	e003      	b.n	8109a7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8109a74:	687b      	ldr	r3, [r7, #4]
 8109a76:	4a06      	ldr	r2, [pc, #24]	@ (8109a90 <SDMMC_GetCmdResp2+0x90>)
 8109a78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8109a7a:	2300      	movs	r3, #0
}
 8109a7c:	4618      	mov	r0, r3
 8109a7e:	3714      	adds	r7, #20
 8109a80:	46bd      	mov	sp, r7
 8109a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a86:	4770      	bx	lr
 8109a88:	10000000 	.word	0x10000000
 8109a8c:	10624dd3 	.word	0x10624dd3
 8109a90:	002000c5 	.word	0x002000c5

08109a94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8109a94:	b480      	push	{r7}
 8109a96:	b085      	sub	sp, #20
 8109a98:	af00      	add	r7, sp, #0
 8109a9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8109a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8109b08 <SDMMC_GetCmdResp3+0x74>)
 8109a9e:	681b      	ldr	r3, [r3, #0]
 8109aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8109b0c <SDMMC_GetCmdResp3+0x78>)
 8109aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8109aa6:	0a5b      	lsrs	r3, r3, #9
 8109aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109aac:	fb02 f303 	mul.w	r3, r2, r3
 8109ab0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8109ab2:	68fb      	ldr	r3, [r7, #12]
 8109ab4:	1e5a      	subs	r2, r3, #1
 8109ab6:	60fa      	str	r2, [r7, #12]
 8109ab8:	2b00      	cmp	r3, #0
 8109aba:	d102      	bne.n	8109ac2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8109abc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109ac0:	e01b      	b.n	8109afa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8109ac2:	687b      	ldr	r3, [r7, #4]
 8109ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109ac6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109ac8:	68bb      	ldr	r3, [r7, #8]
 8109aca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8109ace:	2b00      	cmp	r3, #0
 8109ad0:	d0ef      	beq.n	8109ab2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8109ad2:	68bb      	ldr	r3, [r7, #8]
 8109ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109ad8:	2b00      	cmp	r3, #0
 8109ada:	d1ea      	bne.n	8109ab2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8109adc:	687b      	ldr	r3, [r7, #4]
 8109ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109ae0:	f003 0304 	and.w	r3, r3, #4
 8109ae4:	2b00      	cmp	r3, #0
 8109ae6:	d004      	beq.n	8109af2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8109ae8:	687b      	ldr	r3, [r7, #4]
 8109aea:	2204      	movs	r2, #4
 8109aec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8109aee:	2304      	movs	r3, #4
 8109af0:	e003      	b.n	8109afa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	4a06      	ldr	r2, [pc, #24]	@ (8109b10 <SDMMC_GetCmdResp3+0x7c>)
 8109af6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8109af8:	2300      	movs	r3, #0
}
 8109afa:	4618      	mov	r0, r3
 8109afc:	3714      	adds	r7, #20
 8109afe:	46bd      	mov	sp, r7
 8109b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b04:	4770      	bx	lr
 8109b06:	bf00      	nop
 8109b08:	10000000 	.word	0x10000000
 8109b0c:	10624dd3 	.word	0x10624dd3
 8109b10:	002000c5 	.word	0x002000c5

08109b14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8109b14:	b480      	push	{r7}
 8109b16:	b085      	sub	sp, #20
 8109b18:	af00      	add	r7, sp, #0
 8109b1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8109b1c:	4b11      	ldr	r3, [pc, #68]	@ (8109b64 <SDMMC_GetCmdError+0x50>)
 8109b1e:	681b      	ldr	r3, [r3, #0]
 8109b20:	4a11      	ldr	r2, [pc, #68]	@ (8109b68 <SDMMC_GetCmdError+0x54>)
 8109b22:	fba2 2303 	umull	r2, r3, r2, r3
 8109b26:	0a5b      	lsrs	r3, r3, #9
 8109b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109b2c:	fb02 f303 	mul.w	r3, r2, r3
 8109b30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8109b32:	68fb      	ldr	r3, [r7, #12]
 8109b34:	1e5a      	subs	r2, r3, #1
 8109b36:	60fa      	str	r2, [r7, #12]
 8109b38:	2b00      	cmp	r3, #0
 8109b3a:	d102      	bne.n	8109b42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8109b3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109b40:	e009      	b.n	8109b56 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109b4a:	2b00      	cmp	r3, #0
 8109b4c:	d0f1      	beq.n	8109b32 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8109b4e:	687b      	ldr	r3, [r7, #4]
 8109b50:	4a06      	ldr	r2, [pc, #24]	@ (8109b6c <SDMMC_GetCmdError+0x58>)
 8109b52:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8109b54:	2300      	movs	r3, #0
}
 8109b56:	4618      	mov	r0, r3
 8109b58:	3714      	adds	r7, #20
 8109b5a:	46bd      	mov	sp, r7
 8109b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b60:	4770      	bx	lr
 8109b62:	bf00      	nop
 8109b64:	10000000 	.word	0x10000000
 8109b68:	10624dd3 	.word	0x10624dd3
 8109b6c:	002000c5 	.word	0x002000c5

08109b70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8109b70:	b084      	sub	sp, #16
 8109b72:	b580      	push	{r7, lr}
 8109b74:	b084      	sub	sp, #16
 8109b76:	af00      	add	r7, sp, #0
 8109b78:	6078      	str	r0, [r7, #4]
 8109b7a:	f107 001c 	add.w	r0, r7, #28
 8109b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8109b82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8109b86:	2b01      	cmp	r3, #1
 8109b88:	d123      	bne.n	8109bd2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8109b8a:	687b      	ldr	r3, [r7, #4]
 8109b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109b8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8109b92:	687b      	ldr	r3, [r7, #4]
 8109b94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8109b96:	687b      	ldr	r3, [r7, #4]
 8109b98:	68db      	ldr	r3, [r3, #12]
 8109b9a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8109b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109ba2:	687a      	ldr	r2, [r7, #4]
 8109ba4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8109ba6:	687b      	ldr	r3, [r7, #4]
 8109ba8:	68db      	ldr	r3, [r3, #12]
 8109baa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8109bae:	687b      	ldr	r3, [r7, #4]
 8109bb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8109bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8109bb6:	2b01      	cmp	r3, #1
 8109bb8:	d105      	bne.n	8109bc6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8109bba:	687b      	ldr	r3, [r7, #4]
 8109bbc:	68db      	ldr	r3, [r3, #12]
 8109bbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8109bc2:	687b      	ldr	r3, [r7, #4]
 8109bc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8109bc6:	6878      	ldr	r0, [r7, #4]
 8109bc8:	f000 faa6 	bl	810a118 <USB_CoreReset>
 8109bcc:	4603      	mov	r3, r0
 8109bce:	73fb      	strb	r3, [r7, #15]
 8109bd0:	e01b      	b.n	8109c0a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8109bd2:	687b      	ldr	r3, [r7, #4]
 8109bd4:	68db      	ldr	r3, [r3, #12]
 8109bd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8109bda:	687b      	ldr	r3, [r7, #4]
 8109bdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8109bde:	6878      	ldr	r0, [r7, #4]
 8109be0:	f000 fa9a 	bl	810a118 <USB_CoreReset>
 8109be4:	4603      	mov	r3, r0
 8109be6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8109be8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8109bec:	2b00      	cmp	r3, #0
 8109bee:	d106      	bne.n	8109bfe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109bf4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8109bf8:	687b      	ldr	r3, [r7, #4]
 8109bfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8109bfc:	e005      	b.n	8109c0a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8109bfe:	687b      	ldr	r3, [r7, #4]
 8109c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109c02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8109c06:	687b      	ldr	r3, [r7, #4]
 8109c08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8109c0a:	7fbb      	ldrb	r3, [r7, #30]
 8109c0c:	2b01      	cmp	r3, #1
 8109c0e:	d118      	bne.n	8109c42 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109c14:	b29a      	uxth	r2, r3
 8109c16:	687b      	ldr	r3, [r7, #4]
 8109c18:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8109c1a:	687b      	ldr	r3, [r7, #4]
 8109c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109c1e:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 8109c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109c26:	687a      	ldr	r2, [r7, #4]
 8109c28:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8109c2a:	687b      	ldr	r3, [r7, #4]
 8109c2c:	689b      	ldr	r3, [r3, #8]
 8109c2e:	f043 0206 	orr.w	r2, r3, #6
 8109c32:	687b      	ldr	r3, [r7, #4]
 8109c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8109c36:	687b      	ldr	r3, [r7, #4]
 8109c38:	689b      	ldr	r3, [r3, #8]
 8109c3a:	f043 0220 	orr.w	r2, r3, #32
 8109c3e:	687b      	ldr	r3, [r7, #4]
 8109c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8109c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8109c44:	4618      	mov	r0, r3
 8109c46:	3710      	adds	r7, #16
 8109c48:	46bd      	mov	sp, r7
 8109c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8109c4e:	b004      	add	sp, #16
 8109c50:	4770      	bx	lr

08109c52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8109c52:	b480      	push	{r7}
 8109c54:	b083      	sub	sp, #12
 8109c56:	af00      	add	r7, sp, #0
 8109c58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8109c5a:	687b      	ldr	r3, [r7, #4]
 8109c5c:	689b      	ldr	r3, [r3, #8]
 8109c5e:	f023 0201 	bic.w	r2, r3, #1
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8109c66:	2300      	movs	r3, #0
}
 8109c68:	4618      	mov	r0, r3
 8109c6a:	370c      	adds	r7, #12
 8109c6c:	46bd      	mov	sp, r7
 8109c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c72:	4770      	bx	lr

08109c74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8109c74:	b580      	push	{r7, lr}
 8109c76:	b084      	sub	sp, #16
 8109c78:	af00      	add	r7, sp, #0
 8109c7a:	6078      	str	r0, [r7, #4]
 8109c7c:	460b      	mov	r3, r1
 8109c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8109c80:	2300      	movs	r3, #0
 8109c82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8109c84:	687b      	ldr	r3, [r7, #4]
 8109c86:	68db      	ldr	r3, [r3, #12]
 8109c88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8109c8c:	687b      	ldr	r3, [r7, #4]
 8109c8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8109c90:	78fb      	ldrb	r3, [r7, #3]
 8109c92:	2b01      	cmp	r3, #1
 8109c94:	d115      	bne.n	8109cc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8109c96:	687b      	ldr	r3, [r7, #4]
 8109c98:	68db      	ldr	r3, [r3, #12]
 8109c9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8109c9e:	687b      	ldr	r3, [r7, #4]
 8109ca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8109ca2:	200a      	movs	r0, #10
 8109ca4:	f7f8 f96c 	bl	8101f80 <HAL_Delay>
      ms += 10U;
 8109ca8:	68fb      	ldr	r3, [r7, #12]
 8109caa:	330a      	adds	r3, #10
 8109cac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8109cae:	6878      	ldr	r0, [r7, #4]
 8109cb0:	f000 fa24 	bl	810a0fc <USB_GetMode>
 8109cb4:	4603      	mov	r3, r0
 8109cb6:	2b01      	cmp	r3, #1
 8109cb8:	d01e      	beq.n	8109cf8 <USB_SetCurrentMode+0x84>
 8109cba:	68fb      	ldr	r3, [r7, #12]
 8109cbc:	2bc7      	cmp	r3, #199	@ 0xc7
 8109cbe:	d9f0      	bls.n	8109ca2 <USB_SetCurrentMode+0x2e>
 8109cc0:	e01a      	b.n	8109cf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8109cc2:	78fb      	ldrb	r3, [r7, #3]
 8109cc4:	2b00      	cmp	r3, #0
 8109cc6:	d115      	bne.n	8109cf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8109cc8:	687b      	ldr	r3, [r7, #4]
 8109cca:	68db      	ldr	r3, [r3, #12]
 8109ccc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8109cd0:	687b      	ldr	r3, [r7, #4]
 8109cd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8109cd4:	200a      	movs	r0, #10
 8109cd6:	f7f8 f953 	bl	8101f80 <HAL_Delay>
      ms += 10U;
 8109cda:	68fb      	ldr	r3, [r7, #12]
 8109cdc:	330a      	adds	r3, #10
 8109cde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8109ce0:	6878      	ldr	r0, [r7, #4]
 8109ce2:	f000 fa0b 	bl	810a0fc <USB_GetMode>
 8109ce6:	4603      	mov	r3, r0
 8109ce8:	2b00      	cmp	r3, #0
 8109cea:	d005      	beq.n	8109cf8 <USB_SetCurrentMode+0x84>
 8109cec:	68fb      	ldr	r3, [r7, #12]
 8109cee:	2bc7      	cmp	r3, #199	@ 0xc7
 8109cf0:	d9f0      	bls.n	8109cd4 <USB_SetCurrentMode+0x60>
 8109cf2:	e001      	b.n	8109cf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8109cf4:	2301      	movs	r3, #1
 8109cf6:	e005      	b.n	8109d04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8109cf8:	68fb      	ldr	r3, [r7, #12]
 8109cfa:	2bc8      	cmp	r3, #200	@ 0xc8
 8109cfc:	d101      	bne.n	8109d02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8109cfe:	2301      	movs	r3, #1
 8109d00:	e000      	b.n	8109d04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8109d02:	2300      	movs	r3, #0
}
 8109d04:	4618      	mov	r0, r3
 8109d06:	3710      	adds	r7, #16
 8109d08:	46bd      	mov	sp, r7
 8109d0a:	bd80      	pop	{r7, pc}

08109d0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8109d0c:	b084      	sub	sp, #16
 8109d0e:	b580      	push	{r7, lr}
 8109d10:	b086      	sub	sp, #24
 8109d12:	af00      	add	r7, sp, #0
 8109d14:	6078      	str	r0, [r7, #4]
 8109d16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8109d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8109d1e:	2300      	movs	r3, #0
 8109d20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8109d22:	687b      	ldr	r3, [r7, #4]
 8109d24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8109d26:	2300      	movs	r3, #0
 8109d28:	613b      	str	r3, [r7, #16]
 8109d2a:	e009      	b.n	8109d40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8109d2c:	687a      	ldr	r2, [r7, #4]
 8109d2e:	693b      	ldr	r3, [r7, #16]
 8109d30:	3340      	adds	r3, #64	@ 0x40
 8109d32:	009b      	lsls	r3, r3, #2
 8109d34:	4413      	add	r3, r2
 8109d36:	2200      	movs	r2, #0
 8109d38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8109d3a:	693b      	ldr	r3, [r7, #16]
 8109d3c:	3301      	adds	r3, #1
 8109d3e:	613b      	str	r3, [r7, #16]
 8109d40:	693b      	ldr	r3, [r7, #16]
 8109d42:	2b0e      	cmp	r3, #14
 8109d44:	d9f2      	bls.n	8109d2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8109d46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8109d4a:	2b00      	cmp	r3, #0
 8109d4c:	d11c      	bne.n	8109d88 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8109d4e:	68fb      	ldr	r3, [r7, #12]
 8109d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109d54:	685b      	ldr	r3, [r3, #4]
 8109d56:	68fa      	ldr	r2, [r7, #12]
 8109d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8109d5c:	f043 0302 	orr.w	r3, r3, #2
 8109d60:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8109d62:	687b      	ldr	r3, [r7, #4]
 8109d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109d66:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8109d6a:	687b      	ldr	r3, [r7, #4]
 8109d6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8109d6e:	687b      	ldr	r3, [r7, #4]
 8109d70:	681b      	ldr	r3, [r3, #0]
 8109d72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8109d76:	687b      	ldr	r3, [r7, #4]
 8109d78:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	681b      	ldr	r3, [r3, #0]
 8109d7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8109d82:	687b      	ldr	r3, [r7, #4]
 8109d84:	601a      	str	r2, [r3, #0]
 8109d86:	e005      	b.n	8109d94 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109d8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8109d90:	687b      	ldr	r3, [r7, #4]
 8109d92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8109d94:	68fb      	ldr	r3, [r7, #12]
 8109d96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8109d9a:	461a      	mov	r2, r3
 8109d9c:	2300      	movs	r3, #0
 8109d9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8109da0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8109da4:	2b01      	cmp	r3, #1
 8109da6:	d10d      	bne.n	8109dc4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8109da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109dac:	2b00      	cmp	r3, #0
 8109dae:	d104      	bne.n	8109dba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8109db0:	2100      	movs	r1, #0
 8109db2:	6878      	ldr	r0, [r7, #4]
 8109db4:	f000 f968 	bl	810a088 <USB_SetDevSpeed>
 8109db8:	e008      	b.n	8109dcc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8109dba:	2101      	movs	r1, #1
 8109dbc:	6878      	ldr	r0, [r7, #4]
 8109dbe:	f000 f963 	bl	810a088 <USB_SetDevSpeed>
 8109dc2:	e003      	b.n	8109dcc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8109dc4:	2103      	movs	r1, #3
 8109dc6:	6878      	ldr	r0, [r7, #4]
 8109dc8:	f000 f95e 	bl	810a088 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8109dcc:	2110      	movs	r1, #16
 8109dce:	6878      	ldr	r0, [r7, #4]
 8109dd0:	f000 f8fa 	bl	8109fc8 <USB_FlushTxFifo>
 8109dd4:	4603      	mov	r3, r0
 8109dd6:	2b00      	cmp	r3, #0
 8109dd8:	d001      	beq.n	8109dde <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8109dda:	2301      	movs	r3, #1
 8109ddc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8109dde:	6878      	ldr	r0, [r7, #4]
 8109de0:	f000 f924 	bl	810a02c <USB_FlushRxFifo>
 8109de4:	4603      	mov	r3, r0
 8109de6:	2b00      	cmp	r3, #0
 8109de8:	d001      	beq.n	8109dee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8109dea:	2301      	movs	r3, #1
 8109dec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8109dee:	68fb      	ldr	r3, [r7, #12]
 8109df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109df4:	461a      	mov	r2, r3
 8109df6:	2300      	movs	r3, #0
 8109df8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8109dfa:	68fb      	ldr	r3, [r7, #12]
 8109dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109e00:	461a      	mov	r2, r3
 8109e02:	2300      	movs	r3, #0
 8109e04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8109e06:	68fb      	ldr	r3, [r7, #12]
 8109e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109e0c:	461a      	mov	r2, r3
 8109e0e:	2300      	movs	r3, #0
 8109e10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109e12:	2300      	movs	r3, #0
 8109e14:	613b      	str	r3, [r7, #16]
 8109e16:	e043      	b.n	8109ea0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8109e18:	693b      	ldr	r3, [r7, #16]
 8109e1a:	015a      	lsls	r2, r3, #5
 8109e1c:	68fb      	ldr	r3, [r7, #12]
 8109e1e:	4413      	add	r3, r2
 8109e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8109e24:	681b      	ldr	r3, [r3, #0]
 8109e26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8109e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109e2e:	d118      	bne.n	8109e62 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8109e30:	693b      	ldr	r3, [r7, #16]
 8109e32:	2b00      	cmp	r3, #0
 8109e34:	d10a      	bne.n	8109e4c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8109e36:	693b      	ldr	r3, [r7, #16]
 8109e38:	015a      	lsls	r2, r3, #5
 8109e3a:	68fb      	ldr	r3, [r7, #12]
 8109e3c:	4413      	add	r3, r2
 8109e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8109e42:	461a      	mov	r2, r3
 8109e44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8109e48:	6013      	str	r3, [r2, #0]
 8109e4a:	e013      	b.n	8109e74 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8109e4c:	693b      	ldr	r3, [r7, #16]
 8109e4e:	015a      	lsls	r2, r3, #5
 8109e50:	68fb      	ldr	r3, [r7, #12]
 8109e52:	4413      	add	r3, r2
 8109e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8109e58:	461a      	mov	r2, r3
 8109e5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8109e5e:	6013      	str	r3, [r2, #0]
 8109e60:	e008      	b.n	8109e74 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8109e62:	693b      	ldr	r3, [r7, #16]
 8109e64:	015a      	lsls	r2, r3, #5
 8109e66:	68fb      	ldr	r3, [r7, #12]
 8109e68:	4413      	add	r3, r2
 8109e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8109e6e:	461a      	mov	r2, r3
 8109e70:	2300      	movs	r3, #0
 8109e72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8109e74:	693b      	ldr	r3, [r7, #16]
 8109e76:	015a      	lsls	r2, r3, #5
 8109e78:	68fb      	ldr	r3, [r7, #12]
 8109e7a:	4413      	add	r3, r2
 8109e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8109e80:	461a      	mov	r2, r3
 8109e82:	2300      	movs	r3, #0
 8109e84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8109e86:	693b      	ldr	r3, [r7, #16]
 8109e88:	015a      	lsls	r2, r3, #5
 8109e8a:	68fb      	ldr	r3, [r7, #12]
 8109e8c:	4413      	add	r3, r2
 8109e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8109e92:	461a      	mov	r2, r3
 8109e94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8109e98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109e9a:	693b      	ldr	r3, [r7, #16]
 8109e9c:	3301      	adds	r3, #1
 8109e9e:	613b      	str	r3, [r7, #16]
 8109ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8109ea4:	461a      	mov	r2, r3
 8109ea6:	693b      	ldr	r3, [r7, #16]
 8109ea8:	4293      	cmp	r3, r2
 8109eaa:	d3b5      	bcc.n	8109e18 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109eac:	2300      	movs	r3, #0
 8109eae:	613b      	str	r3, [r7, #16]
 8109eb0:	e043      	b.n	8109f3a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8109eb2:	693b      	ldr	r3, [r7, #16]
 8109eb4:	015a      	lsls	r2, r3, #5
 8109eb6:	68fb      	ldr	r3, [r7, #12]
 8109eb8:	4413      	add	r3, r2
 8109eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109ebe:	681b      	ldr	r3, [r3, #0]
 8109ec0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8109ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109ec8:	d118      	bne.n	8109efc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8109eca:	693b      	ldr	r3, [r7, #16]
 8109ecc:	2b00      	cmp	r3, #0
 8109ece:	d10a      	bne.n	8109ee6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8109ed0:	693b      	ldr	r3, [r7, #16]
 8109ed2:	015a      	lsls	r2, r3, #5
 8109ed4:	68fb      	ldr	r3, [r7, #12]
 8109ed6:	4413      	add	r3, r2
 8109ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109edc:	461a      	mov	r2, r3
 8109ede:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8109ee2:	6013      	str	r3, [r2, #0]
 8109ee4:	e013      	b.n	8109f0e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8109ee6:	693b      	ldr	r3, [r7, #16]
 8109ee8:	015a      	lsls	r2, r3, #5
 8109eea:	68fb      	ldr	r3, [r7, #12]
 8109eec:	4413      	add	r3, r2
 8109eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109ef2:	461a      	mov	r2, r3
 8109ef4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8109ef8:	6013      	str	r3, [r2, #0]
 8109efa:	e008      	b.n	8109f0e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8109efc:	693b      	ldr	r3, [r7, #16]
 8109efe:	015a      	lsls	r2, r3, #5
 8109f00:	68fb      	ldr	r3, [r7, #12]
 8109f02:	4413      	add	r3, r2
 8109f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109f08:	461a      	mov	r2, r3
 8109f0a:	2300      	movs	r3, #0
 8109f0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8109f0e:	693b      	ldr	r3, [r7, #16]
 8109f10:	015a      	lsls	r2, r3, #5
 8109f12:	68fb      	ldr	r3, [r7, #12]
 8109f14:	4413      	add	r3, r2
 8109f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109f1a:	461a      	mov	r2, r3
 8109f1c:	2300      	movs	r3, #0
 8109f1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8109f20:	693b      	ldr	r3, [r7, #16]
 8109f22:	015a      	lsls	r2, r3, #5
 8109f24:	68fb      	ldr	r3, [r7, #12]
 8109f26:	4413      	add	r3, r2
 8109f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109f2c:	461a      	mov	r2, r3
 8109f2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8109f32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109f34:	693b      	ldr	r3, [r7, #16]
 8109f36:	3301      	adds	r3, #1
 8109f38:	613b      	str	r3, [r7, #16]
 8109f3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8109f3e:	461a      	mov	r2, r3
 8109f40:	693b      	ldr	r3, [r7, #16]
 8109f42:	4293      	cmp	r3, r2
 8109f44:	d3b5      	bcc.n	8109eb2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8109f46:	68fb      	ldr	r3, [r7, #12]
 8109f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109f4c:	691b      	ldr	r3, [r3, #16]
 8109f4e:	68fa      	ldr	r2, [r7, #12]
 8109f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8109f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109f58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8109f5a:	687b      	ldr	r3, [r7, #4]
 8109f5c:	2200      	movs	r2, #0
 8109f5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8109f60:	687b      	ldr	r3, [r7, #4]
 8109f62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8109f66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8109f68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8109f6c:	2b00      	cmp	r3, #0
 8109f6e:	d105      	bne.n	8109f7c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8109f70:	687b      	ldr	r3, [r7, #4]
 8109f72:	699b      	ldr	r3, [r3, #24]
 8109f74:	f043 0210 	orr.w	r2, r3, #16
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8109f7c:	687b      	ldr	r3, [r7, #4]
 8109f7e:	699a      	ldr	r2, [r3, #24]
 8109f80:	4b10      	ldr	r3, [pc, #64]	@ (8109fc4 <USB_DevInit+0x2b8>)
 8109f82:	4313      	orrs	r3, r2
 8109f84:	687a      	ldr	r2, [r7, #4]
 8109f86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8109f88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8109f8c:	2b00      	cmp	r3, #0
 8109f8e:	d005      	beq.n	8109f9c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8109f90:	687b      	ldr	r3, [r7, #4]
 8109f92:	699b      	ldr	r3, [r3, #24]
 8109f94:	f043 0208 	orr.w	r2, r3, #8
 8109f98:	687b      	ldr	r3, [r7, #4]
 8109f9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8109f9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8109fa0:	2b01      	cmp	r3, #1
 8109fa2:	d107      	bne.n	8109fb4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8109fa4:	687b      	ldr	r3, [r7, #4]
 8109fa6:	699b      	ldr	r3, [r3, #24]
 8109fa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8109fac:	f043 0304 	orr.w	r3, r3, #4
 8109fb0:	687a      	ldr	r2, [r7, #4]
 8109fb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8109fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8109fb6:	4618      	mov	r0, r3
 8109fb8:	3718      	adds	r7, #24
 8109fba:	46bd      	mov	sp, r7
 8109fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8109fc0:	b004      	add	sp, #16
 8109fc2:	4770      	bx	lr
 8109fc4:	803c3800 	.word	0x803c3800

08109fc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8109fc8:	b480      	push	{r7}
 8109fca:	b085      	sub	sp, #20
 8109fcc:	af00      	add	r7, sp, #0
 8109fce:	6078      	str	r0, [r7, #4]
 8109fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8109fd2:	2300      	movs	r3, #0
 8109fd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8109fd6:	68fb      	ldr	r3, [r7, #12]
 8109fd8:	3301      	adds	r3, #1
 8109fda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8109fdc:	68fb      	ldr	r3, [r7, #12]
 8109fde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8109fe2:	d901      	bls.n	8109fe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8109fe4:	2303      	movs	r3, #3
 8109fe6:	e01b      	b.n	810a020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8109fe8:	687b      	ldr	r3, [r7, #4]
 8109fea:	691b      	ldr	r3, [r3, #16]
 8109fec:	2b00      	cmp	r3, #0
 8109fee:	daf2      	bge.n	8109fd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8109ff0:	2300      	movs	r3, #0
 8109ff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8109ff4:	683b      	ldr	r3, [r7, #0]
 8109ff6:	019b      	lsls	r3, r3, #6
 8109ff8:	f043 0220 	orr.w	r2, r3, #32
 8109ffc:	687b      	ldr	r3, [r7, #4]
 8109ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810a000:	68fb      	ldr	r3, [r7, #12]
 810a002:	3301      	adds	r3, #1
 810a004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810a006:	68fb      	ldr	r3, [r7, #12]
 810a008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810a00c:	d901      	bls.n	810a012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810a00e:	2303      	movs	r3, #3
 810a010:	e006      	b.n	810a020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	691b      	ldr	r3, [r3, #16]
 810a016:	f003 0320 	and.w	r3, r3, #32
 810a01a:	2b20      	cmp	r3, #32
 810a01c:	d0f0      	beq.n	810a000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810a01e:	2300      	movs	r3, #0
}
 810a020:	4618      	mov	r0, r3
 810a022:	3714      	adds	r7, #20
 810a024:	46bd      	mov	sp, r7
 810a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a02a:	4770      	bx	lr

0810a02c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810a02c:	b480      	push	{r7}
 810a02e:	b085      	sub	sp, #20
 810a030:	af00      	add	r7, sp, #0
 810a032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810a034:	2300      	movs	r3, #0
 810a036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810a038:	68fb      	ldr	r3, [r7, #12]
 810a03a:	3301      	adds	r3, #1
 810a03c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810a03e:	68fb      	ldr	r3, [r7, #12]
 810a040:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810a044:	d901      	bls.n	810a04a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810a046:	2303      	movs	r3, #3
 810a048:	e018      	b.n	810a07c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810a04a:	687b      	ldr	r3, [r7, #4]
 810a04c:	691b      	ldr	r3, [r3, #16]
 810a04e:	2b00      	cmp	r3, #0
 810a050:	daf2      	bge.n	810a038 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810a052:	2300      	movs	r3, #0
 810a054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810a056:	687b      	ldr	r3, [r7, #4]
 810a058:	2210      	movs	r2, #16
 810a05a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810a05c:	68fb      	ldr	r3, [r7, #12]
 810a05e:	3301      	adds	r3, #1
 810a060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810a062:	68fb      	ldr	r3, [r7, #12]
 810a064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810a068:	d901      	bls.n	810a06e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810a06a:	2303      	movs	r3, #3
 810a06c:	e006      	b.n	810a07c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	691b      	ldr	r3, [r3, #16]
 810a072:	f003 0310 	and.w	r3, r3, #16
 810a076:	2b10      	cmp	r3, #16
 810a078:	d0f0      	beq.n	810a05c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810a07a:	2300      	movs	r3, #0
}
 810a07c:	4618      	mov	r0, r3
 810a07e:	3714      	adds	r7, #20
 810a080:	46bd      	mov	sp, r7
 810a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a086:	4770      	bx	lr

0810a088 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810a088:	b480      	push	{r7}
 810a08a:	b085      	sub	sp, #20
 810a08c:	af00      	add	r7, sp, #0
 810a08e:	6078      	str	r0, [r7, #4]
 810a090:	460b      	mov	r3, r1
 810a092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810a094:	687b      	ldr	r3, [r7, #4]
 810a096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810a098:	68fb      	ldr	r3, [r7, #12]
 810a09a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810a09e:	681a      	ldr	r2, [r3, #0]
 810a0a0:	78fb      	ldrb	r3, [r7, #3]
 810a0a2:	68f9      	ldr	r1, [r7, #12]
 810a0a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810a0a8:	4313      	orrs	r3, r2
 810a0aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810a0ac:	2300      	movs	r3, #0
}
 810a0ae:	4618      	mov	r0, r3
 810a0b0:	3714      	adds	r7, #20
 810a0b2:	46bd      	mov	sp, r7
 810a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0b8:	4770      	bx	lr

0810a0ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810a0ba:	b480      	push	{r7}
 810a0bc:	b085      	sub	sp, #20
 810a0be:	af00      	add	r7, sp, #0
 810a0c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810a0c2:	687b      	ldr	r3, [r7, #4]
 810a0c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810a0c6:	68fb      	ldr	r3, [r7, #12]
 810a0c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810a0cc:	681b      	ldr	r3, [r3, #0]
 810a0ce:	68fa      	ldr	r2, [r7, #12]
 810a0d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810a0d4:	f023 0303 	bic.w	r3, r3, #3
 810a0d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810a0da:	68fb      	ldr	r3, [r7, #12]
 810a0dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810a0e0:	685b      	ldr	r3, [r3, #4]
 810a0e2:	68fa      	ldr	r2, [r7, #12]
 810a0e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810a0e8:	f043 0302 	orr.w	r3, r3, #2
 810a0ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810a0ee:	2300      	movs	r3, #0
}
 810a0f0:	4618      	mov	r0, r3
 810a0f2:	3714      	adds	r7, #20
 810a0f4:	46bd      	mov	sp, r7
 810a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0fa:	4770      	bx	lr

0810a0fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 810a0fc:	b480      	push	{r7}
 810a0fe:	b083      	sub	sp, #12
 810a100:	af00      	add	r7, sp, #0
 810a102:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810a104:	687b      	ldr	r3, [r7, #4]
 810a106:	695b      	ldr	r3, [r3, #20]
 810a108:	f003 0301 	and.w	r3, r3, #1
}
 810a10c:	4618      	mov	r0, r3
 810a10e:	370c      	adds	r7, #12
 810a110:	46bd      	mov	sp, r7
 810a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a116:	4770      	bx	lr

0810a118 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810a118:	b480      	push	{r7}
 810a11a:	b085      	sub	sp, #20
 810a11c:	af00      	add	r7, sp, #0
 810a11e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810a120:	2300      	movs	r3, #0
 810a122:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810a124:	68fb      	ldr	r3, [r7, #12]
 810a126:	3301      	adds	r3, #1
 810a128:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810a12a:	68fb      	ldr	r3, [r7, #12]
 810a12c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810a130:	d901      	bls.n	810a136 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810a132:	2303      	movs	r3, #3
 810a134:	e01b      	b.n	810a16e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810a136:	687b      	ldr	r3, [r7, #4]
 810a138:	691b      	ldr	r3, [r3, #16]
 810a13a:	2b00      	cmp	r3, #0
 810a13c:	daf2      	bge.n	810a124 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810a13e:	2300      	movs	r3, #0
 810a140:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810a142:	687b      	ldr	r3, [r7, #4]
 810a144:	691b      	ldr	r3, [r3, #16]
 810a146:	f043 0201 	orr.w	r2, r3, #1
 810a14a:	687b      	ldr	r3, [r7, #4]
 810a14c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810a14e:	68fb      	ldr	r3, [r7, #12]
 810a150:	3301      	adds	r3, #1
 810a152:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810a154:	68fb      	ldr	r3, [r7, #12]
 810a156:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810a15a:	d901      	bls.n	810a160 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810a15c:	2303      	movs	r3, #3
 810a15e:	e006      	b.n	810a16e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810a160:	687b      	ldr	r3, [r7, #4]
 810a162:	691b      	ldr	r3, [r3, #16]
 810a164:	f003 0301 	and.w	r3, r3, #1
 810a168:	2b01      	cmp	r3, #1
 810a16a:	d0f0      	beq.n	810a14e <USB_CoreReset+0x36>

  return HAL_OK;
 810a16c:	2300      	movs	r3, #0
}
 810a16e:	4618      	mov	r0, r3
 810a170:	3714      	adds	r7, #20
 810a172:	46bd      	mov	sp, r7
 810a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a178:	4770      	bx	lr

0810a17a <memset>:
 810a17a:	4402      	add	r2, r0
 810a17c:	4603      	mov	r3, r0
 810a17e:	4293      	cmp	r3, r2
 810a180:	d100      	bne.n	810a184 <memset+0xa>
 810a182:	4770      	bx	lr
 810a184:	f803 1b01 	strb.w	r1, [r3], #1
 810a188:	e7f9      	b.n	810a17e <memset+0x4>
	...

0810a18c <__libc_init_array>:
 810a18c:	b570      	push	{r4, r5, r6, lr}
 810a18e:	4d0d      	ldr	r5, [pc, #52]	@ (810a1c4 <__libc_init_array+0x38>)
 810a190:	4c0d      	ldr	r4, [pc, #52]	@ (810a1c8 <__libc_init_array+0x3c>)
 810a192:	1b64      	subs	r4, r4, r5
 810a194:	10a4      	asrs	r4, r4, #2
 810a196:	2600      	movs	r6, #0
 810a198:	42a6      	cmp	r6, r4
 810a19a:	d109      	bne.n	810a1b0 <__libc_init_array+0x24>
 810a19c:	4d0b      	ldr	r5, [pc, #44]	@ (810a1cc <__libc_init_array+0x40>)
 810a19e:	4c0c      	ldr	r4, [pc, #48]	@ (810a1d0 <__libc_init_array+0x44>)
 810a1a0:	f000 f826 	bl	810a1f0 <_init>
 810a1a4:	1b64      	subs	r4, r4, r5
 810a1a6:	10a4      	asrs	r4, r4, #2
 810a1a8:	2600      	movs	r6, #0
 810a1aa:	42a6      	cmp	r6, r4
 810a1ac:	d105      	bne.n	810a1ba <__libc_init_array+0x2e>
 810a1ae:	bd70      	pop	{r4, r5, r6, pc}
 810a1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 810a1b4:	4798      	blx	r3
 810a1b6:	3601      	adds	r6, #1
 810a1b8:	e7ee      	b.n	810a198 <__libc_init_array+0xc>
 810a1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 810a1be:	4798      	blx	r3
 810a1c0:	3601      	adds	r6, #1
 810a1c2:	e7f2      	b.n	810a1aa <__libc_init_array+0x1e>
 810a1c4:	0810a294 	.word	0x0810a294
 810a1c8:	0810a294 	.word	0x0810a294
 810a1cc:	0810a294 	.word	0x0810a294
 810a1d0:	0810a298 	.word	0x0810a298

0810a1d4 <memcpy>:
 810a1d4:	440a      	add	r2, r1
 810a1d6:	4291      	cmp	r1, r2
 810a1d8:	f100 33ff 	add.w	r3, r0, #4294967295
 810a1dc:	d100      	bne.n	810a1e0 <memcpy+0xc>
 810a1de:	4770      	bx	lr
 810a1e0:	b510      	push	{r4, lr}
 810a1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a1ea:	4291      	cmp	r1, r2
 810a1ec:	d1f9      	bne.n	810a1e2 <memcpy+0xe>
 810a1ee:	bd10      	pop	{r4, pc}

0810a1f0 <_init>:
 810a1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a1f2:	bf00      	nop
 810a1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a1f6:	bc08      	pop	{r3}
 810a1f8:	469e      	mov	lr, r3
 810a1fa:	4770      	bx	lr

0810a1fc <_fini>:
 810a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a1fe:	bf00      	nop
 810a200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a202:	bc08      	pop	{r3}
 810a204:	469e      	mov	lr, r3
 810a206:	4770      	bx	lr
